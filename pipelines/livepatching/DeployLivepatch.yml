trigger: none

variables:
# Required by used templates.
- group: "Mariner Automation"

- name: 'buildArtifactsFolder'
  value: build-artifacts

- name: 'buildLogsFolder'
  value: 'LOGS'

- name: 'kernelModulesFolder'
  value: '$(Pipeline.Workspace)/kernel_modules'

- name: 'pipelinesRepoFolder'
  value: '$CBL-Mariner-Pipelines'

- name: 'pipelinesRepoRoot'
  value: '$(Agent.BuildDirectory)/$(pipelinesRepoFolder)'

- name: 'selfRepoFolder'
  value: 'CBL-Mariner'

- name: 'selfRepoRoot'
  value: '$(Agent.BuildDirectory)/$(selfRepoFolder)'

- name: 'signingKeyID'
  value: '3135ce90'

parameters:
- name: livepatchKernelVersion
  displayName: 'Version of the kernel, which is used to build the livepatch (example: 5.15.92.1-1.cm2).'
  type: string

- name: useKernelBuildArtifacts
  displayName: 'Use toolkit and packages from the time the kernel was built.'
  type: boolean
  default: false

- name: useRPMsSnapshot
  displayName: 'Use build RPMs snapshot to populate the packages cache.'
  type: boolean
  default: false

- name: debugBuild
  displayName: '[REMOVE ME!] Test param.'
  type: boolean
  default: false

resources:
  repositories:
  - repository: 1ESPipelineTemplates
    type: git
    name: 1ESPipelineTemplates/1ESPipelineTemplates
    ref: refs/tags/canary

  - repository: CBL-Mariner-Pipelines
    type: git
    name: mariner/CBL-Mariner-Pipelines
    ref: refs/heads/pawelwi/signing_livepatches

extends:
  template: v1/1ES.Official.PipelineTemplate.yml@1ESPipelineTemplates
  parameters:
    pool:
      name: mariner-core-x64-1es-mariner2-gpt-test
      os: linux
    sdl:
      sourceAnalysisPool:
        name: windows-server-2022-x64-1es-gpt-test
        os: windows
      sbom:
        enabled: true
      gitCheckout_all_repos: true

    stages:
    - stage: Build
      condition: eq('${{ parameters.debugBuild }}', false)
      jobs:
      - job:
        templateContext:
          outputs:
          - output: pipelineArtifact
            displayName: 'Publish build artifacts'
            targetPath: $(Build.ArtifactStagingDirectory)/$(buildArtifactsFolder)
            artifactName: $(buildArtifactsFolder)_BUILD

          - output: pipelineArtifact
            displayName: 'Publish logs'
            targetPath: $(Build.ArtifactStagingDirectory)/$(buildLogsFolder)
            artifactName: LOGS_BUILD

        steps:
        - bash: |
            mariner_version="$(make -sC toolkit printvar-RELEASE_MAJOR_ID CONFIG_FILE=)"
            download_tags="$mariner_version-stable"
            if [[ "${{ parameters.useKernelBuildArtifacts }}" =~ [Tt]rue ]]
            then
              download_tags+=",kernel-${{ parameters.livepatchKernelVersion }}"
            fi

            echo "##vso[task.setvariable variable=downloadTags]$download_tags"
            echo "Will download artifacts from build with tags '$download_tags'."
          displayName: 'Determine artifacts source'

        - task: DownloadPipelineArtifact@2
          displayName: 'Download artifacts from a kernel build'
          inputs:
            source: specific
            project: 'mariner'
            pipeline: 1141
            runVersion: latestFromBranch
            tags: '$(downloadTags)'
            artifact: $(buildArtifactsFolder)
            patterns: |
              **/rpms.tar.gz
              **/toolchain_built_rpms_all.tar.gz
              **/toolkit-*.tar.gz
            path: '$(System.ArtifactsDirectory)'

        - task: Bash@3
          displayName: 'Build livepatch'
          inputs:
            filePath: 'pipelines/livepatching/BuildLivepatch.sh'
            arguments: '-a "$(System.ArtifactsDirectory)"
                        -k "${{ parameters.livepatchKernelVersion }}"
                        -l "$(Build.ArtifactStagingDirectory)/$(buildLogsFolder)"
                        -p "$(Build.ArtifactStagingDirectory)/$(buildArtifactsFolder)"
                        -s "${{ parameters.useRPMsSnapshot }}"'

    - stage: Sign
      condition: always()
      jobs:
      - job: Kernel_modules
        condition: eq('${{ parameters.debugBuild }}', false)
        templateContext:
          outputs:
          - output: pipelineArtifact
            displayName: 'Publish build artifacts'
            targetPath: $(Build.ArtifactStagingDirectory)/$(buildArtifactsFolder)
            artifactName: $(buildArtifactsFolder)_KERNEL_MODULES

          - output: pipelineArtifact
            displayName: 'Publish logs'
            targetPath: $(Build.ArtifactStagingDirectory)/$(buildLogsFolder)
            artifactName: LOGS_KERNEL_MODULES

        steps:
        - checkout: self
          path: '$(selfRepoFolder)'

        - checkout: CBL-Mariner-Pipelines
          path: '$(pipelinesRepoFolder)'

        - ${{ if eq(parameters.debugBuild, false) }}:
          - task: DownloadPipelineArtifact@2
            displayName: 'Download livepatch RPMs and toolkit'
            inputs:
              source: current
              artifact: '$(buildArtifactsFolder)_BUILD'
              patterns: |
                **/rpms.tar.gz
                **/toolkit-*.tar.gz
              path: '$(System.ArtifactsDirectory)'

        - ${{ if eq(parameters.debugBuild, true) }}:
          - task: DownloadPipelineArtifact@2
            displayName: '[TEST] Download livepatch RPMs and toolkit'
            inputs:
              source: specific
              project: 'mariner'
              pipeline: 1141
              runVersion: specific
              runId: 273008
              tags: '$(downloadTags)'
              artifact: '$(buildArtifactsFolder)'
              patterns: |
                **/rpms.tar.gz
                **/toolkit-*.tar.gz
              path: '$(System.ArtifactsDirectory)'

        - task: Bash@3
          displayName: 'Extract kernel modules'
          inputs:
            filePath: '$(selfRepoRoot)/pipelines/livepatching/ExtractKernelModules.sh'
            arguments: '-a "$(System.ArtifactsDirectory)"
                        -o "$(kernelModulesFolder)"'
            workingDirectory: '$(selfRepoRoot)'

        # - template: .pipelines/templates/KernelModulesSigning.yml@CBL-Mariner-Pipelines
        #   parameters:
        #     artifactsFolder: '$(kernelModulesFolder)'
        #     repoRootPath: '$(pipelinesRepoRoot)'

        - task: Bash@3
          displayName: 'Build livepatch-signed RPM'
          inputs:
            filePath: '$(selfRepoRoot)/pipelines/livepatching/BuildLivepatchSigned.sh'
            arguments: '-a "$(System.ArtifactsDirectory)"
                        -k "${{ parameters.livepatchKernelVersion }}"
                        -l "$(Build.ArtifactStagingDirectory)/$(buildLogsFolder)"
                        -m "$(kernelModulesFolder)"
                        -p "$(Build.ArtifactStagingDirectory)/$(buildArtifactsFolder)"'
            workingDirectory: '$(selfRepoRoot)'

      - job: RPMs
        dependsOn: Kernel_modules
        templateContext:
          outputs:
          - output: pipelineArtifact
            displayName: 'Publish build artifacts'
            targetPath: $(Build.ArtifactStagingDirectory)/$(buildArtifactsFolder)
            artifactName: $(buildArtifactsFolder)_RPMS

        steps:
        - ${{ if eq(parameters.debugBuild, false) }}:
          - task: DownloadPipelineArtifact@2
            displayName: 'Download RPMs and SRPMs archives'
            inputs:
              source: current
              artifact: '$(buildArtifactsFolder)_KERNEL_MODULES'
              patterns: '**/*rpms.tar.gz'
              path: '$(System.ArtifactsDirectory)'

        - ${{ if eq(parameters.debugBuild, true) }}:
          - task: DownloadPipelineArtifact@2
            displayName: '[TEST] Download livepatch RPMs and toolkit'
            inputs:
              source: specific
              project: 'mariner'
              pipeline: 1141
              runVersion: specific
              runId: 273008
              tags: '$(downloadTags)'
              artifact: '$(buildArtifactsFolder)'
              patterns: '**/rpms.tar.gz'
              path: '$(System.ArtifactsDirectory)'

        - bash: |
            while IFS= read -r -d '' archive
            do
              echo "Extracting archive '$archive'."
              tar -C "$(System.ArtifactsDirectory)" -xf "$archive"
            done < <(find "$(System.ArtifactsDirectory)" -name '*rpms.tar.gz' -print0)
          displayName: 'Expand SRPM/RPM tarballs'

        - task: EsrpCodeSigning@2
          displayName: 'Sign RPMs'
          inputs:
            ConnectedServiceName: 'Mariner RPM Signing'
            FolderPath: '$(System.ArtifactsDirectory)'
            Pattern: '*.rpm'
            signConfigType: inlineSignParams
            inlineOperation: |
              [
                {
                  "KeyCode": "CP-459159-Pgp",
                  "OperationCode": "LinuxSign",
                  "Parameters": {},
                  "ToolName": "sign",
                  "ToolVersion": "1.0"
                }
              ]

        - task: Bash@3
          displayName: 'Validate and package signed RPMs'
          inputs:
            filePath: 'pipelines/common/scripts/PackageSignedRPMs.sh'
            arguments: '-a "$(System.ArtifactsDirectory)"
                        -k "$(signingKeyID)"
                        -p "$(Build.ArtifactStagingDirectory)/$(buildArtifactsFolder)"'

    - stage: Test
      jobs:
      - job:
        steps:
        - bash: |
            sleep 1
          displayName: 'Test placeholder'

    - stage: Publish
      jobs:
      - job:
        steps:
        - bash: |
            sleep 1
          displayName: 'Publishing placeholder'
