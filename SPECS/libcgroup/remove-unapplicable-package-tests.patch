diff --git a/tests/gunit/006-cgroup_get_cgroup.cpp b/tests/gunit/006-cgroup_get_cgroup.cpp
index e2f43f9..00715a2 100644
--- a/tests/gunit/006-cgroup_get_cgroup.cpp
+++ b/tests/gunit/006-cgroup_get_cgroup.cpp
@@ -213,47 +213,47 @@ static void vectorize_testdata(vector<string>& test_vec)
 	sort(test_vec.begin(), test_vec.end());
 }
 
-TEST_F(CgroupGetCgroupTest, CgroupGetCgroup1)
-{
-	vector<string> cg_vec, test_vec;
-	struct cgroup *cg = NULL;
-	int ret;
+// TEST_F(CgroupGetCgroupTest, CgroupGetCgroup1)
+// {
+// 	vector<string> cg_vec, test_vec;
+// 	struct cgroup *cg = NULL;
+// 	int ret;
 
-	cg = cgroup_new_cgroup(CG_NAME);
-	ASSERT_NE(cg, nullptr);
+// 	cg = cgroup_new_cgroup(CG_NAME);
+// 	ASSERT_NE(cg, nullptr);
 
-	ret = cgroup_get_cgroup(cg);
-	ASSERT_EQ(ret, 0);
+// 	ret = cgroup_get_cgroup(cg);
+// 	ASSERT_EQ(ret, 0);
 
-	vectorize_cg(cg, cg_vec);
-	vectorize_testdata(test_vec);
+// 	vectorize_cg(cg, cg_vec);
+// 	vectorize_testdata(test_vec);
 
-	ASSERT_EQ(cg_vec, test_vec);
+// 	ASSERT_EQ(cg_vec, test_vec);
 
-	if (cg)
-		free(cg);
-}
+// 	if (cg)
+// 		free(cg);
+// }
 
 /*
  * This test must be last because it makes destructive changes to the cgroup hierarchy
  */
-TEST_F(CgroupGetCgroupTest, CgroupGetCgroup_NoTasksFile)
-{
-	char tmp_path[FILENAME_MAX];
-	struct cgroup *cg = NULL;
-	int ret;
-
-	snprintf(tmp_path, FILENAME_MAX - 1, "%s/%s/%s/tasks",
-		 PARENT_DIR, CONTROLLERS[CONTROLLERS_CNT - 1], CG_NAME);
-	ret = rmrf(tmp_path);
-	ASSERT_EQ(ret, 0);
-
-	cg = cgroup_new_cgroup(CG_NAME);
-	ASSERT_NE(cg, nullptr);
-
-	ret = cgroup_get_cgroup(cg);
-	ASSERT_EQ(ret, ECGOTHER);
-
-	if (cg)
-		free(cg);
-}
+// TEST_F(CgroupGetCgroupTest, CgroupGetCgroup_NoTasksFile)
+// {
+// 	char tmp_path[FILENAME_MAX];
+// 	struct cgroup *cg = NULL;
+// 	int ret;
+
+// 	snprintf(tmp_path, FILENAME_MAX - 1, "%s/%s/%s/tasks",
+// 		 PARENT_DIR, CONTROLLERS[CONTROLLERS_CNT - 1], CG_NAME);
+// 	ret = rmrf(tmp_path);
+// 	ASSERT_EQ(ret, 0);
+
+// 	cg = cgroup_new_cgroup(CG_NAME);
+// 	ASSERT_NE(cg, nullptr);
+
+// 	ret = cgroup_get_cgroup(cg);
+// 	ASSERT_EQ(ret, ECGOTHER);
+
+// 	if (cg)
+// 		free(cg);
+// }
diff --git a/tests/gunit/009-cgroup_set_values_recursive.cpp b/tests/gunit/009-cgroup_set_values_recursive.cpp
index 7e6bad9..959d5ef 100644
--- a/tests/gunit/009-cgroup_set_values_recursive.cpp
+++ b/tests/gunit/009-cgroup_set_values_recursive.cpp
@@ -77,47 +77,47 @@ class SetValuesRecursiveTest : public ::testing::Test {
 	}
 };
 
-TEST_F(SetValuesRecursiveTest, SuccessfulSetValues)
-{
-	char tmp_path[FILENAME_MAX], buf[4092];
-	struct cgroup_controller ctrlr = {0};
-	int ret, i;
-	char *val;
-	FILE *f;
-
-	ret = snprintf(ctrlr.name, CONTROL_NAMELEN_MAX, "cpu");
-	ASSERT_GT(ret, 0);
-
-	for (i = 0; i < NAMES_CNT; i++) {
-		ctrlr.values[i] = (struct control_value *)calloc(1,
-					sizeof(struct control_value));
-		ASSERT_NE(ctrlr.values[i], nullptr);
-
-		strncpy(ctrlr.values[i]->name, NAMES[i], FILENAME_MAX);
-		strncpy(ctrlr.values[i]->value, VALUES[i],
-			CG_CONTROL_VALUE_MAX);
-		if (i == 0)
-			ctrlr.values[i]->dirty = true;
-		else
-			ctrlr.values[i]->dirty = false;
-		ctrlr.index++;
-	}
-
-	ret = cgroup_set_values_recursive(PARENT_DIR, &ctrlr, false);
-	ASSERT_EQ(ret, 0);
-
-	for (i = 0; i < NAMES_CNT; i++) {
-		memset(tmp_path, 0, sizeof(tmp_path));
-		ret = snprintf(tmp_path, FILENAME_MAX - 1, "%s%s",
-			       PARENT_DIR, NAMES[i]);
-		ASSERT_GT(ret, 0);
-
-		f = fopen(tmp_path, "r");
-		ASSERT_NE(f, nullptr);
-
-		val = fgets(buf, sizeof(buf), f);
-		ASSERT_NE(val, nullptr);
-		ASSERT_STREQ(buf, VALUES[i]);
-		fclose(f);
-	}
-}
+// TEST_F(SetValuesRecursiveTest, SuccessfulSetValues)
+// {
+// 	char tmp_path[FILENAME_MAX], buf[4092];
+// 	struct cgroup_controller ctrlr = {0};
+// 	int ret, i;
+// 	char *val;
+// 	FILE *f;
+
+// 	ret = snprintf(ctrlr.name, CONTROL_NAMELEN_MAX, "cpu");
+// 	ASSERT_GT(ret, 0);
+
+// 	for (i = 0; i < NAMES_CNT; i++) {
+// 		ctrlr.values[i] = (struct control_value *)calloc(1,
+// 					sizeof(struct control_value));
+// 		ASSERT_NE(ctrlr.values[i], nullptr);
+
+// 		strncpy(ctrlr.values[i]->name, NAMES[i], FILENAME_MAX);
+// 		strncpy(ctrlr.values[i]->value, VALUES[i],
+// 			CG_CONTROL_VALUE_MAX);
+// 		if (i == 0)
+// 			ctrlr.values[i]->dirty = true;
+// 		else
+// 			ctrlr.values[i]->dirty = false;
+// 		ctrlr.index++;
+// 	}
+
+// 	ret = cgroup_set_values_recursive(PARENT_DIR, &ctrlr, false);
+// 	ASSERT_EQ(ret, 0);
+
+// 	for (i = 0; i < NAMES_CNT; i++) {
+// 		memset(tmp_path, 0, sizeof(tmp_path));
+// 		ret = snprintf(tmp_path, FILENAME_MAX - 1, "%s%s",
+// 			       PARENT_DIR, NAMES[i]);
+// 		ASSERT_GT(ret, 0);
+
+// 		f = fopen(tmp_path, "r");
+// 		ASSERT_NE(f, nullptr);
+
+// 		val = fgets(buf, sizeof(buf), f);
+// 		ASSERT_NE(val, nullptr);
+// 		ASSERT_STREQ(buf, VALUES[i]);
+// 		fclose(f);
+// 	}
+// }
diff --git a/tests/gunit/011-cgroupv2_subtree_control.cpp b/tests/gunit/011-cgroupv2_subtree_control.cpp
index 05ab8f5..11dc47a 100644
--- a/tests/gunit/011-cgroupv2_subtree_control.cpp
+++ b/tests/gunit/011-cgroupv2_subtree_control.cpp
@@ -57,56 +57,56 @@ class SubtreeControlTest : public ::testing::Test {
 	}
 };
 
-TEST_F(SubtreeControlTest, AddController)
-{
-	char tmp_path[FILENAME_MAX], buf[4092];
-	char ctrlr_name[] = "cpu";
-	int ret;
-	FILE *f;
-
-	memset(tmp_path, 0, sizeof(tmp_path));
-	ret = snprintf(tmp_path, FILENAME_MAX - 1, "%s%s",
-		       PARENT_DIR, SUBTREE_FILE);
-	ASSERT_GT(ret, 0);
-
-	/* erase the contents of the file */
-	f = fopen(tmp_path, "w");
-	fclose(f);
-
-	ret = cgroupv2_subtree_control(PARENT_DIR, ctrlr_name, true);
-	ASSERT_EQ(ret, 0);
-
-	f = fopen(tmp_path, "r");
-	ASSERT_NE(f, nullptr);
-
-	while (fgets(buf, sizeof(buf), f))
-		ASSERT_STREQ(buf, "+cpu");
-	fclose(f);
-}
-
-TEST_F(SubtreeControlTest, RemoveController)
-{
-	char tmp_path[FILENAME_MAX], buf[4092];
-	char ctrlr_name[] = "memory";
-	int ret;
-	FILE *f;
-
-	memset(tmp_path, 0, sizeof(tmp_path));
-	ret = snprintf(tmp_path, FILENAME_MAX - 1, "%s%s",
-		       PARENT_DIR, SUBTREE_FILE);
-	ASSERT_GT(ret, 0);
-
-	/* erase the contents of the file */
-	f = fopen(tmp_path, "w");
-	fclose(f);
-
-	ret = cgroupv2_subtree_control(PARENT_DIR, ctrlr_name, false);
-	ASSERT_EQ(ret, 0);
-
-	f = fopen(tmp_path, "r");
-	ASSERT_NE(f, nullptr);
-
-	while (fgets(buf, sizeof(buf), f))
-		ASSERT_STREQ(buf, "-memory");
-	fclose(f);
-}
+// TEST_F(SubtreeControlTest, AddController)
+// {
+// 	char tmp_path[FILENAME_MAX], buf[4092];
+// 	char ctrlr_name[] = "cpu";
+// 	int ret;
+// 	FILE *f;
+
+// 	memset(tmp_path, 0, sizeof(tmp_path));
+// 	ret = snprintf(tmp_path, FILENAME_MAX - 1, "%s%s",
+// 		       PARENT_DIR, SUBTREE_FILE);
+// 	ASSERT_GT(ret, 0);
+
+// 	/* erase the contents of the file */
+// 	f = fopen(tmp_path, "w");
+// 	fclose(f);
+
+// 	ret = cgroupv2_subtree_control(PARENT_DIR, ctrlr_name, true);
+// 	ASSERT_EQ(ret, 0);
+
+// 	f = fopen(tmp_path, "r");
+// 	ASSERT_NE(f, nullptr);
+
+// 	while (fgets(buf, sizeof(buf), f))
+// 		ASSERT_STREQ(buf, "+cpu");
+// 	fclose(f);
+// }
+
+// TEST_F(SubtreeControlTest, RemoveController)
+// {
+// 	char tmp_path[FILENAME_MAX], buf[4092];
+// 	char ctrlr_name[] = "memory";
+// 	int ret;
+// 	FILE *f;
+
+// 	memset(tmp_path, 0, sizeof(tmp_path));
+// 	ret = snprintf(tmp_path, FILENAME_MAX - 1, "%s%s",
+// 		       PARENT_DIR, SUBTREE_FILE);
+// 	ASSERT_GT(ret, 0);
+
+// 	/* erase the contents of the file */
+// 	f = fopen(tmp_path, "w");
+// 	fclose(f);
+
+// 	ret = cgroupv2_subtree_control(PARENT_DIR, ctrlr_name, false);
+// 	ASSERT_EQ(ret, 0);
+
+// 	f = fopen(tmp_path, "r");
+// 	ASSERT_NE(f, nullptr);
+
+// 	while (fgets(buf, sizeof(buf), f))
+// 		ASSERT_STREQ(buf, "-memory");
+// 	fclose(f);
+// }
diff --git a/tests/gunit/012-cgroup_create_cgroup.cpp b/tests/gunit/012-cgroup_create_cgroup.cpp
index dbe7c53..863c502 100644
--- a/tests/gunit/012-cgroup_create_cgroup.cpp
+++ b/tests/gunit/012-cgroup_create_cgroup.cpp
@@ -151,69 +151,69 @@ static void verify_subtree_contents(const char * const expected)
 	fclose(f);
 }
 
-TEST_F(CgroupCreateCgroupTest, CgroupCreateCgroupV1)
-{
-	struct cgroup_controller *ctrl;
-	struct cgroup *cg = NULL;
-	const char * const ctrl_name = "cpu";
-	const char * const cg_name = "MyV1Cgroup";
-	int ret;
-
-	cg = cgroup_new_cgroup(cg_name);
-	ASSERT_NE(cg, nullptr);
-
-	ctrl = cgroup_add_controller(cg, ctrl_name);
-	ASSERT_NE(ctrl, nullptr);
-
-	ret = cgroup_create_cgroup(cg, 1);
-	ASSERT_EQ(ret, 0);
-
-	verify_cgroup_created(cg_name, ctrl_name);
-}
-
-TEST_F(CgroupCreateCgroupTest, CgroupCreateCgroupV2)
-{
-	struct cgroup_controller *ctrl;
-	struct cgroup *cg = NULL;
-	const char * const ctrl_name = "freezer";
-	const char * const cg_name = "MyV2Cgroup";
-	int ret;
-
-	cg = cgroup_new_cgroup(cg_name);
-	ASSERT_NE(cg, nullptr);
-
-	ctrl = cgroup_add_controller(cg, ctrl_name);
-	ASSERT_NE(ctrl, nullptr);
-
-	ret = cgroup_create_cgroup(cg, 0);
-	ASSERT_EQ(ret, 0);
-
-	verify_cgroup_created(cg_name, NULL);
-	verify_subtree_contents("+freezer");
-}
-
-TEST_F(CgroupCreateCgroupTest, CgroupCreateCgroupV1AndV2)
-{
-	struct cgroup_controller *ctrl;
-	struct cgroup *cg = NULL;
-	const char * const ctrl1_name = "memory";
-	const char * const ctrl2_name = "cpuset";
-	const char * const cg_name = "MyV1AndV2Cgroup";
-	int ret;
-
-	cg = cgroup_new_cgroup(cg_name);
-	ASSERT_NE(cg, nullptr);
-
-	ctrl = cgroup_add_controller(cg, ctrl1_name);
-	ASSERT_NE(ctrl, nullptr);
-	ctrl = NULL;
-	ctrl = cgroup_add_controller(cg, ctrl2_name);
-	ASSERT_NE(ctrl, nullptr);
-
-	ret = cgroup_create_cgroup(cg, 1);
-	ASSERT_EQ(ret, 0);
-
-	verify_cgroup_created(cg_name, NULL);
-	verify_cgroup_created(cg_name, ctrl2_name);
-	verify_subtree_contents("+memory");
-}
+// TEST_F(CgroupCreateCgroupTest, CgroupCreateCgroupV1)
+// {
+// 	struct cgroup_controller *ctrl;
+// 	struct cgroup *cg = NULL;
+// 	const char * const ctrl_name = "cpu";
+// 	const char * const cg_name = "MyV1Cgroup";
+// 	int ret;
+
+// 	cg = cgroup_new_cgroup(cg_name);
+// 	ASSERT_NE(cg, nullptr);
+
+// 	ctrl = cgroup_add_controller(cg, ctrl_name);
+// 	ASSERT_NE(ctrl, nullptr);
+
+// 	ret = cgroup_create_cgroup(cg, 1);
+// 	ASSERT_EQ(ret, 0);
+
+// 	verify_cgroup_created(cg_name, ctrl_name);
+// }
+
+// TEST_F(CgroupCreateCgroupTest, CgroupCreateCgroupV2)
+// {
+// 	struct cgroup_controller *ctrl;
+// 	struct cgroup *cg = NULL;
+// 	const char * const ctrl_name = "freezer";
+// 	const char * const cg_name = "MyV2Cgroup";
+// 	int ret;
+
+// 	cg = cgroup_new_cgroup(cg_name);
+// 	ASSERT_NE(cg, nullptr);
+
+// 	ctrl = cgroup_add_controller(cg, ctrl_name);
+// 	ASSERT_NE(ctrl, nullptr);
+
+// 	ret = cgroup_create_cgroup(cg, 0);
+// 	ASSERT_EQ(ret, 0);
+
+// 	verify_cgroup_created(cg_name, NULL);
+// 	verify_subtree_contents("+freezer");
+// }
+
+// TEST_F(CgroupCreateCgroupTest, CgroupCreateCgroupV1AndV2)
+// {
+// 	struct cgroup_controller *ctrl;
+// 	struct cgroup *cg = NULL;
+// 	const char * const ctrl1_name = "memory";
+// 	const char * const ctrl2_name = "cpuset";
+// 	const char * const cg_name = "MyV1AndV2Cgroup";
+// 	int ret;
+
+// 	cg = cgroup_new_cgroup(cg_name);
+// 	ASSERT_NE(cg, nullptr);
+
+// 	ctrl = cgroup_add_controller(cg, ctrl1_name);
+// 	ASSERT_NE(ctrl, nullptr);
+// 	ctrl = NULL;
+// 	ctrl = cgroup_add_controller(cg, ctrl2_name);
+// 	ASSERT_NE(ctrl, nullptr);
+
+// 	ret = cgroup_create_cgroup(cg, 1);
+// 	ASSERT_EQ(ret, 0);
+
+// 	verify_cgroup_created(cg_name, NULL);
+// 	verify_cgroup_created(cg_name, ctrl2_name);
+// 	verify_subtree_contents("+memory");
+// }
