--- a/app/app_drbg.c	2021-01-27 06:27:36.184980219 -0800
+++ b/app/app_drbg.c	2021-04-21 12:53:51.145612585 -0700
@@ -15,6 +15,7 @@
 #include "app_fips_lcl.h" /* All regular OpenSSL headers must come before here */
 #include "app_lcl.h"
 #include "safe_mem_lib.h"
+#include <openssl/rand_drbg.h>
 #ifdef ACVP_NO_RUNTIME
 
 typedef struct {
@@ -24,30 +25,29 @@
     size_t noncelen;
 } DRBG_TEST_ENT;
 
-static size_t drbg_test_entropy(DRBG_CTX *dctx,
-                                unsigned char **pout,
-                                int entropy,
-                                size_t min_len,
-                                size_t max_len) {
-    if (!dctx || !pout || !entropy) return 0;
+static int app_data_index = -1;
 
-    DRBG_TEST_ENT *t = (DRBG_TEST_ENT *)FIPS_drbg_get_app_data(dctx);
+static size_t drbg_test_entropy(RAND_DRBG *drbg, unsigned char **pout,
+                          int entropy, size_t min_len, size_t max_len,
+                          int prediction_resistance) 
+{
+    if (!drbg || !pout || !entropy) return 0;
+
+    DRBG_TEST_ENT *t = (DRBG_TEST_ENT *)RAND_DRBG_get_ex_data(drbg, app_data_index);
     if (!t) return 0;
 
+    printf("***** entropy: %s\n", t->ent);
     if (t->entlen < min_len) printf("entropy data len %zu < min_len: %zu\n", t->entlen, min_len);
     if (t->entlen > max_len) printf("entropy data len %zu > max_len: %zu\n", t->entlen, max_len);
     *pout = (unsigned char *)t->ent;
     return t->entlen;
 }
 
-static size_t drbg_test_nonce(DRBG_CTX *dctx,
-                              unsigned char **pout,
-                              int entropy,
-                              size_t min_len,
-                              size_t max_len) {
-    if (!dctx || !pout || !entropy) return 0;
+static size_t drbg_test_nonce(RAND_DRBG *drbg, unsigned char **pout,
+                        int entropy, size_t min_len, size_t max_len) {
+    if (!drbg || !pout || !entropy) return 0;
 
-    DRBG_TEST_ENT *t = (DRBG_TEST_ENT *)FIPS_drbg_get_app_data(dctx);
+    DRBG_TEST_ENT *t = (DRBG_TEST_ENT *)RAND_DRBG_get_ex_data(drbg, app_data_index);
 
     if (t->noncelen < min_len) printf("nonce data len %zu < min_len: %zu\n", t->noncelen, min_len);
     if (t->noncelen > max_len) printf("nonce data len %zu > max_len: %zu\n", t->noncelen, max_len);
@@ -80,36 +80,16 @@
         nonce = tc->nonce;
         switch (tc->mode) {
         case ACVP_DRBG_SHA_1:
-            nid = NID_sha1;
-            break;
         case ACVP_DRBG_SHA_224:
-            nid = NID_sha224;
-            break;
         case ACVP_DRBG_SHA_256:
-            nid = NID_sha256;
-            break;
         case ACVP_DRBG_SHA_384:
-            nid = NID_sha384;
-            break;
         case ACVP_DRBG_SHA_512:
-            nid = NID_sha512;
-            break;
-#if OPENSSL_VERSION_NUMBER >= 0x10101010L /* OpenSSL 1.1.1 or greater */
         case ACVP_DRBG_SHA_512_224:
-            nid = NID_sha512_224;
-            break;
         case ACVP_DRBG_SHA_512_256:
-            nid = NID_sha512_256;
-            break;
-#endif
         case ACVP_DRBG_TDES:
         case ACVP_DRBG_AES_128:
         case ACVP_DRBG_AES_192:
         case ACVP_DRBG_AES_256:
-#if OPENSSL_VERSION_NUMBER < 0x10101010L /* Not OpenSSL */
-        case ACVP_DRBG_SHA_512_224:
-        case ACVP_DRBG_SHA_512_256:
-#endif
         default:
             printf("%s: Unsupported algorithm/mode %d/%d (tc_id=%d)\n", __FUNCTION__, tc->tc_id,
                    tc->cipher, tc->mode);
@@ -123,36 +103,16 @@
         nonce = tc->nonce;
         switch (tc->mode) {
         case ACVP_DRBG_SHA_1:
-            nid =   NID_hmacWithSHA1;
-            break;
         case ACVP_DRBG_SHA_224:
-            nid =   NID_hmacWithSHA224;
-            break;
         case ACVP_DRBG_SHA_256:
-            nid =   NID_hmacWithSHA256;
-            break;
         case ACVP_DRBG_SHA_384:
-            nid =   NID_hmacWithSHA384;
-            break;
         case ACVP_DRBG_SHA_512:
-            nid =   NID_hmacWithSHA512;
-            break;
-#if OPENSSL_VERSION_NUMBER >= 0x10101010L /* OpenSSL 1.1.1 or greater */
         case ACVP_DRBG_SHA_512_224:
-            nid =   NID_hmacWithSHA512_224;
-            break;
         case ACVP_DRBG_SHA_512_256:
-            nid =   NID_hmacWithSHA512_256;
-            break;
-#endif
         case ACVP_DRBG_TDES:
         case ACVP_DRBG_AES_128:
         case ACVP_DRBG_AES_192:
         case ACVP_DRBG_AES_256:
-#if OPENSSL_VERSION_NUMBER < 0x10101010L /* Not OpenSSL */
-        case ACVP_DRBG_SHA_512_224:
-        case ACVP_DRBG_SHA_512_256:
-#endif
         default:
             printf("%s: Unsupported algorithm/mode %d/%d (tc_id=%d)\n", __FUNCTION__, tc->tc_id,
                    tc->cipher, tc->mode);
@@ -168,7 +128,7 @@
          * if not set nonce is ignored
          */
         if (tc->der_func_enabled) {
-            der_func = DRBG_FLAG_CTR_USE_DF;
+            der_func = RAND_DRBG_FLAG_CTR_NO_DF;
             nonce = tc->nonce;
         } else {
             /**
@@ -297,11 +257,18 @@
         break;
     }
 
-    DRBG_CTX *drbg_ctx = NULL;
+    printf("***** Selected NID \n");
+
+    RAND_DRBG *drbg = NULL;
+    app_data_index = RAND_DRBG_get_ex_new_index(0L, NULL, NULL, NULL, NULL);
+
+    printf("***** RAND_DRBG_get_ex_new_index \n");
+
     DRBG_TEST_ENT entropy_nonce;
     memzero_s(&entropy_nonce, sizeof(DRBG_TEST_ENT));
-    drbg_ctx = FIPS_drbg_new(nid, der_func | DRBG_FLAG_TEST);
-    if (!drbg_ctx) {
+    drbg = RAND_DRBG_new(nid, der_func, NULL);
+    printf("***** RAND_DRBG_new \n");
+    if (!drbg) {
         printf("ERROR: failed to create DRBG Context.\n");
         return result;
     }
@@ -315,13 +282,17 @@
     entropy_nonce.nonce = nonce;
     entropy_nonce.noncelen = tc->nonce_len;
 
-    FIPS_drbg_set_app_data(drbg_ctx, &entropy_nonce);
+    RAND_DRBG_set_ex_data(drbg, app_data_index, &entropy_nonce);
+    printf("***** RAND_DRBG_set_ex_data \n");
 
-    fips_rc = FIPS_drbg_set_callbacks(drbg_ctx,
+    fips_rc = RAND_DRBG_set_callbacks(drbg,
                                       drbg_test_entropy,
-                                      0, 0,
+                                      0,
                                       drbg_test_nonce,
                                       0);
+
+    printf("***** RAND_DRBG_set_callbacks \n");
+
     if (!fips_rc) {
         printf("ERROR: failed to Set callback DRBG ctx\n");
         long l = 9;
@@ -332,8 +303,9 @@
         goto end;
     }
 
-    fips_rc = FIPS_drbg_instantiate(drbg_ctx, (const unsigned char *)tc->perso_string,
+    fips_rc = RAND_DRBG_instantiate(drbg, (const unsigned char *)tc->perso_string,
                                     (size_t)tc->perso_string_len);
+    printf("***** RAND_DRBG_instantiate \n");
     if (!fips_rc) {
         printf("ERROR: failed to instantiate DRBG ctx\n");
         long l = 9;
@@ -352,8 +324,9 @@
         entropy_nonce.ent = tc->entropy_input_pr_0;
         entropy_nonce.entlen = drbg_entropy_len;
 
-        fips_rc =  FIPS_drbg_reseed(drbg_ctx, (const unsigned char *)tc->additional_input_0,
-                                      (size_t)(tc->additional_input_len));
+        fips_rc =  RAND_DRBG_reseed(drbg,(const unsigned char *)tc->additional_input_0,
+                                      (size_t)(tc->additional_input_len),
+                                      (int)(tc->pred_resist_enabled));
         if (!fips_rc) {
             printf("ERROR: failed to generate drbg reseed\n");
             long l;
@@ -367,7 +340,7 @@
     entropy_nonce.ent = tc->entropy_input_pr_1;
     entropy_nonce.entlen = tc->pr1_len;
 
-    fips_rc =  FIPS_drbg_generate(drbg_ctx, (unsigned char *)tc->drb,
+    fips_rc =  RAND_DRBG_generate(drbg, (unsigned char *)tc->drb,
                                   (size_t)(tc->drb_len),
                                   (int)tc->pred_resist_enabled,
                                   (const unsigned char *)tc->additional_input_1,
@@ -384,7 +357,7 @@
     entropy_nonce.ent = tc->entropy_input_pr_2;
     entropy_nonce.entlen = tc->pr2_len;
 
-    fips_rc =  FIPS_drbg_generate(drbg_ctx, (unsigned char *)tc->drb,
+    fips_rc =  RAND_DRBG_generate(drbg, (unsigned char *)tc->drb,
                                   (size_t)(tc->drb_len),
                                   (int)tc->pred_resist_enabled,
                                   (const unsigned char *)tc->additional_input_2,
@@ -401,8 +374,8 @@
     result = 0;
 
 end:
-    FIPS_drbg_uninstantiate(drbg_ctx);
-    FIPS_drbg_free(drbg_ctx);
+    RAND_DRBG_uninstantiate(drbg);
+    RAND_DRBG_free(drbg);
 
     return result;
 }
