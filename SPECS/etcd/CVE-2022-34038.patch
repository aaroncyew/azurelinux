From 5a315ef88fbfa454e02d27b0b8acb4f89457cd90 Mon Sep 17 00:00:00 2001
From: Benjamin Wang <wachao@vmware.com>
Date: Tue, 13 Sep 2022 16:35:31 +0800
Subject: [PATCH] add a verification on the pagebytes which must be > 0

Signed-off-by: Benjamin Wang <wachao@vmware.com>
---
 pkg/ioutil/pagewriter.go      |  3 +++
 pkg/ioutil/pagewriter_test.go | 41 +++++++++++++++++++++++++++++++++++
 2 files changed, 44 insertions(+)

diff --git a/pkg/ioutil/pagewriter.go b/pkg/ioutil/pagewriter.go
index cf9a8dc664d..83c856d6685 100644
--- a/pkg/ioutil/pagewriter.go
+++ b/pkg/ioutil/pagewriter.go
@@ -16,6 +16,8 @@ package ioutil
 
 import (
 	"io"
+
+	"go.etcd.io/etcd/client/pkg/v3/verify"
 )
 
 var defaultBufferBytes = 128 * 1024
@@ -41,6 +43,7 @@ type PageWriter struct {
 // NewPageWriter creates a new PageWriter. pageBytes is the number of bytes
 // to write per page. pageOffset is the starting offset of io.Writer.
 func NewPageWriter(w io.Writer, pageBytes, pageOffset int) *PageWriter {
+	verify.Assert(pageBytes > 0, "invalid pageBytes (%d) value, it must be greater than 0", pageBytes)
 	return &PageWriter{
 		w:                 w,
 		pageOffset:        pageOffset,
diff --git a/pkg/ioutil/pagewriter_test.go b/pkg/ioutil/pagewriter_test.go
index 10610691c3c..ebffffb18d6 100644
--- a/pkg/ioutil/pagewriter_test.go
+++ b/pkg/ioutil/pagewriter_test.go
@@ -17,6 +17,8 @@ package ioutil
 import (
 	"math/rand"
 	"testing"
+
+	"github.com/stretchr/testify/assert"
 )
 
 func TestPageWriterRandom(t *testing.T) {
@@ -111,6 +113,45 @@ func TestPageWriterOffset(t *testing.T) {
 	}
 }
 
+func TestPageWriterPageBytes(t *testing.T) {
+	cases := []struct {
+		name        string
+		pageBytes   int
+		expectPanic bool
+	}{
+		{
+			name:        "normal page bytes",
+			pageBytes:   4096,
+			expectPanic: false,
+		},
+		{
+			name:        "negative page bytes",
+			pageBytes:   -1,
+			expectPanic: true,
+		},
+		{
+			name:        "zero page bytes",
+			pageBytes:   0,
+			expectPanic: true,
+		},
+	}
+
+	for _, tc := range cases {
+		t.Run(tc.name, func(t *testing.T) {
+			defaultBufferBytes = 1024
+			cw := &checkPageWriter{pageBytes: tc.pageBytes, t: t}
+			if tc.expectPanic {
+				assert.Panicsf(t, func() {
+					NewPageWriter(cw, tc.pageBytes, 0)
+				}, "expected panic when pageBytes is %d", tc.pageBytes)
+			} else {
+				pw := NewPageWriter(cw, tc.pageBytes, 0)
+				assert.NotEqual(t, pw, nil)
+			}
+		})
+	}
+}
+
 // checkPageWriter implements an io.Writer that fails a test on unaligned writes.
 type checkPageWriter struct {
 	pageBytes  int
