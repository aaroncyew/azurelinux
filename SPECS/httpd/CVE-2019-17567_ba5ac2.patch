From ba5ac22978abb6dc2467745c15eb26c3d2a78417 Mon Sep 17 00:00:00 2001
From: Yann Ylavic <ylavic@apache.org>
Date: Fri, 11 Dec 2020 11:33:00 +0000
Subject: [PATCH] Follow up to r1836032: better flush limits checks and
 description.

git-svn-id: https://svn.apache.org/repos/asf/httpd/httpd/trunk@1884304 13f79535-47bb-0310-9956-ffa450edef68
---
 docs/manual/mod/core.xml | 50 +++++++++++++++++++++++-----------------
 server/core.c            | 24 +++++++++----------
 2 files changed, 41 insertions(+), 33 deletions(-)

diff --git a/docs/manual/mod/core.xml b/docs/manual/mod/core.xml
index 054e6ce2132..3db86a21b73 100644
--- a/docs/manual/mod/core.xml
+++ b/docs/manual/mod/core.xml
@@ -2014,21 +2014,24 @@ filenames</description>
 
 <directivesynopsis>
 <name>FlushMaxPipelined</name>
-<description>Threshold above which pipelined responses are flushed to the
-network</description>
+<description>Maximum number of pipelined responses above which they are flushed
+to the network</description>
 <syntax>FlushMaxPipelined <var>number</var></syntax>
 <default>FlushMaxPipelined 5</default>
 <contextlist><context>server config</context><context>virtual host</context>
-<context>directory</context></contextlist>
+</contextlist>
 <compatibility>2.5 and later</compatibility>
 
 <usage>
-    <p>This directive allows to configure the threshold for pipelined
-    responses, which remain pending so long as pipelined request are handled.
-    When this limit is reached, are forcibly flushed to the network in blocking
-    mode, until passing under the threshold again.</p>
-
-    <p>This threshold helps maintaning constrained memory usage.</p>
+    <p>This directive allows to configure the maximum number of pipelined
+    responses, which remain pending so long as pipelined request are received.
+    When the limit is reached, reponses are forcibly flushed to the network in
+    blocking mode, until passing under the limit again.</p>
+
+    <p><directive>FlushMaxPipelined</directive> helps constraining memory
+    usage. When set to <var>0</var> pipelining is disabled, when set to
+    <var>-1</var> there is no limit (<directive>FlushMaxThreshold</directive>
+    still applies).</p>
 </usage>
 </directivesynopsis>
 
@@ -2039,15 +2042,19 @@ network</description>
 <syntax>FlushMaxThreshold<var>number-of-bytes</var></syntax>
 <default>FlushMaxThreshold 65536</default>
 <contextlist><context>server config</context><context>virtual host</context>
-<context>directory</context></contextlist>
+</contextlist>
 <compatibility>2.5 and later</compatibility>
 
 <usage>
-    <p>This directive allows to configure the threshold (in bytes) for pending
-    output data. When this limit is reached, data are forcibly flushed to the
-    network in blocking mode, until passing under the threshold again.</p>
-
-    <p>This threshold helps maintaning constrained memory usage.</p>
+    <p>This directive allows to configure the threshold for pending output
+    data (in bytes). When the limit is reached, data are forcibly flushed to
+    the network in blocking mode, until passing under the limit again.</p>
+
+    <p><directive>FlushMaxThreshold</directive> helps constraining memory
+    usage. When set to <var>0</var> or a too small value there are actually
+    no pending data, but for threaded MPMs there can be more threads busy
+    waiting for the network thus less ones available to handle the other
+    simultaneous connections.</p>
 </usage>
 </directivesynopsis>
 
@@ -4095,19 +4102,20 @@ Protocols h2 http/1.1
 
 <directivesynopsis>
 <name>ReadBufferSize</name>
-<description>Size of the buffers used to read network data</description>
-<syntax>ReadBufferSize <var>number-of-bytes</var></syntax>
+<description>Size of the buffers used to read data</description>
+<syntax>ReadBufferSize <var>bytes</var></syntax>
 <default>ReadBufferSize 8192</default>
 <contextlist><context>server config</context><context>virtual host</context>
 <context>directory</context></contextlist>
 <compatibility>2.5 and later</compatibility>
 
 <usage>
-    <p>This directive allows to configure the size in bytes of the memory
-    buffers used to read data from the network.</p>
+    <p>This directive allows to configure the size (in bytes) of the memory
+    buffer used to read data from the network or files.</p>
 
-    <p>Larger buffer can increase peformances for large data but consume more
-    memory (per connection).</p>
+    <p>A larger buffer can increase peformances with larger data, but consumes
+    more memory per connection. The minimum configurable size is
+    <var>1024</var>.</p>
 </usage>
 </directivesynopsis>
  
diff --git a/server/core.c b/server/core.c
index f293452ec1c..91ae7c2f31c 100644
--- a/server/core.c
+++ b/server/core.c
@@ -86,8 +86,8 @@
 #define AP_CONTENT_MD5_ON    1
 #define AP_CONTENT_MD5_UNSET 2
 
-#define AP_FLUSH_MAX_THRESHOLD 65536
-#define AP_FLUSH_MAX_PIPELINED 5
+#define AP_FLUSH_MAX_THRESHOLD 65535
+#define AP_FLUSH_MAX_PIPELINED 4
 
 APR_HOOK_STRUCT(
     APR_HOOK_LINK(get_mgmt_items)
@@ -2268,10 +2268,10 @@ static const char *set_read_buf_size(cmd_parms *cmd, void *d_,
     char *end;
 
     if (apr_strtoff(&size, arg, &end, 10)
-            || size < 0 || size > APR_SIZE_MAX || *end)
+            || *end || size < 0 || size > APR_UINT32_MAX)
         return apr_pstrcat(cmd->pool,
                            "parameter must be a number between 0 and "
-                           APR_STRINGIFY(APR_SIZE_MAX) "): ",
+                           APR_STRINGIFY(APR_UINT32_MAX) "): ",
                            arg, NULL);
 
     d->read_buf_size = (apr_size_t)size;
@@ -2288,10 +2288,10 @@ static const char *set_flush_max_threshold(cmd_parms *cmd, void *d_,
     char *end;
 
     if (apr_strtoff(&size, arg, &end, 10)
-            || size <= 0 || size > APR_SIZE_MAX || *end)
+            || *end || size < 0 || size > APR_UINT32_MAX)
         return apr_pstrcat(cmd->pool,
-                           "parameter must be a number between 1 and "
-                           APR_STRINGIFY(APR_SIZE_MAX) "): ",
+                           "parameter must be a number between 0 and "
+                           APR_STRINGIFY(APR_UINT32_MAX) "): ",
                            arg, NULL);
 
     conf->flush_max_threshold = (apr_size_t)size;
@@ -2308,9 +2308,9 @@ static const char *set_flush_max_pipelined(cmd_parms *cmd, void *d_,
     char *end;
 
     if (apr_strtoff(&num, arg, &end, 10)
-            || num < 0 || num > APR_INT32_MAX || *end)
+            || *end || num < -1 || num > APR_INT32_MAX)
         return apr_pstrcat(cmd->pool,
-                           "parameter must be a number between 0 and "
+                           "parameter must be a number between -1 and "
                            APR_STRINGIFY(APR_INT32_MAX) ": ",
                            arg, NULL);
 
@@ -2319,7 +2319,6 @@ static const char *set_flush_max_pipelined(cmd_parms *cmd, void *d_,
     return NULL;
 }
 
-
 /*
  * Report a missing-'>' syntax error.
  */
@@ -4489,9 +4488,10 @@ AP_INIT_TAKE1("EnableSendfile", set_enable_sendfile, NULL, OR_FILEINFO,
 AP_INIT_TAKE1("ReadBufferSize", set_read_buf_size, NULL, ACCESS_CONF|RSRC_CONF,
   "Size (in bytes) of the memory buffers used to read data"),
 AP_INIT_TAKE1("FlushMaxThreshold", set_flush_max_threshold, NULL, RSRC_CONF,
-  "Maximum size (in bytes) above which pending data are flushed (blocking) to the network"),
+  "Maximum threshold above which pending data are flushed to the network"),
 AP_INIT_TAKE1("FlushMaxPipelined", set_flush_max_pipelined, NULL, RSRC_CONF,
-  "Number of pipelined/pending responses above which they are flushed to the network"),
+  "Maximum number of pipelined responses (pending) above which they are "
+  "flushed to the network"),
 
 /* Old server config file commands */
 
