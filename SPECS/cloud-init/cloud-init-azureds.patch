diff --git a/cloudinit/sources/DataSourceAzure.py b/cloudinit/sources/DataSourceAzure.py
index 2f3390c3..3592ec53 100755
--- a/cloudinit/sources/DataSourceAzure.py
+++ b/cloudinit/sources/DataSourceAzure.py
@@ -51,7 +51,7 @@ LOG = logging.getLogger(__name__)
 
 DS_NAME = 'Azure'
 DEFAULT_METADATA = {"instance-id": "iid-AZURE-NODE"}
-AGENT_START = ['service', 'walinuxagent', 'start']
+AGENT_START = ['systemctl', 'start', 'waagent']
 AGENT_START_BUILTIN = "__builtin__"
 BOUNCE_COMMAND_IFUP = [
     'sh', '-xc',
diff --git a/cloudinit/sources/helpers/azure.py b/cloudinit/sources/helpers/azure.py
index ad476076..951c631c 100755
--- a/cloudinit/sources/helpers/azure.py
+++ b/cloudinit/sources/helpers/azure.py
@@ -1,5 +1,6 @@
 # This file is part of cloud-init. See LICENSE file for license information.
 import base64
+import configobj
 import json
 import logging
 import os
@@ -27,8 +28,10 @@ from cloudinit import distros
 from cloudinit.reporting import events
 from cloudinit.net.dhcp import EphemeralDHCPv4
 from datetime import datetime
+from io import StringIO
 
 LOG = logging.getLogger(__name__)
+NETWORKD_LEASES_DIR = '/run/systemd/netif/leases'
 
 # This endpoint matches the format as found in dhcp lease files, since this
 # value is applied if the endpoint can't be found within a lease file
@@ -783,6 +786,32 @@ class WALinuxAgentShim:
                 ) from e
         return dhcp_options
 
+    @staticmethod
+    def networkd_parse_lease(content):
+        """Parse a systemd lease file content as in /run/systemd/netif/leases/
+        Parse this (almost) ini style file even though it says:
+          # This is private data. Do not parse.
+        Simply return a dictionary of key/values."""
+
+        return dict(configobj.ConfigObj(StringIO(content), list_values=False))
+
+    @staticmethod
+    def networkd_load_leases(leases_d=None):
+        """Return a dictionary of dictionaries representing each lease
+        found in lease_d.i
+        The top level key will be the filename, which is typically the ifindex."""
+
+        if leases_d is None:
+            leases_d = NETWORKD_LEASES_DIR
+
+        ret = {}
+        if not os.path.isdir(leases_d):
+            return ret
+        for lfile in os.listdir(leases_d):
+            ret[lfile] = WALinuxAgentShim.networkd_parse_lease(
+                util.load_file(os.path.join(leases_d, lfile)))
+        return ret
+
     @staticmethod
     @azure_ds_telemetry_reporter
     def _get_value_from_dhcpoptions(dhcp_options):
@@ -832,8 +861,8 @@ class WALinuxAgentShim:
                 'No Azure endpoint from networkd. '
                 'Finding Azure endpoint from hook json...',
                 logger_func=LOG.debug)
-            dhcp_options = WALinuxAgentShim._load_dhclient_json()
-            value = WALinuxAgentShim._get_value_from_dhcpoptions(dhcp_options)
+            value = WALinuxAgentShim._networkd_get_value_from_leases()
+            LOG.debug('networkd value from lease %s', value)
         if value is None:
             # Fallback and check the leases file if unsuccessful
             report_diagnostic_event(
