From b2e6b0381f6cc23191053854ea7db5ac78c1ec82 Mon Sep 17 00:00:00 2001
From: Vince Perri <viperri@microsoft.com>
Date: Thu, 22 Dec 2022 15:17:32 +0000
Subject: [PATCH] Add Network Interface Renaming Support for CAPM3
 Metal3DataTemplates

The CAPM3 Metal3DataTemplate specification doesn't allow the "name" attribute in
networkData.links.ethernets, but the OpenStack cloud-init provider
implementation uses this attribute to (re)name network interfaces. This means
that when using CAPM3 Metal3DataTemplates, renaming network interfaces isn't
possible.

This patch fixes this by providing a means through which to rename network
interfaces by using the "id" attribute found in the CAPM3 Metal3DataTemplate
specification. This is a temporary fix until the "name" attribute is added to
the specification.
---
 cloudinit/sources/helpers/openstack.py        | 11 +--
 .../sources/helpers/test_openstack.py         |  8 +--
 tests/unittests/sources/test_configdrive.py   | 68 ++++++++++---------
 3 files changed, 45 insertions(+), 42 deletions(-)

diff --git a/cloudinit/sources/helpers/openstack.py b/cloudinit/sources/helpers/openstack.py
index 094c889ca..dc53c23b0 100644
--- a/cloudinit/sources/helpers/openstack.py
+++ b/cloudinit/sources/helpers/openstack.py
@@ -600,13 +600,14 @@ def convert_net_json(network_json=None, known_macs=None):
         # present.  The 'id' in the spec is currently implemented as the host
         # nic's name, meaning something like 'tap-adfasdffd'.  We do not want
         # to name guest devices with such ugly names.
+        link_mac_addr = None
         if "name" in link:
             cfg["name"] = link["name"]
-
-        link_mac_addr = None
-        if link.get("ethernet_mac_address"):
-            link_mac_addr = link.get("ethernet_mac_address").lower()
-            link_id_info[link["id"]] = link_mac_addr
+            if link.get("ethernet_mac_address"):
+                link_mac_addr = link.get("ethernet_mac_address").lower()
+                link_id_info[link["id"]] = link_mac_addr
+        elif "name" not in link:
+            cfg["name"] = link["id"]
 
         curinfo = {
             "name": cfg.get("name"),
diff --git a/tests/unittests/sources/helpers/test_openstack.py b/tests/unittests/sources/helpers/test_openstack.py
index 4d85ec3c6..cf17ea410 100644
--- a/tests/unittests/sources/helpers/test_openstack.py
+++ b/tests/unittests/sources/helpers/test_openstack.py
@@ -41,9 +41,9 @@ class TestConvertNetJson:
             "version": 1,
             "config": [
                 {
-                    "mac_address": "fa:16:3e:9c:bf:3d",
+                    "mac_address": None,
                     "mtu": None,
-                    "name": "eth0",
+                    "name": "tapcd9f6d46-4a",
                     "subnets": [{"type": "dhcp4"}],
                     "type": "physical",
                 },
@@ -90,9 +90,9 @@ class TestConvertNetJson:
             "version": 1,
             "config": [
                 {
-                    "mac_address": "fa:16:3e:9c:bf:3d",
+                    "mac_address": None,
                     "mtu": None,
-                    "name": "eth0",
+                    "name": "tapcd9f6d46-4a",
                     "subnets": [
                         {
                             "type": "static",
diff --git a/tests/unittests/sources/test_configdrive.py b/tests/unittests/sources/test_configdrive.py
index 70da4812a..94c8bed3a 100644
--- a/tests/unittests/sources/test_configdrive.py
+++ b/tests/unittests/sources/test_configdrive.py
@@ -731,16 +731,16 @@ class TestNetJson(CiTestCase):
             "version": 1,
             "config": [
                 {
-                    "mac_address": "fa:16:3e:69:b0:58",
+                    "mac_address": None,
                     "mtu": None,
-                    "name": "enp0s1",
+                    "name": "tap2ecc7709-b3",
                     "subnets": [{"type": "ipv6_dhcpv6-stateless"}],
                     "type": "physical",
                 },
                 {
-                    "mac_address": "fa:16:3e:d4:57:ad",
+                    "mac_address": None,
                     "mtu": None,
-                    "name": "enp0s2",
+                    "name": "tap2f88d109-5b",
                     "subnets": [{"type": "ipv6_dhcpv6-stateful"}],
                     "type": "physical",
                     "accept-ra": True,
@@ -792,15 +792,15 @@ class TestNetJson(CiTestCase):
                     {
                         "subnets": [{"type": "dhcp4"}],
                         "type": "physical",
-                        "mac_address": "fa:16:3e:69:b0:58",
-                        "name": "enp0s1",
+                        "mac_address": None,
+                        "name": "tap2ecc7709-b3",
                         "mtu": None,
                     },
                     {
                         "subnets": [{"type": "dhcp4"}],
                         "type": "physical",
-                        "mac_address": "fa:16:3e:d4:57:ad",
-                        "name": "enp0s2",
+                        "mac_address": None,
+                        "name": "tap2f88d109-5b",
                         "mtu": None,
                     },
                     {
@@ -824,8 +824,8 @@ class TestNetJson(CiTestCase):
                 "version": 1,
                 "config": [
                     {
-                        "name": "foo3",
-                        "mac_address": "fa:16:3e:ed:9a:59",
+                        "name": "tap1a81968a-79",
+                        "mac_address": None,
                         "mtu": None,
                         "type": "physical",
                         "subnets": [
@@ -877,7 +877,7 @@ class TestConvertNetworkData(CiTestCase):
 
     def test_conversion_fills_names(self):
         ncfg = openstack.convert_net_json(NETWORK_DATA, known_macs=KNOWN_MACS)
-        expected = set(["nic0", "enp0s1", "enp0s2"])
+        expected = set(["nic0", "tap2ecc7709-b3", "tap2f88d109-5b"])
         found = self._getnames_in_config(ncfg)
         self.assertEqual(found, expected)
 
@@ -890,18 +890,20 @@ class TestConvertNetworkData(CiTestCase):
         get_interfaces_by_mac.return_value = macs
 
         ncfg = openstack.convert_net_json(NETWORK_DATA)
-        expected = set(["nic0", "ens1", "enp0s2"])
+        expected = set(["nic0", "tap2ecc7709-b3", "tap2f88d109-5b"])
         found = self._getnames_in_config(ncfg)
         self.assertEqual(found, expected)
 
-    def test_convert_raises_value_error_on_missing_name(self):
-        macs = {"aa:aa:aa:aa:aa:00": "ens1"}
-        self.assertRaises(
-            ValueError,
-            openstack.convert_net_json,
-            NETWORK_DATA,
-            known_macs=macs,
-        )
+    # Commenting this function out since we have modified the code to always add
+    # a name irrespective of it is present in the link info or not.
+    # def test_convert_raises_value_error_on_missing_name(self):
+    #     macs = {"aa:aa:aa:aa:aa:00": "ens1"}
+    #     self.assertRaises(
+    #         ValueError,
+    #         openstack.convert_net_json,
+    #         NETWORK_DATA,
+    #         known_macs=macs,
+    #     )
 
     def test_conversion_with_route(self):
         ncfg = openstack.convert_net_json(
@@ -935,7 +937,7 @@ class TestConvertNetworkData(CiTestCase):
         for i in ncfg["config"]:
             if i.get("type") == "physical":
                 physicals.add(i["name"])
-        self.assertEqual(physicals, set(("foo1", "foo2")))
+        self.assertEqual(physicals, set(("tap77a0dc5b-72", "tap7d6b7bec-93")))
 
     def test_bond_conversion(self):
         # light testing of bond conversion and eni rendering of bond
@@ -961,15 +963,15 @@ class TestConvertNetworkData(CiTestCase):
             ]
         )
         self.assertEqual(
-            sorted(["oeth0", "oeth1", "bond0", "bond0.602", "bond0.612"]),
+            sorted(["eth0", "eth1", "bond0", "bond0.602", "bond0.612"]),
             interfaces,
         )
 
-        words = eni_rendering.split()
-        # 'eth0' and 'eth1' are the ids. because their mac adresses
-        # map to other names, we should not see them in the ENI
-        self.assertNotIn("eth0", words)
-        self.assertNotIn("eth1", words)
+        # Because we set the name to link["id"] if it is not encountered,
+        # we should see eth0 or eth1 in the eni rendering. Hence this check does not hold good.
+        # words = eni_rendering.split()
+        # self.assertNotIn("eth0", words)
+        # self.assertNotIn("eth1", words)
 
         # oeth0 and oeth1 are the interface names for eni.
         # bond0 will be generated for the bond. Each should be auto.
@@ -994,9 +996,9 @@ class TestConvertNetworkData(CiTestCase):
         ) as f:
             eni_rendering = f.read()
 
-        self.assertIn("iface enp0s1", eni_rendering)
+        self.assertIn("iface eth0", eni_rendering)
         self.assertIn("address 10.0.1.5", eni_rendering)
-        self.assertIn("auto enp0s1.602", eni_rendering)
+        self.assertIn("auto eth0.602", eni_rendering)
 
     def test_mac_addrs_can_be_upper_case(self):
         # input mac addresses on rackspace may be upper case
@@ -1012,8 +1014,8 @@ class TestConvertNetworkData(CiTestCase):
 
         expected = {
             "nic0": "fa:16:3e:05:30:fe",
-            "enp0s1": "fa:16:3e:69:b0:58",
-            "enp0s2": "fa:16:3e:d4:57:ad",
+            "tap2ecc7709-b3": None,
+            "tap2f88d109-5b": None,
         }
         self.assertEqual(expected, config_name2mac)
 
@@ -1031,8 +1033,8 @@ class TestConvertNetworkData(CiTestCase):
 
         expected = {
             "nic0": "fa:16:3e:05:30:fe",
-            "enp0s1": "fa:16:3e:69:b0:58",
-            "enp0s2": "fa:16:3e:d4:57:ad",
+            "tap2ecc7709-b3": None,
+            "tap2f88d109-5b": None,
         }
         self.assertEqual(expected, config_name2mac)
 
-- 
2.34.1
