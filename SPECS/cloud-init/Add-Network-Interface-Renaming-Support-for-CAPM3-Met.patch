From b2e6b0381f6cc23191053854ea7db5ac78c1ec82 Mon Sep 17 00:00:00 2001
From: Vince Perri <viperri@microsoft.com>
Date: Thu, 22 Dec 2022 15:17:32 +0000
Subject: [PATCH] Add Network Interface Renaming Support for CAPM3
 Metal3DataTemplates

The CAPM3 Metal3DataTemplate specification doesn't allow the "name" attribute in
networkData.links.ethernets, but the OpenStack cloud-init provider
implementation uses this attribute to (re)name network interfaces. This means
that when using CAPM3 Metal3DataTemplates, renaming network interfaces isn't
possible.

This patch fixes this by providing a means through which to rename network
interfaces by using the "id" attribute found in the CAPM3 Metal3DataTemplate
specification. This is a temporary fix until the "name" attribute is added to
the specification.
---
 cloudinit/sources/helpers/openstack.py | 18 ++++++++++++++----
 1 file changed, 14 insertions(+), 4 deletions(-)

diff --git a/cloudinit/sources/helpers/openstack.py b/cloudinit/sources/helpers/openstack.py
index 094c889ca..927e694a1 100644
--- a/cloudinit/sources/helpers/openstack.py
+++ b/cloudinit/sources/helpers/openstack.py
@@ -602,6 +602,8 @@ def convert_net_json(network_json=None, known_macs=None):
         # to name guest devices with such ugly names.
         if "name" in link:
             cfg["name"] = link["name"]
+        elif "name" not in link:
+            cfg["name"] = link["id"]
 
         link_mac_addr = None
         if link.get("ethernet_mac_address"):
@@ -720,8 +722,11 @@ def convert_net_json(network_json=None, known_macs=None):
         config.append(cfg)
         link_id_info[curinfo["id"]] = curinfo
 
+    # Since we are setting name to link_id_info[link_id]["id"] earlier in
+    # the function (when the name is absent), there can be no link without 
+    # a name that comes here. We should go through tap- interfaces again and see.
     need_names = [
-        d for d in config if d.get("type") == "physical" and "name" not in d
+        d for d in config if d.get("type") == "physical" and d["name"].startswith("tap")
     ]
 
     if need_names or link_updates:
@@ -730,10 +735,15 @@ def convert_net_json(network_json=None, known_macs=None):
 
         # go through and fill out the link_id_info with names
         for _link_id, info in link_id_info.items():
-            if info.get("name"):
-                continue
             if info.get("mac") in known_macs:
-                info["name"] = known_macs[info["mac"]]
+                # Since we are setting name to link_id_info[link_id]["id"] earlier in
+                # the function (when the name is absent), there can be no link without 
+                # a name that comes here.
+                # If we find a name in the known_macs, we should update the name
+                # in link_id_info by overwriting on the earlier given name  
+                # (which would be along the lines of 'tap-adfasdffd')
+                if info.get("name") != known_macs[info["mac"]]:
+                    info["name"] = known_macs[info["mac"]]
 
         for d in need_names:
             mac = d.get("mac_address")
-- 
2.34.1