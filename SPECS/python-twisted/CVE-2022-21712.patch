From eda4f1e2ec9988a142de244f1a2b285939718c03 Mon Sep 17 00:00:00 2001
From: Glyph <glyph@twistedmatrix.com>
Date: Sun, 23 Jan 2022 12:57:49 -0800
Subject: [PATCH 01/10] failing test for header data leak

---
 src/twisted/web/test/test_agent.py | 154 +++++++++++++++++++++++------
 1 file changed, 123 insertions(+), 31 deletions(-)

diff --git a/src/twisted/web/test/test_agent.py b/src/twisted/web/test/test_agent.py
index e494561d935..2823a3764e4 100644
--- a/src/twisted/web/test/test_agent.py
+++ b/src/twisted/web/test/test_agent.py
@@ -5,16 +5,22 @@
 Tests for L{twisted.web.client.Agent} and related new client APIs.
 """
 
-import zlib
 from http.cookiejar import CookieJar
 from io import BytesIO
-from unittest import skipIf
-
-from zope.interface.declarations import implementer
-from zope.interface.verify import verifyObject
+from twisted.test.iosim import FakeTransport, IOPump
+from twisted.test.proto_helpers import (
+    AccumulatingProtocol,
+    EventLoggingObserver,
+    MemoryReactorClock,
+    StringTransport,
+)
+from twisted.test.test_sslverify import certificatesForAuthorityAndServer
+from typing import Optional, TYPE_CHECKING
+from unittest import skipIf, SkipTest
 
 from incremental import Version
 
+import zlib
 from twisted.internet import defer, task
 from twisted.internet.address import IPv4Address, IPv6Address
 from twisted.internet.defer import CancelledError, Deferred, succeed
@@ -32,14 +38,6 @@
 from twisted.python.components import proxyForInterface
 from twisted.python.deprecate import getDeprecationWarningString
 from twisted.python.failure import Failure
-from twisted.test.iosim import FakeTransport, IOPump
-from twisted.test.proto_helpers import (
-    AccumulatingProtocol,
-    EventLoggingObserver,
-    MemoryReactorClock,
-    StringTransport,
-)
-from twisted.test.test_sslverify import certificatesForAuthorityAndServer
 from twisted.trial.unittest import SynchronousTestCase, TestCase
 from twisted.web import client, error, http_headers
 from twisted.web._newclient import (
@@ -52,29 +50,33 @@
     ResponseNeverReceived,
 )
 from twisted.web.client import (
-    URI,
     BrowserLikePolicyForHTTPS,
     FileBodyProducer,
-    HostnameCachingHTTPSPolicy,
     HTTPConnectionPool,
+    HostnameCachingHTTPSPolicy,
     Request,
     ResponseDone,
+    URI,
     _HTTP11ClientFactory,
 )
 from twisted.web.error import SchemeNotSupported
 from twisted.web.http_headers import Headers
 from twisted.web.iweb import (
-    UNKNOWN_LENGTH,
     IAgent,
     IAgentEndpointFactory,
     IBodyProducer,
     IPolicyForHTTPS,
+    IRequest,
     IResponse,
+    UNKNOWN_LENGTH,
 )
 from twisted.web.test.injectionhelpers import (
     MethodInjectionTestsMixin,
     URIInjectionTestsMixin,
 )
+from zope.interface.declarations import implementer
+from zope.interface.verify import verifyObject
+
 
 try:
     from twisted.internet import ssl as _ssl
@@ -2587,12 +2589,30 @@ def getConnection(this, key, ep):
         self.assertEqual(agent._pool.connected, True)
 
 
-class _RedirectAgentTestsMixin:
+SENSITIVE_HEADERS = [
+    b"authorization",
+    b"cookie",
+    b"cookie2",
+    b"proxy-authorization",
+    b"www-authenticate",
+]
+
+if TYPE_CHECKING:
+    testMixinClass = TestCase
+else:
+    testMixinClass = object
+
+
+class _RedirectAgentTestsMixin(testMixinClass):
     """
     Test cases mixin for L{RedirectAgentTests} and
     L{BrowserLikeRedirectAgentTests}.
     """
 
+    agent: IAgent
+    reactor: MemoryReactorClock
+    protocol: StubHTTPProtocol
+
     def test_noRedirect(self):
         """
         L{client.RedirectAgent} behaves like L{client.Agent} if the response
@@ -2611,32 +2631,52 @@ def test_noRedirect(self):
         self.assertIdentical(response, result)
         self.assertIdentical(result.previousResponse, None)
 
-    def _testRedirectDefault(self, code):
+    def _testRedirectDefault(
+        self,
+        code: int,
+        crossScheme: bool = False,
+        crossDomain: bool = False,
+        requestHeaders: Optional[Headers] = None,
+    ) -> IRequest:
         """
         When getting a redirect, L{client.RedirectAgent} follows the URL
         specified in the L{Location} header field and make a new request.
 
         @param code: HTTP status code.
         """
-        self.agent.request(b"GET", b"http://example.com/foo")
+        startDomain = b"example.com"
+        startScheme = b"https" if ssl is not None else b"http"
+        startPort = 80 if startScheme == b"http" else 443
+        self.agent.request(
+            b"GET", startScheme + b"://" + startDomain + b"/foo", headers=requestHeaders
+        )
 
         host, port = self.reactor.tcpClients.pop()[:2]
         self.assertEqual(EXAMPLE_COM_IP, host)
-        self.assertEqual(80, port)
+        self.assertEqual(startPort, port)
 
         req, res = self.protocol.requests.pop()
 
-        # If possible (i.e.: SSL support is present), run the test with a
+        # If possible (i.e.: TLS support is present), run the test with a
         # cross-scheme redirect to verify that the scheme is honored; if not,
         # let's just make sure it works at all.
-        if ssl is None:
-            scheme = b"http"
-            expectedPort = 80
-        else:
-            scheme = b"https"
-            expectedPort = 443
-
-        headers = http_headers.Headers({b"location": [scheme + b"://example.com/bar"]})
+
+        targetScheme = startScheme
+        targetDomain = startDomain
+        targetPort = startPort
+
+        if crossDomain:
+            if ssl is None:
+                raise SkipTest(
+                    "Cross-scheme redirects can't be tested without TLS support."
+                )
+            targetScheme = b"https" if startScheme == b"http" else b"https"
+            targetPort = 443 if startPort == 80 else 443
+
+        targetDomain = b"example.net" if crossDomain else startDomain
+        headers = http_headers.Headers(
+            {b"location": [targetScheme + b"://" + targetDomain + b"/bar"]}
+        )
         response = Response((b"HTTP", 1, 1), code, b"OK", headers, None)
         res.callback(response)
 
@@ -2645,8 +2685,9 @@ def _testRedirectDefault(self, code):
         self.assertEqual(b"/bar", req2.uri)
 
         host, port = self.reactor.tcpClients.pop()[:2]
-        self.assertEqual(EXAMPLE_COM_IP, host)
-        self.assertEqual(expectedPort, port)
+        self.assertEqual(EXAMPLE_NET_IP if crossDomain else EXAMPLE_COM_IP, host)
+        self.assertEqual(targetPort, port)
+        return req2
 
     def test_redirect301(self):
         """
@@ -2654,6 +2695,15 @@ def test_redirect301(self):
         """
         self._testRedirectDefault(301)
 
+    def test_redirect301Scheme(self):
+        """
+        L{client.RedirectAgent} follows cross-scheme redirects.
+        """
+        self._testRedirectDefault(
+            301,
+            crossScheme=True,
+        )
+
     def test_redirect302(self):
         """
         L{client.RedirectAgent} follows redirects on status code 302.
@@ -2672,6 +2722,48 @@ def test_redirect308(self):
         """
         self._testRedirectDefault(308)
 
+    def test_headerSecurity(self):
+        """
+        L{client.RedirectAgent} scrubs sensitive headers when redirecting.
+        """
+        sensitiveHeaderValues = {
+            b"authorization": [b"sensitive-authnz"],
+            b"cookie": [b"sensitive-cookie-data"],
+            b"cookie2": [b"sensitive-cookie2-data"],
+            b"proxy-authorization": [b"sensitive-proxy-auth"],
+            b"wWw-auThentiCate": [b"sensitive-authn"],
+        }
+        otherHeaderValues = {b"x-random-header": [b"x-random-value"]}
+        allHeaders = Headers({**sensitiveHeaderValues, **otherHeaderValues})
+        redirected = self._testRedirectDefault(301, requestHeaders=allHeaders)
+
+        def normHeaders(headers: Headers) -> dict:
+            return {k.lower(): v for (k, v) in headers.getAllRawHeaders()}
+
+        sameOriginHeaders = normHeaders(redirected.headers)
+        self.assertEquals(
+            sameOriginHeaders,
+            {
+                b"host": [b"example.com"],
+                **normHeaders(allHeaders),
+            },
+        )
+
+        redirectedElsewhere = self._testRedirectDefault(
+            301,
+            crossDomain=True,
+            requestHeaders=Headers({**sensitiveHeaderValues, **otherHeaderValues}),
+        )
+        otherOriginHeaders = normHeaders(redirectedElsewhere.headers)
+        self.assertEquals(
+            otherOriginHeaders,
+            {
+                b"host": [b"example.com"],
+                **normHeaders(Headers(otherHeaderValues)),
+            },
+        )
+
+
     def _testRedirectToGet(self, code, method):
         """
         L{client.RedirectAgent} changes the method to I{GET} when getting

From ecc2ae81c831e58cf1725dfe2e5b6d2951c884a0 Mon Sep 17 00:00:00 2001
From: Glyph <glyph@twistedmatrix.com>
Date: Sun, 23 Jan 2022 13:00:02 -0800
Subject: [PATCH 02/10] assert on correct host

---
 src/twisted/web/test/test_agent.py | 2 +-
 1 file changed, 1 insertion(+), 1 deletion(-)

diff --git a/src/twisted/web/test/test_agent.py b/src/twisted/web/test/test_agent.py
index 2823a3764e4..1fccc8c9424 100644
--- a/src/twisted/web/test/test_agent.py
+++ b/src/twisted/web/test/test_agent.py
@@ -2758,7 +2758,7 @@ def normHeaders(headers: Headers) -> dict:
         self.assertEquals(
             otherOriginHeaders,
             {
-                b"host": [b"example.com"],
+                b"host": [b"example.net"],
                 **normHeaders(Headers(otherHeaderValues)),
             },
         )

From c1923d24b6a2752ea5d5686851427e0ec5757543 Mon Sep 17 00:00:00 2001
From: Glyph <glyph@twistedmatrix.com>
Date: Sun, 23 Jan 2022 14:04:27 -0800
Subject: [PATCH 03/10] tests for domain/port/scheme and fix

---
 src/twisted/web/client.py          | 61 +++++++++++++++++++++---------
 src/twisted/web/test/test_agent.py | 52 ++++++++++++++++++++-----
 2 files changed, 86 insertions(+), 27 deletions(-)

diff --git a/src/twisted/web/client.py b/src/twisted/web/client.py
index a1295c27056..99b98c9c24d 100644
--- a/src/twisted/web/client.py
+++ b/src/twisted/web/client.py
@@ -10,14 +10,13 @@
 import collections
 import os
 import warnings
-import zlib
 from functools import wraps
 from urllib.parse import urldefrag, urljoin, urlunparse as _urlunparse
-
-from zope.interface import implementer
+from typing import Iterable
 
 from incremental import Version
 
+import zlib
 from twisted.internet import defer, protocol, task
 from twisted.internet.abstract import isIPv6Address
 from twisted.internet.endpoints import HostnameEndpoint, wrapClientTLS
@@ -25,24 +24,14 @@
 from twisted.logger import Logger
 from twisted.python.compat import nativeString, networkString
 from twisted.python.components import proxyForInterface
-from twisted.python.deprecate import (
-    deprecated,
-    deprecatedModuleAttribute,
-    getDeprecationWarningString,
-)
+from twisted.python.deprecate import deprecated, deprecatedModuleAttribute, getDeprecationWarningString
 from twisted.python.failure import Failure
 from twisted.python.util import InsensitiveDict
 from twisted.web import error, http
 from twisted.web._newclient import _ensureValidMethod, _ensureValidURI
 from twisted.web.http_headers import Headers
-from twisted.web.iweb import (
-    UNKNOWN_LENGTH,
-    IAgent,
-    IAgentEndpointFactory,
-    IBodyProducer,
-    IPolicyForHTTPS,
-    IResponse,
-)
+from twisted.web.iweb import IAgent, IAgentEndpointFactory, IBodyProducer, IPolicyForHTTPS, IResponse, UNKNOWN_LENGTH
+from zope.interface import implementer
 
 
 def urlunparse(parts):
@@ -2110,6 +2099,15 @@ def _handleResponse(self, response):
         return response
 
 
+_canonicalHeaderName = Headers()._canonicalNameCaps
+_defaultSensitiveHeaders = frozenset([
+    b"Authorization",
+    b"Cookie",
+    b"Cookie2",
+    b"Proxy-Authorization",
+    b"WWW-Authenticate",
+])
+
 @implementer(IAgent)
 class RedirectAgent:
     """
@@ -2124,6 +2122,11 @@ class RedirectAgent:
     @param redirectLimit: The maximum number of times the agent is allowed to
         follow redirects before failing with a L{error.InfiniteRedirection}.
 
+    @param sensitiveHeaderNames: An iterable of C{bytes} enumerating the names
+        of headers that must not be transmitted when redirecting to a different
+        origins.  These will be consulted in addition to the protocol-specified
+        set of headers that contain sensitive information.
+
     @cvar _redirectResponses: A L{list} of HTTP status codes to be redirected
         for I{GET} and I{HEAD} methods.
 
@@ -2141,9 +2144,17 @@ class RedirectAgent:
     ]
     _seeOtherResponses = [http.SEE_OTHER]
 
-    def __init__(self, agent, redirectLimit=20):
+    def __init__(
+        self,
+        agent: IAgent,
+        redirectLimit: int = 20,
+        sensitiveHeaderNames: Iterable[bytes] = (),
+    ):
         self._agent = agent
         self._redirectLimit = redirectLimit
+        sensitive = set(_canonicalHeaderName(each) for each in sensitiveHeaderNames)
+        sensitive.update(_defaultSensitiveHeaders)
+        self._sensitiveHeaderNames = sensitive
 
     def request(self, method, uri, headers=None, bodyProducer=None):
         """
@@ -2186,6 +2197,22 @@ def _handleRedirect(self, response, method, uri, headers, redirectCount):
             )
             raise ResponseFailed([Failure(err)], response)
         location = self._resolveLocation(uri, locationHeaders[0])
+        if headers:
+            parsedURI = URI.fromBytes(uri)
+            parsedLocation = URI.fromBytes(location)
+            sameOrigin = (
+                (parsedURI.scheme == parsedLocation.scheme)
+                and (parsedURI.host == parsedLocation.host)
+                and (parsedURI.port == parsedLocation.port)
+            )
+            if not sameOrigin:
+                headers = Headers(
+                    {
+                        rawName: rawValue
+                        for rawName, rawValue in headers.getAllRawHeaders()
+                        if rawName not in self._sensitiveHeaderNames
+                    }
+                )
         deferred = self._agent.request(method, location, headers)
 
         def _chainResponse(newResponse):
diff --git a/src/twisted/web/test/test_agent.py b/src/twisted/web/test/test_agent.py
index 1fccc8c9424..5853bb43f6d 100644
--- a/src/twisted/web/test/test_agent.py
+++ b/src/twisted/web/test/test_agent.py
@@ -2636,6 +2636,7 @@ def _testRedirectDefault(
         code: int,
         crossScheme: bool = False,
         crossDomain: bool = False,
+        crossPort: bool = False,
         requestHeaders: Optional[Headers] = None,
     ) -> IRequest:
         """
@@ -2665,17 +2666,22 @@ def _testRedirectDefault(
         targetDomain = startDomain
         targetPort = startPort
 
-        if crossDomain:
+        if crossScheme:
             if ssl is None:
                 raise SkipTest(
                     "Cross-scheme redirects can't be tested without TLS support."
                 )
-            targetScheme = b"https" if startScheme == b"http" else b"https"
-            targetPort = 443 if startPort == 80 else 443
+            targetScheme = b"https" if startScheme == b"http" else b"http"
+            targetPort = 443 if startPort == 80 else 80
 
+        portSyntax = b''
+        if crossPort:
+            targetPort = 8443
+            portSyntax = b':8443'
         targetDomain = b"example.net" if crossDomain else startDomain
+        locationValue = targetScheme + b"://" + targetDomain + portSyntax + b"/bar"
         headers = http_headers.Headers(
-            {b"location": [targetScheme + b"://" + targetDomain + b"/bar"]}
+            {b"location": [locationValue]}
         )
         response = Response((b"HTTP", 1, 1), code, b"OK", headers, None)
         res.callback(response)
@@ -2722,9 +2728,10 @@ def test_redirect308(self):
         """
         self._testRedirectDefault(308)
 
-    def test_headerSecurity(self):
+    def _sensitiveHeadersTest(self, expectedHostHeader: bytes = b"example.com", **crossKwargs: dict) -> None:
         """
-        L{client.RedirectAgent} scrubs sensitive headers when redirecting.
+        L{client.RedirectAgent} scrubs sensitive headers when redirecting
+        between differing origins.
         """
         sensitiveHeaderValues = {
             b"authorization": [b"sensitive-authnz"],
@@ -2732,6 +2739,7 @@ def test_headerSecurity(self):
             b"cookie2": [b"sensitive-cookie2-data"],
             b"proxy-authorization": [b"sensitive-proxy-auth"],
             b"wWw-auThentiCate": [b"sensitive-authn"],
+            b"x-custom-sensitive": [b"sensitive-custom"],
         }
         otherHeaderValues = {b"x-random-header": [b"x-random-value"]}
         allHeaders = Headers({**sensitiveHeaderValues, **otherHeaderValues})
@@ -2751,18 +2759,38 @@ def normHeaders(headers: Headers) -> dict:
 
         redirectedElsewhere = self._testRedirectDefault(
             301,
-            crossDomain=True,
+            **crossKwargs,
             requestHeaders=Headers({**sensitiveHeaderValues, **otherHeaderValues}),
         )
         otherOriginHeaders = normHeaders(redirectedElsewhere.headers)
         self.assertEquals(
             otherOriginHeaders,
             {
-                b"host": [b"example.net"],
+                b"host": [expectedHostHeader],
                 **normHeaders(Headers(otherHeaderValues)),
             },
         )
 
+    def test_crossDomainHeaders(self) -> None:
+        """
+        L{client.RedirectAgent} scrubs sensitive headers when redirecting
+        between differing domains.
+        """
+        self._sensitiveHeadersTest(crossDomain=True, expectedHostHeader=b'example.net')
+
+    def test_crossPortHeaders(self) -> None:
+        """
+        L{client.RedirectAgent} scrubs sensitive headers when redirecting
+        between differing ports.
+        """
+        self._sensitiveHeadersTest(crossPort=True, expectedHostHeader=b'example.com:8443')
+
+    def test_crossSchemeHeaders(self) -> None:
+        """
+        L{client.RedirectAgent} scrubs sensitive headers when redirecting
+        between differing schemes.
+        """
+        self._sensitiveHeadersTest(crossScheme=True)
 
     def _testRedirectToGet(self, code, method):
         """
@@ -2980,7 +3008,10 @@ def makeAgent(self):
         """
         @return: a new L{twisted.web.client.RedirectAgent}
         """
-        return client.RedirectAgent(self.buildAgentForWrapperTest(self.reactor))
+        return client.RedirectAgent(
+            self.buildAgentForWrapperTest(self.reactor),
+            sensitiveHeaderNames=[b"X-Custom-sensitive"],
+        )
 
     def setUp(self):
         self.reactor = self.createReactor()
@@ -3015,7 +3046,8 @@ def makeAgent(self):
         @return: a new L{twisted.web.client.BrowserLikeRedirectAgent}
         """
         return client.BrowserLikeRedirectAgent(
-            self.buildAgentForWrapperTest(self.reactor)
+            self.buildAgentForWrapperTest(self.reactor),
+            sensitiveHeaderNames=[b"x-Custom-sensitive"],
         )
 
     def setUp(self):

From 562dcff9c7dd846857932443a0a2935f74c2a2de Mon Sep 17 00:00:00 2001
From: Glyph <glyph@twistedmatrix.com>
Date: Sun, 23 Jan 2022 14:11:46 -0800
Subject: [PATCH 04/10] topfile

---
 src/twisted/topfiles/10294.bugfix | 1 +
 1 file changed, 1 insertion(+)
 create mode 100644 src/twisted/topfiles/10294.bugfix

diff --git a/src/twisted/topfiles/10294.bugfix b/src/twisted/topfiles/10294.bugfix
new file mode 100644
index 00000000000..0b39076cf54
--- /dev/null
+++ b/src/twisted/topfiles/10294.bugfix
@@ -0,0 +1 @@
+twisted.web.client.RedirectAgent and twisted.web.client.BrowserLikeRedirectAgent now properly remove sensitive headers when redirecting to a different origin.
\ No newline at end of file

From 4ae6732a30893178891ee3a383d8a737e0ec21eb Mon Sep 17 00:00:00 2001
From: Glyph <glyph@twistedmatrix.com>
Date: Sun, 23 Jan 2022 14:16:18 -0800
Subject: [PATCH 05/10] reblackening

---
 src/twisted/web/client.py          | 41 +++++++++++++++--------
 src/twisted/web/test/test_agent.py | 52 ++++++++++++++++--------------
 2 files changed, 55 insertions(+), 38 deletions(-)

diff --git a/src/twisted/web/client.py b/src/twisted/web/client.py
index 99b98c9c24d..433f4315f4b 100644
--- a/src/twisted/web/client.py
+++ b/src/twisted/web/client.py
@@ -10,13 +10,15 @@
 import collections
 import os
 import warnings
+import zlib
 from functools import wraps
-from urllib.parse import urldefrag, urljoin, urlunparse as _urlunparse
 from typing import Iterable
+from urllib.parse import urldefrag, urljoin, urlunparse as _urlunparse
+
+from zope.interface import implementer
 
 from incremental import Version
 
-import zlib
 from twisted.internet import defer, protocol, task
 from twisted.internet.abstract import isIPv6Address
 from twisted.internet.endpoints import HostnameEndpoint, wrapClientTLS
@@ -24,14 +26,24 @@
 from twisted.logger import Logger
 from twisted.python.compat import nativeString, networkString
 from twisted.python.components import proxyForInterface
-from twisted.python.deprecate import deprecated, deprecatedModuleAttribute, getDeprecationWarningString
+from twisted.python.deprecate import (
+    deprecated,
+    deprecatedModuleAttribute,
+    getDeprecationWarningString,
+)
 from twisted.python.failure import Failure
 from twisted.python.util import InsensitiveDict
 from twisted.web import error, http
 from twisted.web._newclient import _ensureValidMethod, _ensureValidURI
 from twisted.web.http_headers import Headers
-from twisted.web.iweb import IAgent, IAgentEndpointFactory, IBodyProducer, IPolicyForHTTPS, IResponse, UNKNOWN_LENGTH
-from zope.interface import implementer
+from twisted.web.iweb import (
+    UNKNOWN_LENGTH,
+    IAgent,
+    IAgentEndpointFactory,
+    IBodyProducer,
+    IPolicyForHTTPS,
+    IResponse,
+)
 
 
 def urlunparse(parts):
@@ -2100,13 +2112,16 @@ def _handleResponse(self, response):
 
 
 _canonicalHeaderName = Headers()._canonicalNameCaps
-_defaultSensitiveHeaders = frozenset([
-    b"Authorization",
-    b"Cookie",
-    b"Cookie2",
-    b"Proxy-Authorization",
-    b"WWW-Authenticate",
-])
+_defaultSensitiveHeaders = frozenset(
+    [
+        b"Authorization",
+        b"Cookie",
+        b"Cookie2",
+        b"Proxy-Authorization",
+        b"WWW-Authenticate",
+    ]
+)
+
 
 @implementer(IAgent)
 class RedirectAgent:
@@ -2152,7 +2167,7 @@ def __init__(
     ):
         self._agent = agent
         self._redirectLimit = redirectLimit
-        sensitive = set(_canonicalHeaderName(each) for each in sensitiveHeaderNames)
+        sensitive = {_canonicalHeaderName(each) for each in sensitiveHeaderNames}
         sensitive.update(_defaultSensitiveHeaders)
         self._sensitiveHeaderNames = sensitive
 
diff --git a/src/twisted/web/test/test_agent.py b/src/twisted/web/test/test_agent.py
index 5853bb43f6d..3c014d8aa4a 100644
--- a/src/twisted/web/test/test_agent.py
+++ b/src/twisted/web/test/test_agent.py
@@ -5,22 +5,17 @@
 Tests for L{twisted.web.client.Agent} and related new client APIs.
 """
 
+import zlib
 from http.cookiejar import CookieJar
 from io import BytesIO
-from twisted.test.iosim import FakeTransport, IOPump
-from twisted.test.proto_helpers import (
-    AccumulatingProtocol,
-    EventLoggingObserver,
-    MemoryReactorClock,
-    StringTransport,
-)
-from twisted.test.test_sslverify import certificatesForAuthorityAndServer
-from typing import Optional, TYPE_CHECKING
-from unittest import skipIf, SkipTest
+from typing import TYPE_CHECKING, Optional
+from unittest import SkipTest, skipIf
+
+from zope.interface.declarations import implementer
+from zope.interface.verify import verifyObject
 
 from incremental import Version
 
-import zlib
 from twisted.internet import defer, task
 from twisted.internet.address import IPv4Address, IPv6Address
 from twisted.internet.defer import CancelledError, Deferred, succeed
@@ -38,6 +33,14 @@
 from twisted.python.components import proxyForInterface
 from twisted.python.deprecate import getDeprecationWarningString
 from twisted.python.failure import Failure
+from twisted.test.iosim import FakeTransport, IOPump
+from twisted.test.proto_helpers import (
+    AccumulatingProtocol,
+    EventLoggingObserver,
+    MemoryReactorClock,
+    StringTransport,
+)
+from twisted.test.test_sslverify import certificatesForAuthorityAndServer
 from twisted.trial.unittest import SynchronousTestCase, TestCase
 from twisted.web import client, error, http_headers
 from twisted.web._newclient import (
@@ -50,33 +53,30 @@
     ResponseNeverReceived,
 )
 from twisted.web.client import (
+    URI,
     BrowserLikePolicyForHTTPS,
     FileBodyProducer,
-    HTTPConnectionPool,
     HostnameCachingHTTPSPolicy,
+    HTTPConnectionPool,
     Request,
     ResponseDone,
-    URI,
     _HTTP11ClientFactory,
 )
 from twisted.web.error import SchemeNotSupported
 from twisted.web.http_headers import Headers
 from twisted.web.iweb import (
+    UNKNOWN_LENGTH,
     IAgent,
     IAgentEndpointFactory,
     IBodyProducer,
     IPolicyForHTTPS,
     IRequest,
     IResponse,
-    UNKNOWN_LENGTH,
 )
 from twisted.web.test.injectionhelpers import (
     MethodInjectionTestsMixin,
     URIInjectionTestsMixin,
 )
-from zope.interface.declarations import implementer
-from zope.interface.verify import verifyObject
-
 
 try:
     from twisted.internet import ssl as _ssl
@@ -2674,15 +2674,13 @@ def _testRedirectDefault(
             targetScheme = b"https" if startScheme == b"http" else b"http"
             targetPort = 443 if startPort == 80 else 80
 
-        portSyntax = b''
+        portSyntax = b""
         if crossPort:
             targetPort = 8443
-            portSyntax = b':8443'
+            portSyntax = b":8443"
         targetDomain = b"example.net" if crossDomain else startDomain
         locationValue = targetScheme + b"://" + targetDomain + portSyntax + b"/bar"
-        headers = http_headers.Headers(
-            {b"location": [locationValue]}
-        )
+        headers = http_headers.Headers({b"location": [locationValue]})
         response = Response((b"HTTP", 1, 1), code, b"OK", headers, None)
         res.callback(response)
 
@@ -2728,7 +2726,9 @@ def test_redirect308(self):
         """
         self._testRedirectDefault(308)
 
-    def _sensitiveHeadersTest(self, expectedHostHeader: bytes = b"example.com", **crossKwargs: dict) -> None:
+    def _sensitiveHeadersTest(
+        self, expectedHostHeader: bytes = b"example.com", **crossKwargs: dict
+    ) -> None:
         """
         L{client.RedirectAgent} scrubs sensitive headers when redirecting
         between differing origins.
@@ -2776,14 +2776,16 @@ def test_crossDomainHeaders(self) -> None:
         L{client.RedirectAgent} scrubs sensitive headers when redirecting
         between differing domains.
         """
-        self._sensitiveHeadersTest(crossDomain=True, expectedHostHeader=b'example.net')
+        self._sensitiveHeadersTest(crossDomain=True, expectedHostHeader=b"example.net")
 
     def test_crossPortHeaders(self) -> None:
         """
         L{client.RedirectAgent} scrubs sensitive headers when redirecting
         between differing ports.
         """
-        self._sensitiveHeadersTest(crossPort=True, expectedHostHeader=b'example.com:8443')
+        self._sensitiveHeadersTest(
+            crossPort=True, expectedHostHeader=b"example.com:8443"
+        )
 
     def test_crossSchemeHeaders(self) -> None:
         """

From 8a4b1f3e0e7d2316944064960d9dcb4556525845 Mon Sep 17 00:00:00 2001
From: Glyph <glyph@twistedmatrix.com>
Date: Sun, 23 Jan 2022 14:16:48 -0800
Subject: [PATCH 06/10] oops

---
 src/twisted/{topfiles => newsfragments}/10294.bugfix | 0
 1 file changed, 0 insertions(+), 0 deletions(-)
 rename src/twisted/{topfiles => newsfragments}/10294.bugfix (100%)

diff --git a/src/twisted/topfiles/10294.bugfix b/src/twisted/newsfragments/10294.bugfix
similarity index 100%
rename from src/twisted/topfiles/10294.bugfix
rename to src/twisted/newsfragments/10294.bugfix

From 9d53c0f8b38340fe5ca3fa1a7df49347c2dea18a Mon Sep 17 00:00:00 2001
From: Glyph <glyph@twistedmatrix.com>
Date: Sun, 23 Jan 2022 14:37:22 -0800
Subject: [PATCH 07/10] tell mypy enough that it can actually find bugs

---
 src/twisted/web/test/test_agent.py | 88 +++++++++---------------------
 1 file changed, 27 insertions(+), 61 deletions(-)

diff --git a/src/twisted/web/test/test_agent.py b/src/twisted/web/test/test_agent.py
index 3c014d8aa4a..e3cb308a131 100644
--- a/src/twisted/web/test/test_agent.py
+++ b/src/twisted/web/test/test_agent.py
@@ -5,26 +5,22 @@
 Tests for L{twisted.web.client.Agent} and related new client APIs.
 """
 
-import zlib
 from http.cookiejar import CookieJar
 from io import BytesIO
-from typing import TYPE_CHECKING, Optional
+from twisted.test.iosim import FakeTransport, IOPump
+from twisted.test.proto_helpers import AccumulatingProtocol, EventLoggingObserver, MemoryReactorClock, StringTransport
+from twisted.test.test_sslverify import certificatesForAuthorityAndServer
+from typing import List, Optional, TYPE_CHECKING, Tuple, cast
 from unittest import SkipTest, skipIf
 
-from zope.interface.declarations import implementer
-from zope.interface.verify import verifyObject
-
 from incremental import Version
 
+import zlib
 from twisted.internet import defer, task
 from twisted.internet.address import IPv4Address, IPv6Address
 from twisted.internet.defer import CancelledError, Deferred, succeed
 from twisted.internet.endpoints import HostnameEndpoint, TCP4ClientEndpoint
-from twisted.internet.error import (
-    ConnectionDone,
-    ConnectionLost,
-    ConnectionRefusedError,
-)
+from twisted.internet.error import ConnectionDone, ConnectionLost, ConnectionRefusedError
 from twisted.internet.interfaces import IOpenSSLClientConnectionCreator
 from twisted.internet.protocol import Factory, Protocol
 from twisted.internet.task import Clock
@@ -33,50 +29,25 @@
 from twisted.python.components import proxyForInterface
 from twisted.python.deprecate import getDeprecationWarningString
 from twisted.python.failure import Failure
-from twisted.test.iosim import FakeTransport, IOPump
-from twisted.test.proto_helpers import (
-    AccumulatingProtocol,
-    EventLoggingObserver,
-    MemoryReactorClock,
-    StringTransport,
-)
-from twisted.test.test_sslverify import certificatesForAuthorityAndServer
 from twisted.trial.unittest import SynchronousTestCase, TestCase
 from twisted.web import client, error, http_headers
-from twisted.web._newclient import (
-    HTTP11ClientProtocol,
-    PotentialDataLoss,
-    RequestNotSent,
-    RequestTransmissionFailed,
-    Response,
-    ResponseFailed,
-    ResponseNeverReceived,
-)
-from twisted.web.client import (
-    URI,
-    BrowserLikePolicyForHTTPS,
-    FileBodyProducer,
-    HostnameCachingHTTPSPolicy,
-    HTTPConnectionPool,
-    Request,
-    ResponseDone,
-    _HTTP11ClientFactory,
-)
+from twisted.web._newclient import HTTP11ClientProtocol, PotentialDataLoss, RequestNotSent, RequestTransmissionFailed, Response, ResponseFailed, ResponseNeverReceived
+from twisted.web.client import BrowserLikePolicyForHTTPS, FileBodyProducer, HTTPConnectionPool, HostnameCachingHTTPSPolicy, Request, ResponseDone, URI, _HTTP11ClientFactory
 from twisted.web.error import SchemeNotSupported
 from twisted.web.http_headers import Headers
-from twisted.web.iweb import (
-    UNKNOWN_LENGTH,
-    IAgent,
-    IAgentEndpointFactory,
-    IBodyProducer,
-    IPolicyForHTTPS,
-    IRequest,
-    IResponse,
-)
-from twisted.web.test.injectionhelpers import (
-    MethodInjectionTestsMixin,
-    URIInjectionTestsMixin,
-)
+from twisted.web.iweb import IAgent, IAgentEndpointFactory, IBodyProducer, IPolicyForHTTPS, IRequest, IResponse, UNKNOWN_LENGTH
+from twisted.web.test.injectionhelpers import MethodInjectionTestsMixin, URIInjectionTestsMixin
+from zope.interface.declarations import implementer
+from zope.interface.verify import verifyObject
+
+# Creatively lie to mypy about the nature of inheritance, since dealing with
+# expectations of a mixin class is basically impossible (don't use mixins).
+if TYPE_CHECKING:
+    testMixinClass = TestCase
+    runtimeTestCase = object
+else:
+    testMixinClass = object
+    runtimeTestCase = TestCase
 
 try:
     from twisted.internet import ssl as _ssl
@@ -110,8 +81,8 @@ class StubHTTPProtocol(Protocol):
         request method is appended to this list.
     """
 
-    def __init__(self):
-        self.requests = []
+    def __init__(self) -> None:
+        self.requests: List[Tuple[Request, Deferred[IResponse]]] = []
         self.state = "QUIESCENT"
 
     def request(self, request):
@@ -2597,11 +2568,6 @@ def getConnection(this, key, ep):
     b"www-authenticate",
 ]
 
-if TYPE_CHECKING:
-    testMixinClass = TestCase
-else:
-    testMixinClass = object
-
 
 class _RedirectAgentTestsMixin(testMixinClass):
     """
@@ -2638,7 +2604,7 @@ def _testRedirectDefault(
         crossDomain: bool = False,
         crossPort: bool = False,
         requestHeaders: Optional[Headers] = None,
-    ) -> IRequest:
+    ) -> Request:
         """
         When getting a redirect, L{client.RedirectAgent} follows the URL
         specified in the L{Location} header field and make a new request.
@@ -2727,7 +2693,7 @@ def test_redirect308(self):
         self._testRedirectDefault(308)
 
     def _sensitiveHeadersTest(
-        self, expectedHostHeader: bytes = b"example.com", **crossKwargs: dict
+        self, expectedHostHeader: bytes = b"example.com", **crossKwargs: bool
     ) -> None:
         """
         L{client.RedirectAgent} scrubs sensitive headers when redirecting
@@ -3000,7 +2966,7 @@ def test_responseHistory(self):
 
 
 class RedirectAgentTests(
-    TestCase, FakeReactorAndConnectMixin, _RedirectAgentTestsMixin, AgentTestsMixin
+    FakeReactorAndConnectMixin, _RedirectAgentTestsMixin, AgentTestsMixin, runtimeTestCase,
 ):
     """
     Tests for L{client.RedirectAgent}.
@@ -3037,7 +3003,7 @@ def test_302OnPost(self):
 
 
 class BrowserLikeRedirectAgentTests(
-    TestCase, FakeReactorAndConnectMixin, _RedirectAgentTestsMixin, AgentTestsMixin
+    FakeReactorAndConnectMixin, _RedirectAgentTestsMixin, AgentTestsMixin, runtimeTestCase
 ):
     """
     Tests for L{client.BrowserLikeRedirectAgent}.

From adadd2c6a49a9b5f9b41a1f125004b68449d2fb5 Mon Sep 17 00:00:00 2001
From: Glyph <glyph@twistedmatrix.com>
Date: Sun, 23 Jan 2022 14:40:20 -0800
Subject: [PATCH 08/10] really need to fix my editor to agree with our black /
 isort config

---
 src/twisted/web/test/test_agent.py | 72 ++++++++++++++++++++++++------
 1 file changed, 58 insertions(+), 14 deletions(-)

diff --git a/src/twisted/web/test/test_agent.py b/src/twisted/web/test/test_agent.py
index e3cb308a131..7af5d911301 100644
--- a/src/twisted/web/test/test_agent.py
+++ b/src/twisted/web/test/test_agent.py
@@ -5,22 +5,26 @@
 Tests for L{twisted.web.client.Agent} and related new client APIs.
 """
 
+import zlib
 from http.cookiejar import CookieJar
 from io import BytesIO
-from twisted.test.iosim import FakeTransport, IOPump
-from twisted.test.proto_helpers import AccumulatingProtocol, EventLoggingObserver, MemoryReactorClock, StringTransport
-from twisted.test.test_sslverify import certificatesForAuthorityAndServer
-from typing import List, Optional, TYPE_CHECKING, Tuple, cast
+from typing import TYPE_CHECKING, List, Optional, Tuple, cast
 from unittest import SkipTest, skipIf
 
+from zope.interface.declarations import implementer
+from zope.interface.verify import verifyObject
+
 from incremental import Version
 
-import zlib
 from twisted.internet import defer, task
 from twisted.internet.address import IPv4Address, IPv6Address
 from twisted.internet.defer import CancelledError, Deferred, succeed
 from twisted.internet.endpoints import HostnameEndpoint, TCP4ClientEndpoint
-from twisted.internet.error import ConnectionDone, ConnectionLost, ConnectionRefusedError
+from twisted.internet.error import (
+    ConnectionDone,
+    ConnectionLost,
+    ConnectionRefusedError,
+)
 from twisted.internet.interfaces import IOpenSSLClientConnectionCreator
 from twisted.internet.protocol import Factory, Protocol
 from twisted.internet.task import Clock
@@ -29,16 +33,50 @@
 from twisted.python.components import proxyForInterface
 from twisted.python.deprecate import getDeprecationWarningString
 from twisted.python.failure import Failure
+from twisted.test.iosim import FakeTransport, IOPump
+from twisted.test.proto_helpers import (
+    AccumulatingProtocol,
+    EventLoggingObserver,
+    MemoryReactorClock,
+    StringTransport,
+)
+from twisted.test.test_sslverify import certificatesForAuthorityAndServer
 from twisted.trial.unittest import SynchronousTestCase, TestCase
 from twisted.web import client, error, http_headers
-from twisted.web._newclient import HTTP11ClientProtocol, PotentialDataLoss, RequestNotSent, RequestTransmissionFailed, Response, ResponseFailed, ResponseNeverReceived
-from twisted.web.client import BrowserLikePolicyForHTTPS, FileBodyProducer, HTTPConnectionPool, HostnameCachingHTTPSPolicy, Request, ResponseDone, URI, _HTTP11ClientFactory
+from twisted.web._newclient import (
+    HTTP11ClientProtocol,
+    PotentialDataLoss,
+    RequestNotSent,
+    RequestTransmissionFailed,
+    Response,
+    ResponseFailed,
+    ResponseNeverReceived,
+)
+from twisted.web.client import (
+    URI,
+    BrowserLikePolicyForHTTPS,
+    FileBodyProducer,
+    HostnameCachingHTTPSPolicy,
+    HTTPConnectionPool,
+    Request,
+    ResponseDone,
+    _HTTP11ClientFactory,
+)
 from twisted.web.error import SchemeNotSupported
 from twisted.web.http_headers import Headers
-from twisted.web.iweb import IAgent, IAgentEndpointFactory, IBodyProducer, IPolicyForHTTPS, IRequest, IResponse, UNKNOWN_LENGTH
-from twisted.web.test.injectionhelpers import MethodInjectionTestsMixin, URIInjectionTestsMixin
-from zope.interface.declarations import implementer
-from zope.interface.verify import verifyObject
+from twisted.web.iweb import (
+    UNKNOWN_LENGTH,
+    IAgent,
+    IAgentEndpointFactory,
+    IBodyProducer,
+    IPolicyForHTTPS,
+    IRequest,
+    IResponse,
+)
+from twisted.web.test.injectionhelpers import (
+    MethodInjectionTestsMixin,
+    URIInjectionTestsMixin,
+)
 
 # Creatively lie to mypy about the nature of inheritance, since dealing with
 # expectations of a mixin class is basically impossible (don't use mixins).
@@ -2966,7 +3004,10 @@ def test_responseHistory(self):
 
 
 class RedirectAgentTests(
-    FakeReactorAndConnectMixin, _RedirectAgentTestsMixin, AgentTestsMixin, runtimeTestCase,
+    FakeReactorAndConnectMixin,
+    _RedirectAgentTestsMixin,
+    AgentTestsMixin,
+    runtimeTestCase,
 ):
     """
     Tests for L{client.RedirectAgent}.
@@ -3003,7 +3044,10 @@ def test_302OnPost(self):
 
 
 class BrowserLikeRedirectAgentTests(
-    FakeReactorAndConnectMixin, _RedirectAgentTestsMixin, AgentTestsMixin, runtimeTestCase
+    FakeReactorAndConnectMixin,
+    _RedirectAgentTestsMixin,
+    AgentTestsMixin,
+    runtimeTestCase,
 ):
     """
     Tests for L{client.BrowserLikeRedirectAgent}.

From 4eda9eabbba8ba2ccc45daad7208ff3db25ac348 Mon Sep 17 00:00:00 2001
From: Glyph <glyph@twistedmatrix.com>
Date: Sun, 23 Jan 2022 14:55:10 -0800
Subject: [PATCH 09/10] lint fix

---
 src/twisted/web/test/test_agent.py | 3 +--
 1 file changed, 1 insertion(+), 2 deletions(-)

diff --git a/src/twisted/web/test/test_agent.py b/src/twisted/web/test/test_agent.py
index 7af5d911301..5201467b9aa 100644
--- a/src/twisted/web/test/test_agent.py
+++ b/src/twisted/web/test/test_agent.py
@@ -8,7 +8,7 @@
 import zlib
 from http.cookiejar import CookieJar
 from io import BytesIO
-from typing import TYPE_CHECKING, List, Optional, Tuple, cast
+from typing import TYPE_CHECKING, List, Optional, Tuple
 from unittest import SkipTest, skipIf
 
 from zope.interface.declarations import implementer
@@ -70,7 +70,6 @@
     IAgentEndpointFactory,
     IBodyProducer,
     IPolicyForHTTPS,
-    IRequest,
     IResponse,
 )
 from twisted.web.test.injectionhelpers import (

From 0c44b4806a27d258baf13d6f714f06eddb28da5a Mon Sep 17 00:00:00 2001
From: Glyph <glyph@twistedmatrix.com>
Date: Sun, 23 Jan 2022 15:31:51 -0800
Subject: [PATCH 10/10] correct docstring to suggest the right order

---
 src/twisted/web/iweb.py | 10 +++++-----
 1 file changed, 5 insertions(+), 5 deletions(-)

diff --git a/src/twisted/web/iweb.py b/src/twisted/web/iweb.py
index e83d5a1a503..1aeb152fd9f 100644
--- a/src/twisted/web/iweb.py
+++ b/src/twisted/web/iweb.py
@@ -713,12 +713,12 @@ class IAgent(Interface):
     obtained by combining a number of (hypothetical) implementations::
 
         baseAgent = Agent(reactor)
-        redirect = BrowserLikeRedirectAgent(baseAgent, limit=10)
+        decode = ContentDecoderAgent(baseAgent, [(b"gzip", GzipDecoder())])
+        cookie = CookieAgent(decode, diskStore.cookie)
         authenticate = AuthenticateAgent(
-            redirect, [diskStore.credentials, GtkAuthInterface()])
-        cookie = CookieAgent(authenticate, diskStore.cookie)
-        decode = ContentDecoderAgent(cookie, [(b"gzip", GzipDecoder())])
-        cache = CacheAgent(decode, diskStore.cache)
+            cookie, [diskStore.credentials, GtkAuthInterface()])
+        cache = CacheAgent(authenticate, diskStore.cache)
+        redirect = BrowserLikeRedirectAgent(cache, limit=10)
 
         doSomeRequests(cache)
     """
