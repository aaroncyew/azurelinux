diff --git a/crypto/fips/build.info b/crypto/fips/build.info
index 2859a08..1d97ca7 100644
--- a/crypto/fips/build.info
+++ b/crypto/fips/build.info
@@ -1,6 +1,6 @@
 LIBS=../../libcrypto
 SOURCE[../../libcrypto]=\
-        fips_aes_selftest.c fips_des_selftest.c fips_hmac_selftest.c \
+        fips_aes_selftest.c fips_des_selftest.c fips_entropy.c fips_hmac_selftest.c \
         fips_rsa_selftest.c fips_sha_selftest.c fips.c fips_dsa_selftest.c \
         fips_post.c fips_drbg_ctr.c fips_drbg_hash.c fips_drbg_hmac.c \
         fips_drbg_lib.c fips_drbg_rand.c fips_drbg_selftest.c fips_rand_lib.c \
diff --git a/crypto/fips/fips.c b/crypto/fips/fips.c
index 3b9d3e9..b3e0f43 100644
--- a/crypto/fips/fips.c
+++ b/crypto/fips/fips.c
@@ -454,6 +454,14 @@ int FIPS_module_mode_set(int onoff)
 
         fips_post = 1;
 
+        if (!FIPS_init_entropy()) {
+            FIPSerr(FIPS_F_FIPS_MODULE_MODE_SET,
+                    FIPS_R_ENTROPY_INIT_FAILED);
+            fips_selftest_fail = 1;
+            ret = 0;
+            goto end;
+        }
+
         if (!FIPS_selftest()) {
             fips_selftest_fail = 1;
             ret = 0;
diff --git a/crypto/fips/fips_entropy.c b/crypto/fips/fips_entropy.c
new file mode 100644
index 0000000..098dc91
--- /dev/null
+++ b/crypto/fips/fips_entropy.c
@@ -0,0 +1,53 @@
+# include <jitterentropy.h>
+# include <openssl/fips.h>
+
+#include "crypto/fips.h"
+
+static int fips_entropy_init = 0;
+
+int FIPS_init_entropy(void)
+{
+    int rv = 1;
+
+    if (jent_entropy_init() != 0) {
+        rv = 0;
+    } else {
+        fips_entropy_init = 1;
+    }
+
+    return rv;
+}
+
+ssize_t FIPS_jitter_entropy(unsigned char *buf, size_t buflen)
+{
+    ssize_t ent_bytes = -1;
+    struct rand_data* ec = NULL;
+
+    if (buf == NULL || buflen == 0) {
+        goto end;
+    }
+
+    /* Ensure entropy source has been initiated */
+    if (!fips_entropy_init) {
+        if  (!FIPS_init_entropy()) {
+            goto end;
+        }
+    }
+
+    /* Allocate entropy collector */
+    ec = jent_entropy_collector_alloc(1, JENT_FORCE_FIPS);
+    if (ec == NULL) {
+        goto end;
+    }
+
+    /* Get entropy */
+    ent_bytes = jent_read_entropy(ec, (char *)buf, buflen);
+
+end:
+    /* Free entropy collector */
+    if (ec != NULL) {
+        jent_entropy_collector_free(ec);
+    }
+
+    return ent_bytes;
+}
\ No newline at end of file
diff --git a/crypto/fips/fips_err.h b/crypto/fips/fips_err.h
index 3cf8d69..9a9c9a1 100644
--- a/crypto/fips/fips_err.h
+++ b/crypto/fips/fips_err.h
@@ -138,6 +138,7 @@ static ERR_STRING_DATA FIPS_str_reasons[] = {
     {ERR_REASON(FIPS_R_DRBG_NOT_INITIALISED), "drbg not initialised"},
     {ERR_REASON(FIPS_R_DRBG_STUCK), "drbg stuck"},
     {ERR_REASON(FIPS_R_ENTROPY_ERROR_UNDETECTED), "entropy error undetected"},
+    {ERR_REASON(FIPS_R_ENTROPY_INIT_FAILED), "entropy init failed"},
     {ERR_REASON(FIPS_R_ENTROPY_NOT_REQUESTED_FOR_RESEED),
      "entropy not requested for reseed"},
     {ERR_REASON(FIPS_R_ENTROPY_SOURCE_STUCK), "entropy source stuck"},
diff --git a/crypto/rand/rand_unix.c b/crypto/rand/rand_unix.c
index 5ed97cb..4c2d54e 100644
--- a/crypto/rand/rand_unix.c
+++ b/crypto/rand/rand_unix.c
@@ -634,9 +634,37 @@ size_t rand_pool_acquire_entropy(RAND_POOL *pool)
     return rand_pool_entropy_available(pool);
 #  else
     size_t entropy_available;
+    int in_post;
+
+#ifdef OPENSSL_FIPS
+    if (FIPS_mode()) {
+        /* Use jitter entropy in FIPS mode */
+        for (in_post = fips_in_post(); in_post >= 0; --in_post) {
+            size_t bytes_needed;
+            unsigned char *buffer;
+            ssize_t bytes;
+            /* Maximum allowed number of consecutive unsuccessful attempts */
+            int attempts = 3;
+            
+            bytes_needed = rand_pool_bytes_needed(pool, 1 /*entropy_factor*/);
+            while (bytes_needed !=0 && attempts-- > 0) {
+                buffer = rand_pool_add_begin(pool, bytes_needed);
+                bytes = FIPS_jitter_entropy(buffer, bytes_needed);
+                if (bytes > 0) {
+                    rand_pool_add_end(pool, bytes, 8 * bytes);
+                    bytes_needed -= bytes;
+                    attempts = 3; /* reset counter after successful attempt */
+                } else if (bytes < 0) {
+                    break;
+                }
+            }
+        }
+        entropy_available = rand_pool_entropy_available(pool);
+        return entropy_available;
+    }
+#endif
 
 #   if defined(OPENSSL_RAND_SEED_GETRANDOM)
-    int in_post;
 
     for (in_post = fips_in_post(); in_post >= 0; --in_post) {
     {
diff --git a/include/crypto/fips.h b/include/crypto/fips.h
index 564261c..29c4923 100644
--- a/include/crypto/fips.h
+++ b/include/crypto/fips.h
@@ -94,6 +94,8 @@ void fips_set_selftest_fail(void);
 
 void FIPS_get_timevec(unsigned char *buf, unsigned long *pctr);
 
+ssize_t FIPS_jitter_entropy(unsigned char *buf, size_t buflen);
+
 #else
 
 # define fips_in_post() 0
diff --git a/include/openssl/fips.h b/include/openssl/fips.h
index abbe81b..be84e08 100644
--- a/include/openssl/fips.h
+++ b/include/openssl/fips.h
@@ -78,6 +78,8 @@ extern "C" {
                                BN_GENCB *cb);
     int FIPS_dsa_paramgen_check_g(DSA *dsa);
 
+    int FIPS_init_entropy(void);
+    
 /* BEGIN ERROR CODES */
 /* The following lines are auto generated by the script mkerr.pl. Any changes
  * made after this point may be overwritten when the script is next run.
@@ -153,6 +155,7 @@ extern "C" {
 # define FIPS_R_DRBG_NOT_INITIALISED                      152
 # define FIPS_R_DRBG_STUCK                                103
 # define FIPS_R_ENTROPY_ERROR_UNDETECTED                  104
+# define FIPS_R_ENTROPY_INIT_FAILED                       158
 # define FIPS_R_ENTROPY_NOT_REQUESTED_FOR_RESEED          105
 # define FIPS_R_ENTROPY_SOURCE_STUCK                      142
 # define FIPS_R_ERROR_INITIALISING_DRBG                   115
diff --git a/util/libcrypto.num b/util/libcrypto.num
index 2e47840..e354631 100644
--- a/util/libcrypto.num
+++ b/util/libcrypto.num
@@ -4634,4 +4634,5 @@ EVP_KDF_vctrl                           6594	1_1_1b	EXIST::FUNCTION:
 EVP_KDF_ctrl_str                        6595	1_1_1b	EXIST::FUNCTION:
 EVP_KDF_size                            6596	1_1_1b	EXIST::FUNCTION:
 EVP_KDF_derive                          6597	1_1_1b	EXIST::FUNCTION:
-EC_GROUP_check_named_curve              6598	1_1_1g	EXIST::FUNCTION:EC
\ No newline at end of file
+EC_GROUP_check_named_curve              6598    1_1_1g	EXIST::FUNCTION:EC
+FIPS_init_entropy                       6599    1_1_1k  EXIST::FUNCTION:
\ No newline at end of file
