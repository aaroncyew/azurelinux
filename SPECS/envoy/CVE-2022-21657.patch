From c9bd2815ece62a79ea50cdd635392a7e1f8bb55d Mon Sep 17 00:00:00 2001
From: Shriram Rajagopalan <shriram@us.ibm.com>
Date: Mon, 27 Mar 2017 12:27:00 -0400
Subject: [PATCH 01/12] request_headers_to_add in global route_config

---
 .../route_config/route_config.rst             | 14 ++++++++++-
 include/envoy/router/router.h                 |  7 ++++++
 source/common/http/conn_manager_utility.cc    |  6 +++++
 source/common/json/config_schemas.cc          | 14 +++++++++++
 source/common/router/config_impl.cc           |  7 ++++++
 source/common/router/config_impl.h            | 12 +++++++++
 test/common/router/config_impl_test.cc        | 25 ++++++++++++++++++-
 test/mocks/router/mocks.cc                    |  1 +
 test/mocks/router/mocks.h                     |  3 +++
 9 files changed, 87 insertions(+), 2 deletions(-)

diff --git a/docs/configuration/http_conn_man/route_config/route_config.rst b/docs/configuration/http_conn_man/route_config/route_config.rst
index d8317c8069a8..731d9421fe5d 100644
--- a/docs/configuration/http_conn_man/route_config/route_config.rst
+++ b/docs/configuration/http_conn_man/route_config/route_config.rst
@@ -12,7 +12,8 @@ Route configuration
     "virtual_hosts": [],
     "internal_only_headers": [],
     "response_headers_to_add": [],
-    "response_headers_to_remove": []
+    "response_headers_to_remove": [],
+    "request_headers_to_add": []
   }
 
 :ref:`virtual_hosts <config_http_conn_man_route_table_vhost>`
@@ -47,6 +48,17 @@ response_headers_to_remove
 
     ["header1", "header2"]
 
+request_headers_to_add
+  *(optional, array)* Optionally specifies a list of HTTP headers that should be added to each
+  request forwarded by the HTTP connection manager. Headers are specified in the following form:
+
+  .. code-block:: json
+
+    [
+      {"key": "header1", "value": "value1"},
+      {"key": "header2", "value": "value2"}
+    ]
+
 .. toctree::
   :hidden:
 
diff --git a/include/envoy/router/router.h b/include/envoy/router/router.h
index fb7de37548d3..c2fb4f122915 100644
--- a/include/envoy/router/router.h
+++ b/include/envoy/router/router.h
@@ -284,6 +284,13 @@ class Config {
   virtual const std::list<std::pair<Http::LowerCaseString, std::string>>&
   responseHeadersToAdd() const PURE;
 
+  /**
+   * Return a list of header key/value pairs that will be added to every request
+   * proxied to an upstream cluster.
+   */
+  virtual const std::list<std::pair<Http::LowerCaseString, std::string>>&
+  requestHeadersToAdd() const PURE;
+
   /**
    * Return a list of upstream headers that will be stripped from every response that transits the
    * router.
diff --git a/source/common/http/conn_manager_utility.cc b/source/common/http/conn_manager_utility.cc
index 81e34b6db6e1..164086cce346 100644
--- a/source/common/http/conn_manager_utility.cc
+++ b/source/common/http/conn_manager_utility.cc
@@ -28,6 +28,12 @@ void ConnectionManagerUtility::mutateRequestHeaders(Http::HeaderMap& request_hea
                                                     const Router::Config& route_config,
                                                     Runtime::RandomGenerator& random,
                                                     Runtime::Loader& runtime) {
+  // Add user-specified headers to the request before scrubbing the request headers.
+  for (const std::pair<Http::LowerCaseString, std::string>& to_add :
+       route_config.requestHeadersToAdd()) {
+    request_headers.addStatic(to_add.first, to_add.second);
+  }
+
   // Clean proxy headers.
   request_headers.removeConnection();
   request_headers.removeEnvoyInternalRequest();
diff --git a/source/common/json/config_schemas.cc b/source/common/json/config_schemas.cc
index 6788ea6c75c6..8866de870d7f 100644
--- a/source/common/json/config_schemas.cc
+++ b/source/common/json/config_schemas.cc
@@ -420,6 +420,20 @@ const std::string Json::Schema::ROUTE_CONFIGURATION_SCHEMA(R"EOF(
       "response_headers_to_remove" : {
         "type" : "array",
         "items" : {"type" : "string"}
+      },
+      "request_headers_to_add" : {
+        "type" : "array",
+        "minItems" : 1,
+        "uniqueItems" : true,
+        "items" : {
+          "type": "object",
+          "properties": {
+            "key" : {"type" : "string"},
+            "value" : {"type" : "string"}
+          },
+          "required": ["key", "value"],
+          "additionalProperties": false
+        }
       }
     },
     "required": ["virtual_hosts"],
diff --git a/source/common/router/config_impl.cc b/source/common/router/config_impl.cc
index e285a4432474..7921af16ebb1 100644
--- a/source/common/router/config_impl.cc
+++ b/source/common/router/config_impl.cc
@@ -553,6 +553,13 @@ ConfigImpl::ConfigImpl(const Json::Object& config, Runtime::Loader& runtime,
       response_headers_to_remove_.push_back(Http::LowerCaseString(header));
     }
   }
+
+  if (config.hasObject("request_headers_to_add")) {
+    for (const Json::ObjectPtr& header : config.getObjectArray("request_headers_to_add")) {
+      request_headers_to_add_.push_back(
+          {Http::LowerCaseString(header->getString("key")), header->getString("value")});
+    }
+  }
 }
 
 } // Router
diff --git a/source/common/router/config_impl.h b/source/common/router/config_impl.h
index 7db6baa215ba..9a7bc5308bb5 100644
--- a/source/common/router/config_impl.h
+++ b/source/common/router/config_impl.h
@@ -383,6 +383,11 @@ class ConfigImpl : public Config {
     return response_headers_to_remove_;
   }
 
+  const std::list<std::pair<Http::LowerCaseString, std::string>>&
+  requestHeadersToAdd() const override {
+    return request_headers_to_add_;
+  }
+
   bool usesRuntime() const override { return route_matcher_->usesRuntime(); }
 
 private:
@@ -390,6 +395,7 @@ class ConfigImpl : public Config {
   std::list<Http::LowerCaseString> internal_only_headers_;
   std::list<std::pair<Http::LowerCaseString, std::string>> response_headers_to_add_;
   std::list<Http::LowerCaseString> response_headers_to_remove_;
+  std::list<std::pair<Http::LowerCaseString, std::string>> request_headers_to_add_;
 };
 
 /**
@@ -413,12 +419,18 @@ class NullConfigImpl : public Config {
     return response_headers_to_remove_;
   }
 
+  const std::list<std::pair<Http::LowerCaseString, std::string>>&
+  requestHeadersToAdd() const override {
+    return request_headers_to_add_;
+  }
+
   bool usesRuntime() const override { return false; }
 
 private:
   std::list<Http::LowerCaseString> internal_only_headers_;
   std::list<std::pair<Http::LowerCaseString, std::string>> response_headers_to_add_;
   std::list<Http::LowerCaseString> response_headers_to_remove_;
+  std::list<std::pair<Http::LowerCaseString, std::string>> request_headers_to_add_;
 };
 
 } // Router
diff --git a/test/common/router/config_impl_test.cc b/test/common/router/config_impl_test.cc
index 51b5272cfff1..13436ce3087a 100644
--- a/test/common/router/config_impl_test.cc
+++ b/test/common/router/config_impl_test.cc
@@ -140,6 +140,11 @@ TEST(RouteMatcherTest, TestRoutes) {
   "response_headers_to_remove": [
     "x-envoy-upstream-canary",
     "x-envoy-virtual-cluster"
+  ],
+
+  "request_headers_to_add": [
+    {"key": "x-backend-mystery-header", "value": "true"},
+    {"key" : "Connection", "value" : "Keep-Alive"}
   ]
 }
   )EOF";
@@ -269,7 +274,7 @@ TEST(RouteMatcherTest, TestRoutes) {
     EXPECT_EQ("new_host", headers.get_(Http::Headers::get().Host));
   }
 
-  // Header manipulaton testing.
+  // Response header manipulation testing.
   EXPECT_THAT(std::list<Http::LowerCaseString>{Http::LowerCaseString("x-lyft-user-id")},
               ContainerEq(config.internalOnlyHeaders()));
   EXPECT_THAT((std::list<std::pair<Http::LowerCaseString, std::string>>(
@@ -279,6 +284,23 @@ TEST(RouteMatcherTest, TestRoutes) {
                                                 Http::LowerCaseString("x-envoy-virtual-cluster")}),
               ContainerEq(config.responseHeadersToRemove()));
 
+  // Request header manipulation testing
+  {
+    // At route_config level
+    // Check if user-specified request headers are added to config before scrubbing
+    EXPECT_THAT((std::list<std::pair<Http::LowerCaseString, std::string>>(
+                    {{Http::LowerCaseString("x-backend-mystery-header"), "true"},
+                     {Http::LowerCaseString("Connection"), "Keep-Alive"}})),
+                ContainerEq(config.requestHeadersToAdd()));
+
+    Http::TestHeaderMapImpl headers = genHeaders("api.lyft.com", "/host/rewrite/me", "GET");
+    const RouteEntry* route = config.route(headers, 0)->routeEntry();
+    route->finalizeRequestHeaders(headers);
+
+    // check headers after scrubbing
+    EXPECT_EQ(nullptr, headers.get(Http::LowerCaseString("Connection")));
+  }
+
   // Virtual cluster testing.
   {
     Http::TestHeaderMapImpl headers = genHeaders("api.lyft.com", "/rides", "GET");
@@ -1520,6 +1542,7 @@ TEST(NullConfigImplTest, All) {
   EXPECT_EQ(0UL, config.internalOnlyHeaders().size());
   EXPECT_EQ(0UL, config.responseHeadersToAdd().size());
   EXPECT_EQ(0UL, config.responseHeadersToRemove().size());
+  EXPECT_EQ(0UL, config.requestHeadersToAdd().size());
   EXPECT_FALSE(config.usesRuntime());
 }
 
diff --git a/test/mocks/router/mocks.cc b/test/mocks/router/mocks.cc
index 3521622eeb45..cd71da0c4bba 100644
--- a/test/mocks/router/mocks.cc
+++ b/test/mocks/router/mocks.cc
@@ -62,6 +62,7 @@ MockConfig::MockConfig() : route_(new NiceMock<MockRoute>()) {
   ON_CALL(*this, internalOnlyHeaders()).WillByDefault(ReturnRef(internal_only_headers_));
   ON_CALL(*this, responseHeadersToAdd()).WillByDefault(ReturnRef(response_headers_to_add_));
   ON_CALL(*this, responseHeadersToRemove()).WillByDefault(ReturnRef(response_headers_to_remove_));
+  ON_CALL(*this, requestHeadersToAdd()).WillByDefault(ReturnRef(request_headers_to_add_));
 }
 
 MockConfig::~MockConfig() {}
diff --git a/test/mocks/router/mocks.h b/test/mocks/router/mocks.h
index 6455306f5eb0..d182648f332f 100644
--- a/test/mocks/router/mocks.h
+++ b/test/mocks/router/mocks.h
@@ -181,12 +181,15 @@ class MockConfig : public Config {
   MOCK_CONST_METHOD0(responseHeadersToAdd,
                      const std::list<std::pair<Http::LowerCaseString, std::string>>&());
   MOCK_CONST_METHOD0(responseHeadersToRemove, const std::list<Http::LowerCaseString>&());
+  MOCK_CONST_METHOD0(requestHeadersToAdd,
+                     const std::list<std::pair<Http::LowerCaseString, std::string>>&());
   MOCK_CONST_METHOD0(usesRuntime, bool());
 
   std::shared_ptr<MockRoute> route_;
   std::list<Http::LowerCaseString> internal_only_headers_;
   std::list<std::pair<Http::LowerCaseString, std::string>> response_headers_to_add_;
   std::list<Http::LowerCaseString> response_headers_to_remove_;
+  std::list<std::pair<Http::LowerCaseString, std::string>> request_headers_to_add_;
 };
 
 } // Router

From 2fda10a5d82ca885fa273cf4c24c28c417f89817 Mon Sep 17 00:00:00 2001
From: Shriram Rajagopalan <shriram@us.ibm.com>
Date: Tue, 28 Mar 2017 15:10:42 -0400
Subject: [PATCH 02/12] allow adding request headers in vhosts and routes

---
 include/envoy/router/router.h                 |  17 ++-
 source/common/http/conn_manager_utility.cc    |  12 +-
 source/common/json/config_schemas.cc          |  30 ++++-
 source/common/router/config_impl.cc           |  25 ++++
 source/common/router/config_impl.h            |  17 +++
 test/common/http/conn_manager_utility_test.cc |   8 ++
 test/common/router/config_impl_test.cc        | 124 ++++++++++++++----
 test/mocks/router/mocks.cc                    |   2 +
 test/mocks/router/mocks.h                     |   6 +
 9 files changed, 210 insertions(+), 31 deletions(-)

diff --git a/include/envoy/router/router.h b/include/envoy/router/router.h
index c2fb4f122915..20e21a3842ec 100644
--- a/include/envoy/router/router.h
+++ b/include/envoy/router/router.h
@@ -138,6 +138,13 @@ class VirtualHost {
    * @return const RateLimitPolicy& the rate limit policy for the virtual host.
    */
   virtual const RateLimitPolicy& rateLimitPolicy() const PURE;
+
+  /**
+   * @return const std::list<std::pair<Http::LowerCaseString, std::string>>&
+   * list of HTTP headers that will be added to every request handled by the virtual host.
+   */
+  virtual const std::list<std::pair<Http::LowerCaseString, std::string>>&
+  requestHeadersToAdd() const PURE;
 };
 
 /**
@@ -226,6 +233,13 @@ class RouteEntry {
    */
   virtual bool autoHostRewrite() const PURE;
 
+  /**
+   * @return const std::list<std::pair<Http::LowerCaseString, std::string>>&
+   * list of HTTP headers that will be added to every request associated with the route.
+   */
+  virtual const std::list<std::pair<Http::LowerCaseString, std::string>>&
+  requestHeadersToAdd() const PURE;
+
   /**
    * @return const std::multimap<std::string, std::string> the opaque configuration associated
    *         with the route
@@ -285,8 +299,7 @@ class Config {
   responseHeadersToAdd() const PURE;
 
   /**
-   * Return a list of header key/value pairs that will be added to every request
-   * proxied to an upstream cluster.
+   * Return a list of HTTP headers that will be added to every request that transits the router.
    */
   virtual const std::list<std::pair<Http::LowerCaseString, std::string>>&
   requestHeadersToAdd() const PURE;
diff --git a/source/common/http/conn_manager_utility.cc b/source/common/http/conn_manager_utility.cc
index 164086cce346..f3e013e2b980 100644
--- a/source/common/http/conn_manager_utility.cc
+++ b/source/common/http/conn_manager_utility.cc
@@ -28,12 +28,6 @@ void ConnectionManagerUtility::mutateRequestHeaders(Http::HeaderMap& request_hea
                                                     const Router::Config& route_config,
                                                     Runtime::RandomGenerator& random,
                                                     Runtime::Loader& runtime) {
-  // Add user-specified headers to the request before scrubbing the request headers.
-  for (const std::pair<Http::LowerCaseString, std::string>& to_add :
-       route_config.requestHeadersToAdd()) {
-    request_headers.addStatic(to_add.first, to_add.second);
-  }
-
   // Clean proxy headers.
   request_headers.removeConnection();
   request_headers.removeEnvoyInternalRequest();
@@ -126,6 +120,12 @@ void ConnectionManagerUtility::mutateRequestHeaders(Http::HeaderMap& request_hea
   if (config.tracingConfig().valid()) {
     Tracing::HttpTracerUtility::mutateHeaders(request_headers, runtime);
   }
+
+  // Add user-specified headers to the request
+  for (const std::pair<Http::LowerCaseString, std::string>& to_add :
+       route_config.requestHeadersToAdd()) {
+    request_headers.addStatic(to_add.first, to_add.second);
+  }
 }
 
 void ConnectionManagerUtility::mutateResponseHeaders(Http::HeaderMap& response_headers,
diff --git a/source/common/json/config_schemas.cc b/source/common/json/config_schemas.cc
index 8866de870d7f..577f7d6a6707 100644
--- a/source/common/json/config_schemas.cc
+++ b/source/common/json/config_schemas.cc
@@ -474,7 +474,21 @@ const std::string Json::Schema::VIRTUAL_HOST_CONFIGURATION_SCHEMA(R"EOF(
         "minItems" : 1,
         "properties" : {"$ref" : "#/definitions/virtual_clusters"}
       },
-      "rate_limits" : {"type" : "array"}
+      "rate_limits" : {"type" : "array"},
+      "request_headers_to_add" : {
+        "type" : "array",
+        "minItems" : 1,
+        "uniqueItems" : true,
+        "items" : {
+          "type": "object",
+          "properties": {
+            "key" : {"type" : "string"},
+            "value" : {"type" : "string"}
+          },
+          "required": ["key", "value"],
+          "additionalProperties": false
+        }
+      }
     },
     "required" : ["name", "domains", "routes"],
     "additionalProperties" : false
@@ -566,6 +580,20 @@ const std::string Json::Schema::ROUTE_ENTRY_CONFIGURATION_SCHEMA(R"EOF(
         "required" : ["header_name"],
         "additionalProperties" : false
       },
+      "request_headers_to_add" : {
+        "type" : "array",
+        "minItems" : 1,
+        "uniqueItems" : true,
+        "items" : {
+          "type": "object",
+          "properties": {
+            "key" : {"type" : "string"},
+            "value" : {"type" : "string"}
+          },
+          "required": ["key", "value"],
+          "additionalProperties": false
+        }
+      },
       "opaque_config" : {
         "type" : "object",
         "additionalProperties" : true
diff --git a/source/common/router/config_impl.cc b/source/common/router/config_impl.cc
index 7921af16ebb1..50b1874ec774 100644
--- a/source/common/router/config_impl.cc
+++ b/source/common/router/config_impl.cc
@@ -136,6 +136,13 @@ RouteEntryImplBase::RouteEntryImplBase(const VirtualHostImpl& vhost, const Json:
   if (route.hasObject("hash_policy")) {
     hash_policy_.reset(new HashPolicyImpl(*route.getObject("hash_policy")));
   }
+
+  if (route.hasObject("request_headers_to_add")) {
+    for (const Json::ObjectPtr& header : route.getObjectArray("request_headers_to_add")) {
+      request_headers_to_add_.push_back(
+          {Http::LowerCaseString(header->getString("key")), header->getString("value")});
+    }
+  }
 }
 
 bool RouteEntryImplBase::matchRoute(const Http::HeaderMap& headers, uint64_t random_value) const {
@@ -154,6 +161,17 @@ bool RouteEntryImplBase::matchRoute(const Http::HeaderMap& headers, uint64_t ran
 const std::string& RouteEntryImplBase::clusterName() const { return cluster_name_; }
 
 void RouteEntryImplBase::finalizeRequestHeaders(Http::HeaderMap& headers) const {
+  // Add user-specified request headers from the vhost and then from the route.
+  // User-specified headers that are applicable across virtual hosts are already
+  // added by the connection manager.
+  for (const std::pair<Http::LowerCaseString, std::string>& to_add : vhost_.requestHeadersToAdd()) {
+    headers.addStatic(to_add.first, to_add.second);
+  }
+
+  for (const std::pair<Http::LowerCaseString, std::string>& to_add : requestHeadersToAdd()) {
+    headers.addStatic(to_add.first, to_add.second);
+  }
+
   if (host_rewrite_.empty()) {
     return;
   }
@@ -381,6 +399,13 @@ VirtualHostImpl::VirtualHostImpl(const Json::Object& virtual_host, Runtime::Load
     throw EnvoyException(fmt::format("unknown 'require_ssl' type '{}'", require_ssl));
   }
 
+  if (virtual_host.hasObject("request_headers_to_add")) {
+    for (const Json::ObjectPtr& header : virtual_host.getObjectArray("request_headers_to_add")) {
+      request_headers_to_add_.push_back(
+          {Http::LowerCaseString(header->getString("key")), header->getString("value")});
+    }
+  }
+
   for (const Json::ObjectPtr& route : virtual_host.getObjectArray("routes")) {
     bool has_prefix = route->hasObject("prefix");
     bool has_path = route->hasObject("path");
diff --git a/source/common/router/config_impl.h b/source/common/router/config_impl.h
index 9a7bc5308bb5..9a5f925b5772 100644
--- a/source/common/router/config_impl.h
+++ b/source/common/router/config_impl.h
@@ -66,6 +66,10 @@ class VirtualHostImpl : public VirtualHost {
   // Router::VirtualHost
   const std::string& name() const override { return name_; }
   const RateLimitPolicy& rateLimitPolicy() const override { return rate_limit_policy_; }
+  const std::list<std::pair<Http::LowerCaseString, std::string>>&
+  requestHeadersToAdd() const override {
+    return request_headers_to_add_;
+  }
 
 private:
   enum class SslRequirements { NONE, EXTERNAL_ONLY, ALL };
@@ -101,6 +105,7 @@ class VirtualHostImpl : public VirtualHost {
   std::vector<VirtualClusterEntry> virtual_clusters_;
   SslRequirements ssl_requirements_;
   const RateLimitPolicyImpl rate_limit_policy_;
+  std::list<std::pair<Http::LowerCaseString, std::string>> request_headers_to_add_;
 };
 
 typedef std::shared_ptr<VirtualHostImpl> VirtualHostSharedPtr;
@@ -184,6 +189,12 @@ class RouteEntryImplBase : public RouteEntry,
   std::chrono::milliseconds timeout() const override { return timeout_; }
   const VirtualHost& virtualHost() const override { return vhost_; }
   bool autoHostRewrite() const override { return auto_host_rewrite_; }
+
+  const std::list<std::pair<Http::LowerCaseString, std::string>>&
+  requestHeadersToAdd() const override {
+    return request_headers_to_add_;
+  }
+
   const std::multimap<std::string, std::string>& opaqueConfig() const override {
     return opaque_config_;
   }
@@ -232,6 +243,11 @@ class RouteEntryImplBase : public RouteEntry,
       return parent_->virtualCluster(headers);
     }
 
+    const std::list<std::pair<Http::LowerCaseString, std::string>>&
+    requestHeadersToAdd() const override {
+      return parent_->requestHeadersToAdd();
+    }
+
     const std::multimap<std::string, std::string>& opaqueConfig() const override {
       return parent_->opaqueConfig();
     }
@@ -298,6 +314,7 @@ class RouteEntryImplBase : public RouteEntry,
   std::vector<ConfigUtility::HeaderData> config_headers_;
   std::vector<WeightedClusterEntrySharedPtr> weighted_clusters_;
   std::unique_ptr<const HashPolicyImpl> hash_policy_;
+  std::list<std::pair<Http::LowerCaseString, std::string>> request_headers_to_add_;
   const std::multimap<std::string, std::string> opaque_config_;
 };
 
diff --git a/test/common/http/conn_manager_utility_test.cc b/test/common/http/conn_manager_utility_test.cc
index 058c549caa3a..51c6a5090145 100644
--- a/test/common/http/conn_manager_utility_test.cc
+++ b/test/common/http/conn_manager_utility_test.cc
@@ -94,6 +94,14 @@ TEST_F(ConnectionManagerUtilityTest, UserAgentDontSet) {
   EXPECT_EQ("true", headers.get_(Headers::get().EnvoyInternalRequest));
 }
 
+TEST_F(ConnectionManagerUtilityTest, AllowAddingCustomRequestHeaders) {
+  route_config_.request_headers_to_add_.push_back({LowerCaseString("to_add"), "foo"});
+  TestHeaderMapImpl headers;
+  ConnectionManagerUtility::mutateRequestHeaders(headers, connection_, config_, route_config_,
+                                                 random_, runtime_);
+  EXPECT_EQ("foo", headers.get_("to_add"));
+}
+
 TEST_F(ConnectionManagerUtilityTest, UserAgentSetWhenIncomingEmpty) {
   Network::Address::Ipv4Instance internal_remote_address("10.0.0.1");
 
diff --git a/test/common/router/config_impl_test.cc b/test/common/router/config_impl_test.cc
index 13436ce3087a..474aca08cb45 100644
--- a/test/common/router/config_impl_test.cc
+++ b/test/common/router/config_impl_test.cc
@@ -28,15 +28,28 @@ TEST(RouteMatcherTest, TestRoutes) {
     {
       "name": "www2",
       "domains": ["lyft.com", "www.lyft.com", "w.lyft.com", "ww.lyft.com", "wwww.lyft.com"],
+      "request_headers_to_add": [
+          {"key": "x-global-header1", "value": "vhost-www2-override"},
+          {"key": "x-vhost-header1", "value": "vhost1-www2"},
+          {"key": "x-vhost-header2", "value": "vhost2-www2"}
+      ],
       "routes": [
         {
           "prefix": "/new_endpoint",
           "prefix_rewrite": "/api/new_endpoint",
-          "cluster": "www2"
+          "cluster": "www2",
+          "request_headers_to_add": [
+             {"key": "x-global-header1", "value": "route-override"},
+             {"key": "x-vhost-header1", "value": "route-override"},
+             {"key": "x-route-header", "value": "route-new_endpoint"}
+          ]
         },
         {
           "path": "/",
-          "cluster": "root_www2"
+          "cluster": "root_www2",
+          "request_headers_to_add": [
+             {"key": "x-route-header", "value": "route-allpath"}
+          ]
         },
         {
           "prefix": "/",
@@ -47,10 +60,17 @@ TEST(RouteMatcherTest, TestRoutes) {
     {
       "name": "www2_staging",
       "domains": ["www-staging.lyft.net", "www-staging-orca.lyft.com"],
+      "request_headers_to_add": [
+          {"key": "x-global-header1", "value": "vhost-www2_staging-override"},
+          {"key": "x-vhost-header1", "value": "vhost1-www2_staging"}
+      ],
       "routes": [
         {
           "prefix": "/",
-          "cluster": "www2_staging"
+          "cluster": "www2_staging",
+          "request_headers_to_add": [
+             {"key": "x-route-header", "value": "route-allprefix"}
+          ]
         }
       ]
     },
@@ -143,8 +163,8 @@ TEST(RouteMatcherTest, TestRoutes) {
   ],
 
   "request_headers_to_add": [
-    {"key": "x-backend-mystery-header", "value": "true"},
-    {"key" : "Connection", "value" : "Keep-Alive"}
+    {"key": "x-global-header1", "value": "global1"},
+    {"key": "x-global-header2", "value": "global2"}
   ]
 }
   )EOF";
@@ -274,6 +294,83 @@ TEST(RouteMatcherTest, TestRoutes) {
     EXPECT_EQ("new_host", headers.get_(Http::Headers::get().Host));
   }
 
+  // Request header manipulation testing.
+  {
+    // Test config in connection manager, virtual host and route.
+    {
+      Http::TestHeaderMapImpl headers = genHeaders("www.lyft.com", "/new_endpoint/foo", "GET");
+      const RouteEntry* route = config.route(headers, 0)->routeEntry();
+      const VirtualHost& vhost = route->virtualHost();
+
+      EXPECT_THAT((std::list<std::pair<Http::LowerCaseString, std::string>>(
+                      {{Http::LowerCaseString("x-global-header1"), "global1"},
+                       {Http::LowerCaseString("x-global-header2"), "global2"}})),
+                  ContainerEq(config.requestHeadersToAdd()));
+
+      EXPECT_THAT((std::list<std::pair<Http::LowerCaseString, std::string>>(
+                      {{Http::LowerCaseString("x-global-header1"), "vhost-www2-override"},
+                       {Http::LowerCaseString("x-vhost-header1"), "vhost1-www2"},
+                       {Http::LowerCaseString("x-vhost-header2"), "vhost2-www2"}})),
+                  ContainerEq(vhost.requestHeadersToAdd()));
+
+      EXPECT_THAT((std::list<std::pair<Http::LowerCaseString, std::string>>(
+                      {{Http::LowerCaseString("x-global-header1"), "route-override"},
+                       {Http::LowerCaseString("x-vhost-header1"), "route-override"},
+                       {Http::LowerCaseString("x-route-header"), "route-new_endpoint"}})),
+                  ContainerEq(route->requestHeadersToAdd()));
+    }
+
+    // Route-level headers with same name overrides virtual host level headers.
+    // Virtual host level headers with same name overrides global headers.
+    {
+      Http::TestHeaderMapImpl headers = genHeaders("www.lyft.com", "/new_endpoint/foo", "GET");
+      const RouteEntry* route = config.route(headers, 0)->routeEntry();
+      const VirtualHost& vhost = route->virtualHost();
+      route->finalizeRequestHeaders(headers);
+      EXPECT_EQ("route-override", headers.get_("x-global-header1"));
+      EXPECT_EQ("global2", headers.get_("x-global-header2"));
+      EXPECT_EQ("route-override", headers.get_("x-vhost-header1"));
+      EXPECT_EQ("vhost2-www2", headers.get_("x-vhost-header2"));
+      EXPECT_EQ("route-new_endpoint", headers.get_("x-route-header"));
+    }
+
+    // Multiple routes can have same route-level headers with different values.
+    {
+      Http::TestHeaderMapImpl headers = genHeaders("www.lyft.com", "/", "GET");
+      const RouteEntry* route = config.route(headers, 0)->routeEntry();
+      const VirtualHost& vhost = route->virtualHost();
+      route->finalizeRequestHeaders(headers);
+      EXPECT_EQ("vhost-www2-override", headers.get_("x-global-header1"));
+      EXPECT_EQ("global2", headers.get_("x-global-header2"));
+      EXPECT_EQ("vhost1-www2", headers.get_("x-vhost-header1"));
+      EXPECT_EQ("vhost2-www2", headers.get_("x-vhost-header2"));
+      EXPECT_EQ("route-allpath", headers.get_("x-route-header"));
+    }
+
+    // Multiple virtual hosts can have same virtual host level headers with different values.
+    {
+      Http::TestHeaderMapImpl headers = genHeaders("www2-staging.lyft.net", "/foo", "GET");
+      const RouteEntry* route = config.route(headers, 0)->routeEntry();
+      const VirtualHost& vhost = route->virtualHost();
+      route->finalizeRequestHeaders(headers);
+      EXPECT_EQ("vhost-www2_staging-override", headers.get_("x-global-header1"));
+      EXPECT_EQ("global2", headers.get_("x-global-header2"));
+      EXPECT_EQ("vhost1-www2_staging", headers.get_("x-vhost-header1"));
+      EXPECT_EQ(nullptr, headers.get_("x-vhost-header2"));
+      EXPECT_EQ("route-allprefix", headers.get_("x-route-header"));
+    }
+
+    // Global headers without overrides.
+    {
+      Http::TestHeaderMapImpl headers = genHeaders("api.lyft.com", "/", "GET");
+      const RouteEntry* route = config.route(headers, 0)->routeEntry();
+      const VirtualHost& vhost = route->virtualHost();
+      route->finalizeRequestHeaders(headers);
+      EXPECT_EQ("global1", headers.get_("x-global-header1"));
+      EXPECT_EQ("global2", headers.get_("x-global-header2"));
+    }
+  }
+
   // Response header manipulation testing.
   EXPECT_THAT(std::list<Http::LowerCaseString>{Http::LowerCaseString("x-lyft-user-id")},
               ContainerEq(config.internalOnlyHeaders()));
@@ -284,23 +381,6 @@ TEST(RouteMatcherTest, TestRoutes) {
                                                 Http::LowerCaseString("x-envoy-virtual-cluster")}),
               ContainerEq(config.responseHeadersToRemove()));
 
-  // Request header manipulation testing
-  {
-    // At route_config level
-    // Check if user-specified request headers are added to config before scrubbing
-    EXPECT_THAT((std::list<std::pair<Http::LowerCaseString, std::string>>(
-                    {{Http::LowerCaseString("x-backend-mystery-header"), "true"},
-                     {Http::LowerCaseString("Connection"), "Keep-Alive"}})),
-                ContainerEq(config.requestHeadersToAdd()));
-
-    Http::TestHeaderMapImpl headers = genHeaders("api.lyft.com", "/host/rewrite/me", "GET");
-    const RouteEntry* route = config.route(headers, 0)->routeEntry();
-    route->finalizeRequestHeaders(headers);
-
-    // check headers after scrubbing
-    EXPECT_EQ(nullptr, headers.get(Http::LowerCaseString("Connection")));
-  }
-
   // Virtual cluster testing.
   {
     Http::TestHeaderMapImpl headers = genHeaders("api.lyft.com", "/rides", "GET");
diff --git a/test/mocks/router/mocks.cc b/test/mocks/router/mocks.cc
index cd71da0c4bba..2729d66770ca 100644
--- a/test/mocks/router/mocks.cc
+++ b/test/mocks/router/mocks.cc
@@ -37,6 +37,7 @@ MockShadowWriter::~MockShadowWriter() {}
 MockVirtualHost::MockVirtualHost() {
   ON_CALL(*this, name()).WillByDefault(ReturnRef(name_));
   ON_CALL(*this, rateLimitPolicy()).WillByDefault(ReturnRef(rate_limit_policy_));
+  ON_CALL(*this, requestHeadersToAdd()).WillByDefault(ReturnRef(request_headers_to_add_));
 }
 
 MockVirtualHost::~MockVirtualHost() {}
@@ -53,6 +54,7 @@ MockRouteEntry::MockRouteEntry() {
   ON_CALL(*this, timeout()).WillByDefault(Return(std::chrono::milliseconds(10)));
   ON_CALL(*this, virtualCluster(_)).WillByDefault(Return(&virtual_cluster_));
   ON_CALL(*this, virtualHost()).WillByDefault(ReturnRef(virtual_host_));
+  ON_CALL(*this, requestHeadersToAdd()).WillByDefault(ReturnRef(request_headers_to_add_));
 }
 
 MockRouteEntry::~MockRouteEntry() {}
diff --git a/test/mocks/router/mocks.h b/test/mocks/router/mocks.h
index d182648f332f..610acf9082bd 100644
--- a/test/mocks/router/mocks.h
+++ b/test/mocks/router/mocks.h
@@ -114,9 +114,12 @@ class MockVirtualHost : public VirtualHost {
   // Router::VirtualHost
   MOCK_CONST_METHOD0(name, const std::string&());
   MOCK_CONST_METHOD0(rateLimitPolicy, const RateLimitPolicy&());
+  MOCK_CONST_METHOD0(requestHeadersToAdd,
+                     const std::list<std::pair<Http::LowerCaseString, std::string>>&());
 
   std::string name_{"fake_vhost"};
   testing::NiceMock<MockRateLimitPolicy> rate_limit_policy_;
+  std::list<std::pair<Http::LowerCaseString, std::string>> request_headers_to_add_;
 };
 
 class MockHashPolicy : public HashPolicy {
@@ -146,9 +149,12 @@ class MockRouteEntry : public RouteEntry {
   MOCK_CONST_METHOD0(virtualHostName, const std::string&());
   MOCK_CONST_METHOD0(virtualHost, const VirtualHost&());
   MOCK_CONST_METHOD0(autoHostRewrite, bool());
+  MOCK_CONST_METHOD0(requestHeadersToAdd,
+                     const std::list<std::pair<Http::LowerCaseString, std::string>>&());
   MOCK_CONST_METHOD0(opaqueConfig, const std::multimap<std::string, std::string>&());
 
   std::string cluster_name_{"fake_cluster"};
+  std::list<std::pair<Http::LowerCaseString, std::string>> request_headers_to_add_;
   std::multimap<std::string, std::string> opaque_config_;
   TestVirtualCluster virtual_cluster_;
   TestRetryPolicy retry_policy_;

From 60c883069a1713cbf8b60173141a4e380551b293 Mon Sep 17 00:00:00 2001
From: Shriram Rajagopalan <shriram@us.ibm.com>
Date: Tue, 28 Mar 2017 17:12:10 -0400
Subject: [PATCH 03/12] docs

---
 .../http_conn_man/route_config/route.rst      | 23 +++++++++++++++++++
 .../route_config/route_config.rst             |  8 ++++++-
 .../http_conn_man/route_config/vhost.rst      | 21 ++++++++++++++++-
 3 files changed, 50 insertions(+), 2 deletions(-)

diff --git a/docs/configuration/http_conn_man/route_config/route.rst b/docs/configuration/http_conn_man/route_config/route.rst
index 1d8b39939c81..87953a35132e 100644
--- a/docs/configuration/http_conn_man/route_config/route.rst
+++ b/docs/configuration/http_conn_man/route_config/route.rst
@@ -28,6 +28,7 @@ next (e.g., redirect, forward, rewrite, etc.).
     "headers": [],
     "rate_limits": [],
     "hash_policy": "{...}",
+    "request_headers_to_add" : [],
     "opaque_config": []
   }
 
@@ -143,6 +144,9 @@ priority
   happen if all the headers in the route are present in the request with the same values (or based
   on presence if the ``value`` field is not in the config).
 
+:ref:`request_headers_to_add <config_http_conn_man_route_table_route_add_req_headers>`
+  *(optional, array)* Specifies a set of headers that will be added to requests matching this route.
+
 :ref:`opaque_config <config_http_conn_man_route_table_opaque_config>`
   *(optional, array)* Specifies a set of optional route configuration values that can be accessed by filters.
 
@@ -338,6 +342,25 @@ header_name
   the request header is not present, the load balancer will use a random number as the hash,
   effectively making the load balancing policy random.
 
+.. _config_http_conn_man_route_table_route_add_req_headers:
+
+Adding custom request headers
+-----------------------------
+
+Custom request headers can be added to a request that matches a specific route. The headers are
+specified in the following form:
+
+.. code-block:: json
+
+  [
+    {"key": "header1", "value": "value1"},
+    {"key": "header2", "value": "value2"}
+  ]
+
+Route-specific headers of same key override
+:ref:`virtual host level headers <config_http_conn_man_route_table_vhost_add_req_headers>`, that in turn
+override global headers specified at :ref:`route_config <config_http_conn_man_route_table_add_req_headers>` level.
+
 .. _config_http_conn_man_route_table_opaque_config:
 
 Opaque Config
diff --git a/docs/configuration/http_conn_man/route_config/route_config.rst b/docs/configuration/http_conn_man/route_config/route_config.rst
index 731d9421fe5d..a2459a543bc0 100644
--- a/docs/configuration/http_conn_man/route_config/route_config.rst
+++ b/docs/configuration/http_conn_man/route_config/route_config.rst
@@ -48,8 +48,10 @@ response_headers_to_remove
 
     ["header1", "header2"]
 
+.. _config_http_conn_man_route_table_add_req_headers:
+
 request_headers_to_add
-  *(optional, array)* Optionally specifies a list of HTTP headers that should be added to each
+  *(optional, array)* Specifies a list of HTTP headers that should be added to each
   request forwarded by the HTTP connection manager. Headers are specified in the following form:
 
   .. code-block:: json
@@ -59,6 +61,10 @@ request_headers_to_add
       {"key": "header2", "value": "value2"}
     ]
 
+  The value of these global request headers can be overridden using the
+  :ref:`virtual host specific headers <config_http_conn_man_route_table_vhost_add_req_headers>`
+  and :ref:`route-specific headers <config_http_conn_man_route_table_route_add_req_headers>`.
+
 .. toctree::
   :hidden:
 
diff --git a/docs/configuration/http_conn_man/route_config/vhost.rst b/docs/configuration/http_conn_man/route_config/vhost.rst
index 740f652675a4..aa050e018d8b 100644
--- a/docs/configuration/http_conn_man/route_config/vhost.rst
+++ b/docs/configuration/http_conn_man/route_config/vhost.rst
@@ -17,7 +17,8 @@ upstream cluster to route to or whether to perform a redirect.
     "routes": [],
     "require_ssl": "...",
     "virtual_clusters": [],
-    "rate_limits": []
+    "rate_limits": [],
+    "request_headers_to_add": []
   }
 
 name
@@ -58,3 +59,21 @@ require_ssl
 :ref:`rate_limits <config_http_conn_man_route_table_rate_limit_config>`
   *(optional, array)* Specifies a set of rate limit configurations that will be applied to the
   virtual host.
+
+.. _config_http_conn_man_route_table_vhost_add_req_headers:
+
+request_headers_to_add
+  *(optional, array)* Specifies a list of HTTP headers that should be added to each
+  request handled by this virtual host. Headers are specified in the following form:
+
+  .. code-block:: json
+
+    [
+      {"key": "header1", "value": "value1"},
+      {"key": "header2", "value": "value2"}
+    ]
+
+  Virtual host level headers override global headers (with same key) specified at
+  :ref:`route_config <config_http_conn_man_route_table_add_req_headers>` level. The value of these
+  virtual host-specific headers can be overridden using the
+  :ref:`route-specific headers <config_http_conn_man_route_table_route_add_req_headers>`.

From 7066968f02ceaa0704d8245c7d8b694e64907ca7 Mon Sep 17 00:00:00 2001
From: Shriram Rajagopalan <shriram@us.ibm.com>
Date: Tue, 28 Mar 2017 17:39:08 -0400
Subject: [PATCH 04/12] request_headers_to_add in async_client

---
 source/common/http/async_client_impl.cc |  4 ++++
 source/common/http/async_client_impl.h  | 10 ++++++++++
 2 files changed, 14 insertions(+)

diff --git a/source/common/http/async_client_impl.cc b/source/common/http/async_client_impl.cc
index c48cf6587889..116900fc63ab 100644
--- a/source/common/http/async_client_impl.cc
+++ b/source/common/http/async_client_impl.cc
@@ -11,6 +11,10 @@ const AsyncStreamImpl::NullRetryPolicy AsyncStreamImpl::RouteEntryImpl::retry_po
 const AsyncStreamImpl::NullShadowPolicy AsyncStreamImpl::RouteEntryImpl::shadow_policy_;
 const AsyncStreamImpl::NullVirtualHost AsyncStreamImpl::RouteEntryImpl::virtual_host_;
 const AsyncStreamImpl::NullRateLimitPolicy AsyncStreamImpl::NullVirtualHost::rate_limit_policy_;
+const std::list<std::pair<Http::LowerCaseString, std::string>>
+    AsyncStreamImpl::NullVirtualHost::request_headers_to_add_;
+const std::list<std::pair<Http::LowerCaseString, std::string>>
+    AsyncStreamImpl::RouteEntryImpl::request_headers_to_add_;
 const std::multimap<std::string, std::string> AsyncStreamImpl::RouteEntryImpl::opaque_config_;
 
 AsyncClientImpl::AsyncClientImpl(const Upstream::ClusterInfo& cluster, Stats::Store& stats_store,
diff --git a/source/common/http/async_client_impl.h b/source/common/http/async_client_impl.h
index 1c26c0276391..4325a85b41d2 100644
--- a/source/common/http/async_client_impl.h
+++ b/source/common/http/async_client_impl.h
@@ -98,8 +98,13 @@ class AsyncStreamImpl : public AsyncClient::Stream,
     // Router::VirtualHost
     const std::string& name() const override { return EMPTY_STRING; }
     const Router::RateLimitPolicy& rateLimitPolicy() const override { return rate_limit_policy_; }
+    const std::list<std::pair<Http::LowerCaseString, std::string>>&
+    requestHeadersToAdd() const override {
+      return request_headers_to_add_;
+    }
 
     static const NullRateLimitPolicy rate_limit_policy_;
+    static const std::list<std::pair<Http::LowerCaseString, std::string>> request_headers_to_add_;
   };
 
   struct RouteEntryImpl : public Router::RouteEntry {
@@ -127,6 +132,10 @@ class AsyncStreamImpl : public AsyncClient::Stream,
     const Router::VirtualCluster* virtualCluster(const Http::HeaderMap&) const override {
       return nullptr;
     }
+    const std::list<std::pair<Http::LowerCaseString, std::string>>&
+    requestHeadersToAdd() const override {
+      return request_headers_to_add_;
+    }
     const std::multimap<std::string, std::string>& opaqueConfig() const override {
       return opaque_config_;
     }
@@ -137,6 +146,7 @@ class AsyncStreamImpl : public AsyncClient::Stream,
     static const NullRetryPolicy retry_policy_;
     static const NullShadowPolicy shadow_policy_;
     static const NullVirtualHost virtual_host_;
+    static const std::list<std::pair<Http::LowerCaseString, std::string>> request_headers_to_add_;
     static const std::multimap<std::string, std::string> opaque_config_;
 
     const std::string& cluster_name_;

From 94663a0deb486389be428f7a4530b1e785670604 Mon Sep 17 00:00:00 2001
From: Shriram Rajagopalan <shriram@us.ibm.com>
Date: Tue, 28 Mar 2017 17:39:28 -0400
Subject: [PATCH 05/12] bug fixes in test

---
 test/common/router/config_impl_test.cc | 6 +-----
 1 file changed, 1 insertion(+), 5 deletions(-)

diff --git a/test/common/router/config_impl_test.cc b/test/common/router/config_impl_test.cc
index 474aca08cb45..5a0576625dd7 100644
--- a/test/common/router/config_impl_test.cc
+++ b/test/common/router/config_impl_test.cc
@@ -325,7 +325,6 @@ TEST(RouteMatcherTest, TestRoutes) {
     {
       Http::TestHeaderMapImpl headers = genHeaders("www.lyft.com", "/new_endpoint/foo", "GET");
       const RouteEntry* route = config.route(headers, 0)->routeEntry();
-      const VirtualHost& vhost = route->virtualHost();
       route->finalizeRequestHeaders(headers);
       EXPECT_EQ("route-override", headers.get_("x-global-header1"));
       EXPECT_EQ("global2", headers.get_("x-global-header2"));
@@ -338,7 +337,6 @@ TEST(RouteMatcherTest, TestRoutes) {
     {
       Http::TestHeaderMapImpl headers = genHeaders("www.lyft.com", "/", "GET");
       const RouteEntry* route = config.route(headers, 0)->routeEntry();
-      const VirtualHost& vhost = route->virtualHost();
       route->finalizeRequestHeaders(headers);
       EXPECT_EQ("vhost-www2-override", headers.get_("x-global-header1"));
       EXPECT_EQ("global2", headers.get_("x-global-header2"));
@@ -351,12 +349,11 @@ TEST(RouteMatcherTest, TestRoutes) {
     {
       Http::TestHeaderMapImpl headers = genHeaders("www2-staging.lyft.net", "/foo", "GET");
       const RouteEntry* route = config.route(headers, 0)->routeEntry();
-      const VirtualHost& vhost = route->virtualHost();
       route->finalizeRequestHeaders(headers);
       EXPECT_EQ("vhost-www2_staging-override", headers.get_("x-global-header1"));
       EXPECT_EQ("global2", headers.get_("x-global-header2"));
       EXPECT_EQ("vhost1-www2_staging", headers.get_("x-vhost-header1"));
-      EXPECT_EQ(nullptr, headers.get_("x-vhost-header2"));
+      EXPECT_FALSE(headers.has("x-vhost-header2"));
       EXPECT_EQ("route-allprefix", headers.get_("x-route-header"));
     }
 
@@ -364,7 +361,6 @@ TEST(RouteMatcherTest, TestRoutes) {
     {
       Http::TestHeaderMapImpl headers = genHeaders("api.lyft.com", "/", "GET");
       const RouteEntry* route = config.route(headers, 0)->routeEntry();
-      const VirtualHost& vhost = route->virtualHost();
       route->finalizeRequestHeaders(headers);
       EXPECT_EQ("global1", headers.get_("x-global-header1"));
       EXPECT_EQ("global2", headers.get_("x-global-header2"));

From 5b162131eb20697cde541e52660bcef2a0faa5ad Mon Sep 17 00:00:00 2001
From: Shriram Rajagopalan <shriram@us.ibm.com>
Date: Thu, 30 Mar 2017 00:01:26 -0400
Subject: [PATCH 06/12] remove public interfaces for request_headers_to_add

---
 include/envoy/router/router.h           | 20 --------------------
 source/common/http/async_client_impl.cc |  4 ----
 source/common/http/async_client_impl.h  | 10 ----------
 test/mocks/router/mocks.cc              |  3 ---
 test/mocks/router/mocks.h               |  9 ---------
 5 files changed, 46 deletions(-)

diff --git a/include/envoy/router/router.h b/include/envoy/router/router.h
index 20e21a3842ec..fb7de37548d3 100644
--- a/include/envoy/router/router.h
+++ b/include/envoy/router/router.h
@@ -138,13 +138,6 @@ class VirtualHost {
    * @return const RateLimitPolicy& the rate limit policy for the virtual host.
    */
   virtual const RateLimitPolicy& rateLimitPolicy() const PURE;
-
-  /**
-   * @return const std::list<std::pair<Http::LowerCaseString, std::string>>&
-   * list of HTTP headers that will be added to every request handled by the virtual host.
-   */
-  virtual const std::list<std::pair<Http::LowerCaseString, std::string>>&
-  requestHeadersToAdd() const PURE;
 };
 
 /**
@@ -233,13 +226,6 @@ class RouteEntry {
    */
   virtual bool autoHostRewrite() const PURE;
 
-  /**
-   * @return const std::list<std::pair<Http::LowerCaseString, std::string>>&
-   * list of HTTP headers that will be added to every request associated with the route.
-   */
-  virtual const std::list<std::pair<Http::LowerCaseString, std::string>>&
-  requestHeadersToAdd() const PURE;
-
   /**
    * @return const std::multimap<std::string, std::string> the opaque configuration associated
    *         with the route
@@ -298,12 +284,6 @@ class Config {
   virtual const std::list<std::pair<Http::LowerCaseString, std::string>>&
   responseHeadersToAdd() const PURE;
 
-  /**
-   * Return a list of HTTP headers that will be added to every request that transits the router.
-   */
-  virtual const std::list<std::pair<Http::LowerCaseString, std::string>>&
-  requestHeadersToAdd() const PURE;
-
   /**
    * Return a list of upstream headers that will be stripped from every response that transits the
    * router.
diff --git a/source/common/http/async_client_impl.cc b/source/common/http/async_client_impl.cc
index 116900fc63ab..c48cf6587889 100644
--- a/source/common/http/async_client_impl.cc
+++ b/source/common/http/async_client_impl.cc
@@ -11,10 +11,6 @@ const AsyncStreamImpl::NullRetryPolicy AsyncStreamImpl::RouteEntryImpl::retry_po
 const AsyncStreamImpl::NullShadowPolicy AsyncStreamImpl::RouteEntryImpl::shadow_policy_;
 const AsyncStreamImpl::NullVirtualHost AsyncStreamImpl::RouteEntryImpl::virtual_host_;
 const AsyncStreamImpl::NullRateLimitPolicy AsyncStreamImpl::NullVirtualHost::rate_limit_policy_;
-const std::list<std::pair<Http::LowerCaseString, std::string>>
-    AsyncStreamImpl::NullVirtualHost::request_headers_to_add_;
-const std::list<std::pair<Http::LowerCaseString, std::string>>
-    AsyncStreamImpl::RouteEntryImpl::request_headers_to_add_;
 const std::multimap<std::string, std::string> AsyncStreamImpl::RouteEntryImpl::opaque_config_;
 
 AsyncClientImpl::AsyncClientImpl(const Upstream::ClusterInfo& cluster, Stats::Store& stats_store,
diff --git a/source/common/http/async_client_impl.h b/source/common/http/async_client_impl.h
index 4325a85b41d2..1c26c0276391 100644
--- a/source/common/http/async_client_impl.h
+++ b/source/common/http/async_client_impl.h
@@ -98,13 +98,8 @@ class AsyncStreamImpl : public AsyncClient::Stream,
     // Router::VirtualHost
     const std::string& name() const override { return EMPTY_STRING; }
     const Router::RateLimitPolicy& rateLimitPolicy() const override { return rate_limit_policy_; }
-    const std::list<std::pair<Http::LowerCaseString, std::string>>&
-    requestHeadersToAdd() const override {
-      return request_headers_to_add_;
-    }
 
     static const NullRateLimitPolicy rate_limit_policy_;
-    static const std::list<std::pair<Http::LowerCaseString, std::string>> request_headers_to_add_;
   };
 
   struct RouteEntryImpl : public Router::RouteEntry {
@@ -132,10 +127,6 @@ class AsyncStreamImpl : public AsyncClient::Stream,
     const Router::VirtualCluster* virtualCluster(const Http::HeaderMap&) const override {
       return nullptr;
     }
-    const std::list<std::pair<Http::LowerCaseString, std::string>>&
-    requestHeadersToAdd() const override {
-      return request_headers_to_add_;
-    }
     const std::multimap<std::string, std::string>& opaqueConfig() const override {
       return opaque_config_;
     }
@@ -146,7 +137,6 @@ class AsyncStreamImpl : public AsyncClient::Stream,
     static const NullRetryPolicy retry_policy_;
     static const NullShadowPolicy shadow_policy_;
     static const NullVirtualHost virtual_host_;
-    static const std::list<std::pair<Http::LowerCaseString, std::string>> request_headers_to_add_;
     static const std::multimap<std::string, std::string> opaque_config_;
 
     const std::string& cluster_name_;
diff --git a/test/mocks/router/mocks.cc b/test/mocks/router/mocks.cc
index 2729d66770ca..3521622eeb45 100644
--- a/test/mocks/router/mocks.cc
+++ b/test/mocks/router/mocks.cc
@@ -37,7 +37,6 @@ MockShadowWriter::~MockShadowWriter() {}
 MockVirtualHost::MockVirtualHost() {
   ON_CALL(*this, name()).WillByDefault(ReturnRef(name_));
   ON_CALL(*this, rateLimitPolicy()).WillByDefault(ReturnRef(rate_limit_policy_));
-  ON_CALL(*this, requestHeadersToAdd()).WillByDefault(ReturnRef(request_headers_to_add_));
 }
 
 MockVirtualHost::~MockVirtualHost() {}
@@ -54,7 +53,6 @@ MockRouteEntry::MockRouteEntry() {
   ON_CALL(*this, timeout()).WillByDefault(Return(std::chrono::milliseconds(10)));
   ON_CALL(*this, virtualCluster(_)).WillByDefault(Return(&virtual_cluster_));
   ON_CALL(*this, virtualHost()).WillByDefault(ReturnRef(virtual_host_));
-  ON_CALL(*this, requestHeadersToAdd()).WillByDefault(ReturnRef(request_headers_to_add_));
 }
 
 MockRouteEntry::~MockRouteEntry() {}
@@ -64,7 +62,6 @@ MockConfig::MockConfig() : route_(new NiceMock<MockRoute>()) {
   ON_CALL(*this, internalOnlyHeaders()).WillByDefault(ReturnRef(internal_only_headers_));
   ON_CALL(*this, responseHeadersToAdd()).WillByDefault(ReturnRef(response_headers_to_add_));
   ON_CALL(*this, responseHeadersToRemove()).WillByDefault(ReturnRef(response_headers_to_remove_));
-  ON_CALL(*this, requestHeadersToAdd()).WillByDefault(ReturnRef(request_headers_to_add_));
 }
 
 MockConfig::~MockConfig() {}
diff --git a/test/mocks/router/mocks.h b/test/mocks/router/mocks.h
index 610acf9082bd..6455306f5eb0 100644
--- a/test/mocks/router/mocks.h
+++ b/test/mocks/router/mocks.h
@@ -114,12 +114,9 @@ class MockVirtualHost : public VirtualHost {
   // Router::VirtualHost
   MOCK_CONST_METHOD0(name, const std::string&());
   MOCK_CONST_METHOD0(rateLimitPolicy, const RateLimitPolicy&());
-  MOCK_CONST_METHOD0(requestHeadersToAdd,
-                     const std::list<std::pair<Http::LowerCaseString, std::string>>&());
 
   std::string name_{"fake_vhost"};
   testing::NiceMock<MockRateLimitPolicy> rate_limit_policy_;
-  std::list<std::pair<Http::LowerCaseString, std::string>> request_headers_to_add_;
 };
 
 class MockHashPolicy : public HashPolicy {
@@ -149,12 +146,9 @@ class MockRouteEntry : public RouteEntry {
   MOCK_CONST_METHOD0(virtualHostName, const std::string&());
   MOCK_CONST_METHOD0(virtualHost, const VirtualHost&());
   MOCK_CONST_METHOD0(autoHostRewrite, bool());
-  MOCK_CONST_METHOD0(requestHeadersToAdd,
-                     const std::list<std::pair<Http::LowerCaseString, std::string>>&());
   MOCK_CONST_METHOD0(opaqueConfig, const std::multimap<std::string, std::string>&());
 
   std::string cluster_name_{"fake_cluster"};
-  std::list<std::pair<Http::LowerCaseString, std::string>> request_headers_to_add_;
   std::multimap<std::string, std::string> opaque_config_;
   TestVirtualCluster virtual_cluster_;
   TestRetryPolicy retry_policy_;
@@ -187,15 +181,12 @@ class MockConfig : public Config {
   MOCK_CONST_METHOD0(responseHeadersToAdd,
                      const std::list<std::pair<Http::LowerCaseString, std::string>>&());
   MOCK_CONST_METHOD0(responseHeadersToRemove, const std::list<Http::LowerCaseString>&());
-  MOCK_CONST_METHOD0(requestHeadersToAdd,
-                     const std::list<std::pair<Http::LowerCaseString, std::string>>&());
   MOCK_CONST_METHOD0(usesRuntime, bool());
 
   std::shared_ptr<MockRoute> route_;
   std::list<Http::LowerCaseString> internal_only_headers_;
   std::list<std::pair<Http::LowerCaseString, std::string>> response_headers_to_add_;
   std::list<Http::LowerCaseString> response_headers_to_remove_;
-  std::list<std::pair<Http::LowerCaseString, std::string>> request_headers_to_add_;
 };
 
 } // Router

From 43df9d1105e307fef90d5967f9190e8edc0f8dbc Mon Sep 17 00:00:00 2001
From: Shriram Rajagopalan <shriram@us.ibm.com>
Date: Thu, 30 Mar 2017 00:02:37 -0400
Subject: [PATCH 07/12] move global req header addition into ConfigImpl

---
 source/common/http/conn_manager_utility.cc    |  6 ---
 source/common/router/config_impl.cc           | 40 ++++++++++-------
 source/common/router/config_impl.h            | 45 +++++++------------
 test/common/http/conn_manager_utility_test.cc |  8 ----
 4 files changed, 39 insertions(+), 60 deletions(-)

diff --git a/source/common/http/conn_manager_utility.cc b/source/common/http/conn_manager_utility.cc
index f3e013e2b980..81e34b6db6e1 100644
--- a/source/common/http/conn_manager_utility.cc
+++ b/source/common/http/conn_manager_utility.cc
@@ -120,12 +120,6 @@ void ConnectionManagerUtility::mutateRequestHeaders(Http::HeaderMap& request_hea
   if (config.tracingConfig().valid()) {
     Tracing::HttpTracerUtility::mutateHeaders(request_headers, runtime);
   }
-
-  // Add user-specified headers to the request
-  for (const std::pair<Http::LowerCaseString, std::string>& to_add :
-       route_config.requestHeadersToAdd()) {
-    request_headers.addStatic(to_add.first, to_add.second);
-  }
 }
 
 void ConnectionManagerUtility::mutateResponseHeaders(Http::HeaderMap& response_headers,
diff --git a/source/common/router/config_impl.cc b/source/common/router/config_impl.cc
index 50b1874ec774..b0d88c55e09e 100644
--- a/source/common/router/config_impl.cc
+++ b/source/common/router/config_impl.cc
@@ -137,6 +137,12 @@ RouteEntryImplBase::RouteEntryImplBase(const VirtualHostImpl& vhost, const Json:
     hash_policy_.reset(new HashPolicyImpl(*route.getObject("hash_policy")));
   }
 
+  // First add req headers from virtual host.
+  for (const std::pair<Http::LowerCaseString, std::string>& keyval : vhost_.requestHeadersToAdd()) {
+    request_headers_to_add_.push_back(keyval);
+  }
+
+  // Then add route specific headers to the list.
   if (route.hasObject("request_headers_to_add")) {
     for (const Json::ObjectPtr& header : route.getObjectArray("request_headers_to_add")) {
       request_headers_to_add_.push_back(
@@ -161,13 +167,6 @@ bool RouteEntryImplBase::matchRoute(const Http::HeaderMap& headers, uint64_t ran
 const std::string& RouteEntryImplBase::clusterName() const { return cluster_name_; }
 
 void RouteEntryImplBase::finalizeRequestHeaders(Http::HeaderMap& headers) const {
-  // Add user-specified request headers from the vhost and then from the route.
-  // User-specified headers that are applicable across virtual hosts are already
-  // added by the connection manager.
-  for (const std::pair<Http::LowerCaseString, std::string>& to_add : vhost_.requestHeadersToAdd()) {
-    headers.addStatic(to_add.first, to_add.second);
-  }
-
   for (const std::pair<Http::LowerCaseString, std::string>& to_add : requestHeadersToAdd()) {
     headers.addStatic(to_add.first, to_add.second);
   }
@@ -382,8 +381,9 @@ RouteConstSharedPtr PathRouteEntryImpl::matches(const Http::HeaderMap& headers,
   return nullptr;
 }
 
-VirtualHostImpl::VirtualHostImpl(const Json::Object& virtual_host, Runtime::Loader& runtime,
-                                 Upstream::ClusterManager& cm, bool validate_clusters)
+VirtualHostImpl::VirtualHostImpl(const Json::Object& virtual_host, const ConfigImpl& httpConfig,
+                                 Runtime::Loader& runtime, Upstream::ClusterManager& cm,
+                                 bool validate_clusters)
     : name_(virtual_host.getString("name")), rate_limit_policy_(virtual_host) {
 
   virtual_host.validateSchema(Json::Schema::VIRTUAL_HOST_CONFIGURATION_SCHEMA);
@@ -399,6 +399,13 @@ VirtualHostImpl::VirtualHostImpl(const Json::Object& virtual_host, Runtime::Load
     throw EnvoyException(fmt::format("unknown 'require_ssl' type '{}'", require_ssl));
   }
 
+  // First add req headers from http connection manager.
+  for (const std::pair<Http::LowerCaseString, std::string>& keyval :
+       httpConfig.requestHeadersToAdd()) {
+    request_headers_to_add_.push_back(keyval);
+  }
+
+  // Then add virtual host specific headers.
   if (virtual_host.hasObject("request_headers_to_add")) {
     for (const Json::ObjectPtr& header : virtual_host.getObjectArray("request_headers_to_add")) {
       request_headers_to_add_.push_back(
@@ -458,14 +465,15 @@ VirtualHostImpl::VirtualClusterEntry::VirtualClusterEntry(const Json::Object& vi
   priority_ = ConfigUtility::parsePriority(virtual_cluster);
 }
 
-RouteMatcher::RouteMatcher(const Json::Object& config, Runtime::Loader& runtime,
-                           Upstream::ClusterManager& cm, bool validate_clusters) {
+RouteMatcher::RouteMatcher(const Json::Object& json_config, const ConfigImpl& httpConfig,
+                           Runtime::Loader& runtime, Upstream::ClusterManager& cm,
+                           bool validate_clusters) {
 
-  config.validateSchema(Json::Schema::ROUTE_CONFIGURATION_SCHEMA);
+  json_config.validateSchema(Json::Schema::ROUTE_CONFIGURATION_SCHEMA);
 
-  for (const Json::ObjectPtr& virtual_host_config : config.getObjectArray("virtual_hosts")) {
+  for (const Json::ObjectPtr& virtual_host_config : json_config.getObjectArray("virtual_hosts")) {
     VirtualHostSharedPtr virtual_host(
-        new VirtualHostImpl(*virtual_host_config, runtime, cm, validate_clusters));
+        new VirtualHostImpl(*virtual_host_config, httpConfig, runtime, cm, validate_clusters));
     uses_runtime_ |= virtual_host->usesRuntime();
 
     for (const std::string& domain : virtual_host_config->getStringArray("domains")) {
@@ -558,8 +566,6 @@ VirtualHostImpl::virtualClusterFromEntries(const Http::HeaderMap& headers) const
 
 ConfigImpl::ConfigImpl(const Json::Object& config, Runtime::Loader& runtime,
                        Upstream::ClusterManager& cm, bool validate_clusters) {
-  route_matcher_.reset(new RouteMatcher(config, runtime, cm, validate_clusters));
-
   if (config.hasObject("internal_only_headers")) {
     for (std::string header : config.getStringArray("internal_only_headers")) {
       internal_only_headers_.push_back(Http::LowerCaseString(header));
@@ -585,6 +591,8 @@ ConfigImpl::ConfigImpl(const Json::Object& config, Runtime::Loader& runtime,
           {Http::LowerCaseString(header->getString("key")), header->getString("value")});
     }
   }
+
+  route_matcher_.reset(new RouteMatcher(config, *this, runtime, cm, validate_clusters));
 }
 
 } // Router
diff --git a/source/common/router/config_impl.h b/source/common/router/config_impl.h
index 9a5f925b5772..83537ccdddbc 100644
--- a/source/common/router/config_impl.h
+++ b/source/common/router/config_impl.h
@@ -50,26 +50,26 @@ class SslRedirectRoute : public Route {
   static const SslRedirector SSL_REDIRECTOR;
 };
 
+class ConfigImpl;
 /**
  * Holds all routing configuration for an entire virtual host.
  */
 class VirtualHostImpl : public VirtualHost {
 public:
-  VirtualHostImpl(const Json::Object& virtual_host, Runtime::Loader& runtime,
-                  Upstream::ClusterManager& cm, bool validate_clusters);
+  VirtualHostImpl(const Json::Object& virtual_host, const ConfigImpl& httpConfig,
+                  Runtime::Loader& runtime, Upstream::ClusterManager& cm, bool validate_clusters);
 
   RouteConstSharedPtr getRouteFromEntries(const Http::HeaderMap& headers,
                                           uint64_t random_value) const;
   bool usesRuntime() const;
   const VirtualCluster* virtualClusterFromEntries(const Http::HeaderMap& headers) const;
+  const std::list<std::pair<Http::LowerCaseString, std::string>>& requestHeadersToAdd() const {
+    return request_headers_to_add_;
+  }
 
   // Router::VirtualHost
   const std::string& name() const override { return name_; }
   const RateLimitPolicy& rateLimitPolicy() const override { return rate_limit_policy_; }
-  const std::list<std::pair<Http::LowerCaseString, std::string>>&
-  requestHeadersToAdd() const override {
-    return request_headers_to_add_;
-  }
 
 private:
   enum class SslRequirements { NONE, EXTERNAL_ONLY, ALL };
@@ -174,6 +174,9 @@ class RouteEntryImplBase : public RouteEntry,
 
   bool matchRoute(const Http::HeaderMap& headers, uint64_t random_value) const;
   void validateClusters(Upstream::ClusterManager& cm) const;
+  const std::list<std::pair<Http::LowerCaseString, std::string>>& requestHeadersToAdd() const {
+    return request_headers_to_add_;
+  }
 
   // Router::RouteEntry
   const std::string& clusterName() const override;
@@ -189,12 +192,6 @@ class RouteEntryImplBase : public RouteEntry,
   std::chrono::milliseconds timeout() const override { return timeout_; }
   const VirtualHost& virtualHost() const override { return vhost_; }
   bool autoHostRewrite() const override { return auto_host_rewrite_; }
-
-  const std::list<std::pair<Http::LowerCaseString, std::string>>&
-  requestHeadersToAdd() const override {
-    return request_headers_to_add_;
-  }
-
   const std::multimap<std::string, std::string>& opaqueConfig() const override {
     return opaque_config_;
   }
@@ -243,11 +240,6 @@ class RouteEntryImplBase : public RouteEntry,
       return parent_->virtualCluster(headers);
     }
 
-    const std::list<std::pair<Http::LowerCaseString, std::string>>&
-    requestHeadersToAdd() const override {
-      return parent_->requestHeadersToAdd();
-    }
-
     const std::multimap<std::string, std::string>& opaqueConfig() const override {
       return parent_->opaqueConfig();
     }
@@ -360,8 +352,8 @@ class PathRouteEntryImpl : public RouteEntryImplBase {
  */
 class RouteMatcher {
 public:
-  RouteMatcher(const Json::Object& config, Runtime::Loader& runtime, Upstream::ClusterManager& cm,
-               bool validate_clusters);
+  RouteMatcher(const Json::Object& config, const ConfigImpl& httpConfig, Runtime::Loader& runtime,
+               Upstream::ClusterManager& cm, bool validate_clusters);
 
   RouteConstSharedPtr route(const Http::HeaderMap& headers, uint64_t random_value) const;
   bool usesRuntime() const { return uses_runtime_; }
@@ -382,6 +374,10 @@ class ConfigImpl : public Config {
   ConfigImpl(const Json::Object& config, Runtime::Loader& runtime, Upstream::ClusterManager& cm,
              bool validate_clusters);
 
+  const std::list<std::pair<Http::LowerCaseString, std::string>>& requestHeadersToAdd() const {
+    return request_headers_to_add_;
+  }
+
   // Router::Config
   RouteConstSharedPtr route(const Http::HeaderMap& headers, uint64_t random_value) const override {
     return route_matcher_->route(headers, random_value);
@@ -400,11 +396,6 @@ class ConfigImpl : public Config {
     return response_headers_to_remove_;
   }
 
-  const std::list<std::pair<Http::LowerCaseString, std::string>>&
-  requestHeadersToAdd() const override {
-    return request_headers_to_add_;
-  }
-
   bool usesRuntime() const override { return route_matcher_->usesRuntime(); }
 
 private:
@@ -436,18 +427,12 @@ class NullConfigImpl : public Config {
     return response_headers_to_remove_;
   }
 
-  const std::list<std::pair<Http::LowerCaseString, std::string>>&
-  requestHeadersToAdd() const override {
-    return request_headers_to_add_;
-  }
-
   bool usesRuntime() const override { return false; }
 
 private:
   std::list<Http::LowerCaseString> internal_only_headers_;
   std::list<std::pair<Http::LowerCaseString, std::string>> response_headers_to_add_;
   std::list<Http::LowerCaseString> response_headers_to_remove_;
-  std::list<std::pair<Http::LowerCaseString, std::string>> request_headers_to_add_;
 };
 
 } // Router
diff --git a/test/common/http/conn_manager_utility_test.cc b/test/common/http/conn_manager_utility_test.cc
index 51c6a5090145..058c549caa3a 100644
--- a/test/common/http/conn_manager_utility_test.cc
+++ b/test/common/http/conn_manager_utility_test.cc
@@ -94,14 +94,6 @@ TEST_F(ConnectionManagerUtilityTest, UserAgentDontSet) {
   EXPECT_EQ("true", headers.get_(Headers::get().EnvoyInternalRequest));
 }
 
-TEST_F(ConnectionManagerUtilityTest, AllowAddingCustomRequestHeaders) {
-  route_config_.request_headers_to_add_.push_back({LowerCaseString("to_add"), "foo"});
-  TestHeaderMapImpl headers;
-  ConnectionManagerUtility::mutateRequestHeaders(headers, connection_, config_, route_config_,
-                                                 random_, runtime_);
-  EXPECT_EQ("foo", headers.get_("to_add"));
-}
-
 TEST_F(ConnectionManagerUtilityTest, UserAgentSetWhenIncomingEmpty) {
   Network::Address::Ipv4Instance internal_remote_address("10.0.0.1");
 

From 79b941b516ab79d2281436e6ae27b10fb72a0df5 Mon Sep 17 00:00:00 2001
From: Shriram Rajagopalan <shriram@us.ibm.com>
Date: Thu, 30 Mar 2017 00:03:06 -0400
Subject: [PATCH 08/12] rework header manipulation tests

---
 test/common/router/config_impl_test.cc | 270 ++++++++++++++-----------
 1 file changed, 149 insertions(+), 121 deletions(-)

diff --git a/test/common/router/config_impl_test.cc b/test/common/router/config_impl_test.cc
index 5a0576625dd7..073a6712c7c1 100644
--- a/test/common/router/config_impl_test.cc
+++ b/test/common/router/config_impl_test.cc
@@ -28,28 +28,15 @@ TEST(RouteMatcherTest, TestRoutes) {
     {
       "name": "www2",
       "domains": ["lyft.com", "www.lyft.com", "w.lyft.com", "ww.lyft.com", "wwww.lyft.com"],
-      "request_headers_to_add": [
-          {"key": "x-global-header1", "value": "vhost-www2-override"},
-          {"key": "x-vhost-header1", "value": "vhost1-www2"},
-          {"key": "x-vhost-header2", "value": "vhost2-www2"}
-      ],
       "routes": [
         {
           "prefix": "/new_endpoint",
           "prefix_rewrite": "/api/new_endpoint",
-          "cluster": "www2",
-          "request_headers_to_add": [
-             {"key": "x-global-header1", "value": "route-override"},
-             {"key": "x-vhost-header1", "value": "route-override"},
-             {"key": "x-route-header", "value": "route-new_endpoint"}
-          ]
+          "cluster": "www2"
         },
         {
           "path": "/",
-          "cluster": "root_www2",
-          "request_headers_to_add": [
-             {"key": "x-route-header", "value": "route-allpath"}
-          ]
+          "cluster": "root_www2"
         },
         {
           "prefix": "/",
@@ -60,17 +47,10 @@ TEST(RouteMatcherTest, TestRoutes) {
     {
       "name": "www2_staging",
       "domains": ["www-staging.lyft.net", "www-staging-orca.lyft.com"],
-      "request_headers_to_add": [
-          {"key": "x-global-header1", "value": "vhost-www2_staging-override"},
-          {"key": "x-vhost-header1", "value": "vhost1-www2_staging"}
-      ],
       "routes": [
         {
           "prefix": "/",
-          "cluster": "www2_staging",
-          "request_headers_to_add": [
-             {"key": "x-route-header", "value": "route-allprefix"}
-          ]
+          "cluster": "www2_staging"
         }
       ]
     },
@@ -147,24 +127,6 @@ TEST(RouteMatcherTest, TestRoutes) {
         {"pattern": "^/users/\\d+$", "method": "PUT", "name": "update_user"},
         {"pattern": "^/users/\\d+/location$", "method": "POST", "name": "ulu"}]
     }
-  ],
-
-  "internal_only_headers": [
-    "x-lyft-user-id"
-  ],
-
-  "response_headers_to_add": [
-    {"key": "x-envoy-upstream-canary", "value": "true"}
-  ],
-
-  "response_headers_to_remove": [
-    "x-envoy-upstream-canary",
-    "x-envoy-virtual-cluster"
-  ],
-
-  "request_headers_to_add": [
-    {"key": "x-global-header1", "value": "global1"},
-    {"key": "x-global-header2", "value": "global2"}
   ]
 }
   )EOF";
@@ -294,32 +256,156 @@ TEST(RouteMatcherTest, TestRoutes) {
     EXPECT_EQ("new_host", headers.get_(Http::Headers::get().Host));
   }
 
-  // Request header manipulation testing.
+  // Virtual cluster testing.
+  {
+    Http::TestHeaderMapImpl headers = genHeaders("api.lyft.com", "/rides", "GET");
+    EXPECT_EQ("other", config.route(headers, 0)->routeEntry()->virtualCluster(headers)->name());
+  }
+  {
+    Http::TestHeaderMapImpl headers = genHeaders("api.lyft.com", "/rides/blah", "POST");
+    EXPECT_EQ("other", config.route(headers, 0)->routeEntry()->virtualCluster(headers)->name());
+  }
+  {
+    Http::TestHeaderMapImpl headers = genHeaders("api.lyft.com", "/rides", "POST");
+    EXPECT_EQ("ride_request",
+              config.route(headers, 0)->routeEntry()->virtualCluster(headers)->name());
+  }
+  {
+    Http::TestHeaderMapImpl headers = genHeaders("api.lyft.com", "/rides/123", "PUT");
+    EXPECT_EQ("update_ride",
+              config.route(headers, 0)->routeEntry()->virtualCluster(headers)->name());
+  }
+  {
+    Http::TestHeaderMapImpl headers =
+        genHeaders("api.lyft.com", "/users/123/chargeaccounts", "POST");
+    EXPECT_EQ("cc_add", config.route(headers, 0)->routeEntry()->virtualCluster(headers)->name());
+  }
+  {
+    Http::TestHeaderMapImpl headers =
+        genHeaders("api.lyft.com", "/users/123/chargeaccounts/hello123", "PUT");
+    EXPECT_EQ("cc_add", config.route(headers, 0)->routeEntry()->virtualCluster(headers)->name());
+  }
+  {
+    Http::TestHeaderMapImpl headers =
+        genHeaders("api.lyft.com", "/users/123/chargeaccounts/validate", "PUT");
+    EXPECT_EQ("other", config.route(headers, 0)->routeEntry()->virtualCluster(headers)->name());
+  }
+  {
+    Http::TestHeaderMapImpl headers = genHeaders("api.lyft.com", "/foo/bar", "PUT");
+    EXPECT_EQ("other", config.route(headers, 0)->routeEntry()->virtualCluster(headers)->name());
+  }
+  {
+    Http::TestHeaderMapImpl headers = genHeaders("api.lyft.com", "/users", "POST");
+    EXPECT_EQ("create_user_login",
+              config.route(headers, 0)->routeEntry()->virtualCluster(headers)->name());
+  }
+  {
+    Http::TestHeaderMapImpl headers = genHeaders("api.lyft.com", "/users/123", "PUT");
+    EXPECT_EQ("update_user",
+              config.route(headers, 0)->routeEntry()->virtualCluster(headers)->name());
+  }
+  {
+    Http::TestHeaderMapImpl headers = genHeaders("api.lyft.com", "/users/123/location", "POST");
+    EXPECT_EQ("ulu", config.route(headers, 0)->routeEntry()->virtualCluster(headers)->name());
+  }
   {
-    // Test config in connection manager, virtual host and route.
+    Http::TestHeaderMapImpl headers = genHeaders("api.lyft.com", "/something/else", "GET");
+    EXPECT_EQ("other", config.route(headers, 0)->routeEntry()->virtualCluster(headers)->name());
+  }
+}
+
+TEST(RouteMatcherTest, TestAddRemoveReqRespHeaders) {
+  std::string json = R"EOF(
+{
+  "virtual_hosts": [
     {
-      Http::TestHeaderMapImpl headers = genHeaders("www.lyft.com", "/new_endpoint/foo", "GET");
-      const RouteEntry* route = config.route(headers, 0)->routeEntry();
-      const VirtualHost& vhost = route->virtualHost();
-
-      EXPECT_THAT((std::list<std::pair<Http::LowerCaseString, std::string>>(
-                      {{Http::LowerCaseString("x-global-header1"), "global1"},
-                       {Http::LowerCaseString("x-global-header2"), "global2"}})),
-                  ContainerEq(config.requestHeadersToAdd()));
-
-      EXPECT_THAT((std::list<std::pair<Http::LowerCaseString, std::string>>(
-                      {{Http::LowerCaseString("x-global-header1"), "vhost-www2-override"},
-                       {Http::LowerCaseString("x-vhost-header1"), "vhost1-www2"},
-                       {Http::LowerCaseString("x-vhost-header2"), "vhost2-www2"}})),
-                  ContainerEq(vhost.requestHeadersToAdd()));
-
-      EXPECT_THAT((std::list<std::pair<Http::LowerCaseString, std::string>>(
-                      {{Http::LowerCaseString("x-global-header1"), "route-override"},
-                       {Http::LowerCaseString("x-vhost-header1"), "route-override"},
-                       {Http::LowerCaseString("x-route-header"), "route-new_endpoint"}})),
-                  ContainerEq(route->requestHeadersToAdd()));
+      "name": "www2",
+      "domains": ["lyft.com", "www.lyft.com", "w.lyft.com", "ww.lyft.com", "wwww.lyft.com"],
+      "request_headers_to_add": [
+          {"key": "x-global-header1", "value": "vhost-www2-override"},
+          {"key": "x-vhost-header1", "value": "vhost1-www2"},
+          {"key": "x-vhost-header2", "value": "vhost2-www2"}
+      ],
+      "routes": [
+        {
+          "prefix": "/new_endpoint",
+          "prefix_rewrite": "/api/new_endpoint",
+          "cluster": "www2",
+          "request_headers_to_add": [
+             {"key": "x-global-header1", "value": "route-override"},
+             {"key": "x-vhost-header1", "value": "route-override"},
+             {"key": "x-route-header", "value": "route-new_endpoint"}
+          ]
+        },
+        {
+          "path": "/",
+          "cluster": "root_www2",
+          "request_headers_to_add": [
+             {"key": "x-route-header", "value": "route-allpath"}
+          ]
+        },
+        {
+          "prefix": "/",
+          "cluster": "www2"
+        }
+      ]
+    },
+    {
+      "name": "www2_staging",
+      "domains": ["www-staging.lyft.net", "www-staging-orca.lyft.com"],
+      "request_headers_to_add": [
+          {"key": "x-global-header1", "value": "vhost-www2_staging-override"},
+          {"key": "x-vhost-header1", "value": "vhost1-www2_staging"}
+      ],
+      "routes": [
+        {
+          "prefix": "/",
+          "cluster": "www2_staging",
+          "request_headers_to_add": [
+             {"key": "x-route-header", "value": "route-allprefix"}
+          ]
+        }
+      ]
+    },
+    {
+      "name": "default",
+      "domains": ["*"],
+      "routes": [
+        {
+          "prefix": "/",
+          "cluster": "instant-server",
+          "timeout_ms": 30000
+        }]
     }
+  ],
+
+  "internal_only_headers": [
+    "x-lyft-user-id"
+  ],
+
+  "response_headers_to_add": [
+    {"key": "x-envoy-upstream-canary", "value": "true"}
+  ],
 
+  "response_headers_to_remove": [
+    "x-envoy-upstream-canary",
+    "x-envoy-virtual-cluster"
+  ],
+
+  "request_headers_to_add": [
+    {"key": "x-global-header1", "value": "global1"},
+    {"key": "x-global-header2", "value": "global2"}
+  ]
+}
+  )EOF";
+
+  Json::ObjectPtr loader = Json::Factory::LoadFromString(json);
+  NiceMock<Runtime::MockLoader> runtime;
+  NiceMock<Upstream::MockClusterManager> cm;
+  ConfigImpl config(*loader, runtime, cm, true);
+
+  // Request header manipulation testing.
+  {
     // Route-level headers with same name overrides virtual host level headers.
     // Virtual host level headers with same name overrides global headers.
     {
@@ -376,63 +462,6 @@ TEST(RouteMatcherTest, TestRoutes) {
   EXPECT_THAT(std::list<Http::LowerCaseString>({Http::LowerCaseString("x-envoy-upstream-canary"),
                                                 Http::LowerCaseString("x-envoy-virtual-cluster")}),
               ContainerEq(config.responseHeadersToRemove()));
-
-  // Virtual cluster testing.
-  {
-    Http::TestHeaderMapImpl headers = genHeaders("api.lyft.com", "/rides", "GET");
-    EXPECT_EQ("other", config.route(headers, 0)->routeEntry()->virtualCluster(headers)->name());
-  }
-  {
-    Http::TestHeaderMapImpl headers = genHeaders("api.lyft.com", "/rides/blah", "POST");
-    EXPECT_EQ("other", config.route(headers, 0)->routeEntry()->virtualCluster(headers)->name());
-  }
-  {
-    Http::TestHeaderMapImpl headers = genHeaders("api.lyft.com", "/rides", "POST");
-    EXPECT_EQ("ride_request",
-              config.route(headers, 0)->routeEntry()->virtualCluster(headers)->name());
-  }
-  {
-    Http::TestHeaderMapImpl headers = genHeaders("api.lyft.com", "/rides/123", "PUT");
-    EXPECT_EQ("update_ride",
-              config.route(headers, 0)->routeEntry()->virtualCluster(headers)->name());
-  }
-  {
-    Http::TestHeaderMapImpl headers =
-        genHeaders("api.lyft.com", "/users/123/chargeaccounts", "POST");
-    EXPECT_EQ("cc_add", config.route(headers, 0)->routeEntry()->virtualCluster(headers)->name());
-  }
-  {
-    Http::TestHeaderMapImpl headers =
-        genHeaders("api.lyft.com", "/users/123/chargeaccounts/hello123", "PUT");
-    EXPECT_EQ("cc_add", config.route(headers, 0)->routeEntry()->virtualCluster(headers)->name());
-  }
-  {
-    Http::TestHeaderMapImpl headers =
-        genHeaders("api.lyft.com", "/users/123/chargeaccounts/validate", "PUT");
-    EXPECT_EQ("other", config.route(headers, 0)->routeEntry()->virtualCluster(headers)->name());
-  }
-  {
-    Http::TestHeaderMapImpl headers = genHeaders("api.lyft.com", "/foo/bar", "PUT");
-    EXPECT_EQ("other", config.route(headers, 0)->routeEntry()->virtualCluster(headers)->name());
-  }
-  {
-    Http::TestHeaderMapImpl headers = genHeaders("api.lyft.com", "/users", "POST");
-    EXPECT_EQ("create_user_login",
-              config.route(headers, 0)->routeEntry()->virtualCluster(headers)->name());
-  }
-  {
-    Http::TestHeaderMapImpl headers = genHeaders("api.lyft.com", "/users/123", "PUT");
-    EXPECT_EQ("update_user",
-              config.route(headers, 0)->routeEntry()->virtualCluster(headers)->name());
-  }
-  {
-    Http::TestHeaderMapImpl headers = genHeaders("api.lyft.com", "/users/123/location", "POST");
-    EXPECT_EQ("ulu", config.route(headers, 0)->routeEntry()->virtualCluster(headers)->name());
-  }
-  {
-    Http::TestHeaderMapImpl headers = genHeaders("api.lyft.com", "/something/else", "GET");
-    EXPECT_EQ("other", config.route(headers, 0)->routeEntry()->virtualCluster(headers)->name());
-  }
 }
 
 TEST(RouteMatcherTest, InvalidPriority) {
@@ -1618,7 +1647,6 @@ TEST(NullConfigImplTest, All) {
   EXPECT_EQ(0UL, config.internalOnlyHeaders().size());
   EXPECT_EQ(0UL, config.responseHeadersToAdd().size());
   EXPECT_EQ(0UL, config.responseHeadersToRemove().size());
-  EXPECT_EQ(0UL, config.requestHeadersToAdd().size());
   EXPECT_FALSE(config.usesRuntime());
 }
 

From acc56df6edd1b4072999ef01e18c527ed3908300 Mon Sep 17 00:00:00 2001
From: Shriram Rajagopalan <shriram@us.ibm.com>
Date: Thu, 30 Mar 2017 23:51:27 -0400
Subject: [PATCH 09/12] remove ability to overwrite request headers

---
 .../http_conn_man/route_config/route.rst      |  9 +++--
 .../route_config/route_config.rst             |  5 +--
 .../http_conn_man/route_config/vhost.rst      |  9 +++--
 source/common/router/config_impl.cc           | 38 +++++++++----------
 source/common/router/config_impl.h            |  8 ++--
 test/common/router/config_impl_test.cc        | 31 ++++-----------
 6 files changed, 44 insertions(+), 56 deletions(-)

diff --git a/docs/configuration/http_conn_man/route_config/route.rst b/docs/configuration/http_conn_man/route_config/route.rst
index 87953a35132e..d7a8670ac46a 100644
--- a/docs/configuration/http_conn_man/route_config/route.rst
+++ b/docs/configuration/http_conn_man/route_config/route.rst
@@ -357,9 +357,12 @@ specified in the following form:
     {"key": "header2", "value": "value2"}
   ]
 
-Route-specific headers of same key override
-:ref:`virtual host level headers <config_http_conn_man_route_table_vhost_add_req_headers>`, that in turn
-override global headers specified at :ref:`route_config <config_http_conn_man_route_table_add_req_headers>` level.
+*Note:* In the presence of duplicate header keys, headers specified at the global
+:ref:`route_config <config_http_conn_man_route_table_add_req_headers>` level take
+precedence over those specified at the virtual host level. Headers specified at the
+:ref:`virtual host level <config_http_conn_man_route_table_vhost_add_req_headers>`
+take precedence over those specified at the individual routes. Within a route, when there are
+multiple headers with same keys, only the first header is taken into consideration.
 
 .. _config_http_conn_man_route_table_opaque_config:
 
diff --git a/docs/configuration/http_conn_man/route_config/route_config.rst b/docs/configuration/http_conn_man/route_config/route_config.rst
index a2459a543bc0..bccfc3ef5df5 100644
--- a/docs/configuration/http_conn_man/route_config/route_config.rst
+++ b/docs/configuration/http_conn_man/route_config/route_config.rst
@@ -61,9 +61,8 @@ request_headers_to_add
       {"key": "header2", "value": "value2"}
     ]
 
-  The value of these global request headers can be overridden using the
-  :ref:`virtual host specific headers <config_http_conn_man_route_table_vhost_add_req_headers>`
-  and :ref:`route-specific headers <config_http_conn_man_route_table_route_add_req_headers>`.
+  *Note:* In the presence of duplicate header keys, only the first header is taken into
+  consideration.
 
 .. toctree::
   :hidden:
diff --git a/docs/configuration/http_conn_man/route_config/vhost.rst b/docs/configuration/http_conn_man/route_config/vhost.rst
index aa050e018d8b..e9a7bfacbc5a 100644
--- a/docs/configuration/http_conn_man/route_config/vhost.rst
+++ b/docs/configuration/http_conn_man/route_config/vhost.rst
@@ -73,7 +73,8 @@ request_headers_to_add
       {"key": "header2", "value": "value2"}
     ]
 
-  Virtual host level headers override global headers (with same key) specified at
-  :ref:`route_config <config_http_conn_man_route_table_add_req_headers>` level. The value of these
-  virtual host-specific headers can be overridden using the
-  :ref:`route-specific headers <config_http_conn_man_route_table_route_add_req_headers>`.
+  *Note:* In the presence of duplicate header keys, headers specified at the global
+  :ref:`route_config <config_http_conn_man_route_table_add_req_headers>` level take
+  precedence over those specified at the virtual host level. Within a virtual host,
+  when there are multiple headers with same keys, only the first header is taken into
+  consideration.
diff --git a/source/common/router/config_impl.cc b/source/common/router/config_impl.cc
index b0d88c55e09e..e23d6c2c8bae 100644
--- a/source/common/router/config_impl.cc
+++ b/source/common/router/config_impl.cc
@@ -137,12 +137,6 @@ RouteEntryImplBase::RouteEntryImplBase(const VirtualHostImpl& vhost, const Json:
     hash_policy_.reset(new HashPolicyImpl(*route.getObject("hash_policy")));
   }
 
-  // First add req headers from virtual host.
-  for (const std::pair<Http::LowerCaseString, std::string>& keyval : vhost_.requestHeadersToAdd()) {
-    request_headers_to_add_.push_back(keyval);
-  }
-
-  // Then add route specific headers to the list.
   if (route.hasObject("request_headers_to_add")) {
     for (const Json::ObjectPtr& header : route.getObjectArray("request_headers_to_add")) {
       request_headers_to_add_.push_back(
@@ -167,6 +161,16 @@ bool RouteEntryImplBase::matchRoute(const Http::HeaderMap& headers, uint64_t ran
 const std::string& RouteEntryImplBase::clusterName() const { return cluster_name_; }
 
 void RouteEntryImplBase::finalizeRequestHeaders(Http::HeaderMap& headers) const {
+  // Add global headers first, followed by virtual host level headers
+  // and finally route-level headers If there are two headers with same
+  // name, we consider only the first one, and ignore the rest.
+  for (const std::pair<Http::LowerCaseString, std::string>& to_add :
+       vhost_.globalHttpConfig().requestHeadersToAdd()) {
+    headers.addStatic(to_add.first, to_add.second);
+  }
+  for (const std::pair<Http::LowerCaseString, std::string>& to_add : vhost_.requestHeadersToAdd()) {
+    headers.addStatic(to_add.first, to_add.second);
+  }
   for (const std::pair<Http::LowerCaseString, std::string>& to_add : requestHeadersToAdd()) {
     headers.addStatic(to_add.first, to_add.second);
   }
@@ -381,10 +385,11 @@ RouteConstSharedPtr PathRouteEntryImpl::matches(const Http::HeaderMap& headers,
   return nullptr;
 }
 
-VirtualHostImpl::VirtualHostImpl(const Json::Object& virtual_host, const ConfigImpl& httpConfig,
-                                 Runtime::Loader& runtime, Upstream::ClusterManager& cm,
-                                 bool validate_clusters)
-    : name_(virtual_host.getString("name")), rate_limit_policy_(virtual_host) {
+VirtualHostImpl::VirtualHostImpl(const Json::Object& virtual_host,
+                                 const ConfigImpl& global_http_config, Runtime::Loader& runtime,
+                                 Upstream::ClusterManager& cm, bool validate_clusters)
+    : name_(virtual_host.getString("name")), rate_limit_policy_(virtual_host),
+      global_http_config_(global_http_config) {
 
   virtual_host.validateSchema(Json::Schema::VIRTUAL_HOST_CONFIGURATION_SCHEMA);
 
@@ -399,13 +404,6 @@ VirtualHostImpl::VirtualHostImpl(const Json::Object& virtual_host, const ConfigI
     throw EnvoyException(fmt::format("unknown 'require_ssl' type '{}'", require_ssl));
   }
 
-  // First add req headers from http connection manager.
-  for (const std::pair<Http::LowerCaseString, std::string>& keyval :
-       httpConfig.requestHeadersToAdd()) {
-    request_headers_to_add_.push_back(keyval);
-  }
-
-  // Then add virtual host specific headers.
   if (virtual_host.hasObject("request_headers_to_add")) {
     for (const Json::ObjectPtr& header : virtual_host.getObjectArray("request_headers_to_add")) {
       request_headers_to_add_.push_back(
@@ -465,15 +463,15 @@ VirtualHostImpl::VirtualClusterEntry::VirtualClusterEntry(const Json::Object& vi
   priority_ = ConfigUtility::parsePriority(virtual_cluster);
 }
 
-RouteMatcher::RouteMatcher(const Json::Object& json_config, const ConfigImpl& httpConfig,
+RouteMatcher::RouteMatcher(const Json::Object& json_config, const ConfigImpl& global_http_config,
                            Runtime::Loader& runtime, Upstream::ClusterManager& cm,
                            bool validate_clusters) {
 
   json_config.validateSchema(Json::Schema::ROUTE_CONFIGURATION_SCHEMA);
 
   for (const Json::ObjectPtr& virtual_host_config : json_config.getObjectArray("virtual_hosts")) {
-    VirtualHostSharedPtr virtual_host(
-        new VirtualHostImpl(*virtual_host_config, httpConfig, runtime, cm, validate_clusters));
+    VirtualHostSharedPtr virtual_host(new VirtualHostImpl(*virtual_host_config, global_http_config,
+                                                          runtime, cm, validate_clusters));
     uses_runtime_ |= virtual_host->usesRuntime();
 
     for (const std::string& domain : virtual_host_config->getStringArray("domains")) {
diff --git a/source/common/router/config_impl.h b/source/common/router/config_impl.h
index 83537ccdddbc..bb6955b43bdd 100644
--- a/source/common/router/config_impl.h
+++ b/source/common/router/config_impl.h
@@ -56,7 +56,7 @@ class ConfigImpl;
  */
 class VirtualHostImpl : public VirtualHost {
 public:
-  VirtualHostImpl(const Json::Object& virtual_host, const ConfigImpl& httpConfig,
+  VirtualHostImpl(const Json::Object& virtual_host, const ConfigImpl& global_http_config,
                   Runtime::Loader& runtime, Upstream::ClusterManager& cm, bool validate_clusters);
 
   RouteConstSharedPtr getRouteFromEntries(const Http::HeaderMap& headers,
@@ -66,6 +66,7 @@ class VirtualHostImpl : public VirtualHost {
   const std::list<std::pair<Http::LowerCaseString, std::string>>& requestHeadersToAdd() const {
     return request_headers_to_add_;
   }
+  const ConfigImpl& globalHttpConfig() const { return global_http_config_; }
 
   // Router::VirtualHost
   const std::string& name() const override { return name_; }
@@ -105,6 +106,7 @@ class VirtualHostImpl : public VirtualHost {
   std::vector<VirtualClusterEntry> virtual_clusters_;
   SslRequirements ssl_requirements_;
   const RateLimitPolicyImpl rate_limit_policy_;
+  const ConfigImpl& global_http_config_;
   std::list<std::pair<Http::LowerCaseString, std::string>> request_headers_to_add_;
 };
 
@@ -352,8 +354,8 @@ class PathRouteEntryImpl : public RouteEntryImplBase {
  */
 class RouteMatcher {
 public:
-  RouteMatcher(const Json::Object& config, const ConfigImpl& httpConfig, Runtime::Loader& runtime,
-               Upstream::ClusterManager& cm, bool validate_clusters);
+  RouteMatcher(const Json::Object& config, const ConfigImpl& global_http_config,
+               Runtime::Loader& runtime, Upstream::ClusterManager& cm, bool validate_clusters);
 
   RouteConstSharedPtr route(const Http::HeaderMap& headers, uint64_t random_value) const;
   bool usesRuntime() const { return uses_runtime_; }
diff --git a/test/common/router/config_impl_test.cc b/test/common/router/config_impl_test.cc
index 073a6712c7c1..a87fbb007ce5 100644
--- a/test/common/router/config_impl_test.cc
+++ b/test/common/router/config_impl_test.cc
@@ -322,9 +322,7 @@ TEST(RouteMatcherTest, TestAddRemoveReqRespHeaders) {
       "name": "www2",
       "domains": ["lyft.com", "www.lyft.com", "w.lyft.com", "ww.lyft.com", "wwww.lyft.com"],
       "request_headers_to_add": [
-          {"key": "x-global-header1", "value": "vhost-www2-override"},
-          {"key": "x-vhost-header1", "value": "vhost1-www2"},
-          {"key": "x-vhost-header2", "value": "vhost2-www2"}
+          {"key": "x-vhost-header1", "value": "vhost1-www2"}
       ],
       "routes": [
         {
@@ -332,8 +330,6 @@ TEST(RouteMatcherTest, TestAddRemoveReqRespHeaders) {
           "prefix_rewrite": "/api/new_endpoint",
           "cluster": "www2",
           "request_headers_to_add": [
-             {"key": "x-global-header1", "value": "route-override"},
-             {"key": "x-vhost-header1", "value": "route-override"},
              {"key": "x-route-header", "value": "route-new_endpoint"}
           ]
         },
@@ -354,7 +350,6 @@ TEST(RouteMatcherTest, TestAddRemoveReqRespHeaders) {
       "name": "www2_staging",
       "domains": ["www-staging.lyft.net", "www-staging-orca.lyft.com"],
       "request_headers_to_add": [
-          {"key": "x-global-header1", "value": "vhost-www2_staging-override"},
           {"key": "x-vhost-header1", "value": "vhost1-www2_staging"}
       ],
       "routes": [
@@ -393,8 +388,7 @@ TEST(RouteMatcherTest, TestAddRemoveReqRespHeaders) {
   ],
 
   "request_headers_to_add": [
-    {"key": "x-global-header1", "value": "global1"},
-    {"key": "x-global-header2", "value": "global2"}
+    {"key": "x-global-header1", "value": "global1"}
   ]
 }
   )EOF";
@@ -406,16 +400,12 @@ TEST(RouteMatcherTest, TestAddRemoveReqRespHeaders) {
 
   // Request header manipulation testing.
   {
-    // Route-level headers with same name overrides virtual host level headers.
-    // Virtual host level headers with same name overrides global headers.
     {
       Http::TestHeaderMapImpl headers = genHeaders("www.lyft.com", "/new_endpoint/foo", "GET");
       const RouteEntry* route = config.route(headers, 0)->routeEntry();
       route->finalizeRequestHeaders(headers);
-      EXPECT_EQ("route-override", headers.get_("x-global-header1"));
-      EXPECT_EQ("global2", headers.get_("x-global-header2"));
-      EXPECT_EQ("route-override", headers.get_("x-vhost-header1"));
-      EXPECT_EQ("vhost2-www2", headers.get_("x-vhost-header2"));
+      EXPECT_EQ("global1", headers.get_("x-global-header1"));
+      EXPECT_EQ("vhost1-www2", headers.get_("x-vhost-header1"));
       EXPECT_EQ("route-new_endpoint", headers.get_("x-route-header"));
     }
 
@@ -424,32 +414,27 @@ TEST(RouteMatcherTest, TestAddRemoveReqRespHeaders) {
       Http::TestHeaderMapImpl headers = genHeaders("www.lyft.com", "/", "GET");
       const RouteEntry* route = config.route(headers, 0)->routeEntry();
       route->finalizeRequestHeaders(headers);
-      EXPECT_EQ("vhost-www2-override", headers.get_("x-global-header1"));
-      EXPECT_EQ("global2", headers.get_("x-global-header2"));
+      EXPECT_EQ("global1", headers.get_("x-global-header1"));
       EXPECT_EQ("vhost1-www2", headers.get_("x-vhost-header1"));
-      EXPECT_EQ("vhost2-www2", headers.get_("x-vhost-header2"));
       EXPECT_EQ("route-allpath", headers.get_("x-route-header"));
     }
 
     // Multiple virtual hosts can have same virtual host level headers with different values.
     {
-      Http::TestHeaderMapImpl headers = genHeaders("www2-staging.lyft.net", "/foo", "GET");
+      Http::TestHeaderMapImpl headers = genHeaders("www-staging.lyft.net", "/foo", "GET");
       const RouteEntry* route = config.route(headers, 0)->routeEntry();
       route->finalizeRequestHeaders(headers);
-      EXPECT_EQ("vhost-www2_staging-override", headers.get_("x-global-header1"));
-      EXPECT_EQ("global2", headers.get_("x-global-header2"));
+      EXPECT_EQ("global1", headers.get_("x-global-header1"));
       EXPECT_EQ("vhost1-www2_staging", headers.get_("x-vhost-header1"));
-      EXPECT_FALSE(headers.has("x-vhost-header2"));
       EXPECT_EQ("route-allprefix", headers.get_("x-route-header"));
     }
 
-    // Global headers without overrides.
+    // Global headers.
     {
       Http::TestHeaderMapImpl headers = genHeaders("api.lyft.com", "/", "GET");
       const RouteEntry* route = config.route(headers, 0)->routeEntry();
       route->finalizeRequestHeaders(headers);
       EXPECT_EQ("global1", headers.get_("x-global-header1"));
-      EXPECT_EQ("global2", headers.get_("x-global-header2"));
     }
   }
 

From 41c87150069350767aca84a9fa76c8dc3f55d1a9 Mon Sep 17 00:00:00 2001
From: Shriram Rajagopalan <shriram@us.ibm.com>
Date: Fri, 31 Mar 2017 18:24:55 -0400
Subject: [PATCH 10/12] addressing PR comments

---
 .../http_conn_man/route_config/route.rst           | 11 +++++------
 .../http_conn_man/route_config/route_config.rst    |  4 ++--
 .../http_conn_man/route_config/vhost.rst           |  7 ++-----
 source/common/router/config_impl.cc                | 14 +++++++-------
 test/common/router/config_impl_test.cc             |  9 ++++++---
 5 files changed, 22 insertions(+), 23 deletions(-)

diff --git a/docs/configuration/http_conn_man/route_config/route.rst b/docs/configuration/http_conn_man/route_config/route.rst
index d7a8670ac46a..748c9ea970a0 100644
--- a/docs/configuration/http_conn_man/route_config/route.rst
+++ b/docs/configuration/http_conn_man/route_config/route.rst
@@ -357,12 +357,11 @@ specified in the following form:
     {"key": "header2", "value": "value2"}
   ]
 
-*Note:* In the presence of duplicate header keys, headers specified at the global
-:ref:`route_config <config_http_conn_man_route_table_add_req_headers>` level take
-precedence over those specified at the virtual host level. Headers specified at the
-:ref:`virtual host level <config_http_conn_man_route_table_vhost_add_req_headers>`
-take precedence over those specified at the individual routes. Within a route, when there are
-multiple headers with same keys, only the first header is taken into consideration.
+*Note:* In the presence of duplicate header keys, headers specified at the
+individual route-level take precedence over those specified at 
+:ref:`virtual host level <config_http_conn_man_route_table_vhost_add_req_headers>`.
+Similarly, headers specified at virtual host level take precedence over
+those specified at the global :ref:`route_config <config_http_conn_man_route_table_add_req_headers>` level.
 
 .. _config_http_conn_man_route_table_opaque_config:
 
diff --git a/docs/configuration/http_conn_man/route_config/route_config.rst b/docs/configuration/http_conn_man/route_config/route_config.rst
index bccfc3ef5df5..40cc3348ae8f 100644
--- a/docs/configuration/http_conn_man/route_config/route_config.rst
+++ b/docs/configuration/http_conn_man/route_config/route_config.rst
@@ -61,8 +61,8 @@ request_headers_to_add
       {"key": "header2", "value": "value2"}
     ]
 
-  *Note:* In the presence of duplicate header keys, only the first header is taken into
-  consideration.
+  *Note:* In the presence of duplicate header keys,
+  :ref:`precendence rules <config_http_conn_man_route_table_route_add_req_headers>` apply.
 
 .. toctree::
   :hidden:
diff --git a/docs/configuration/http_conn_man/route_config/vhost.rst b/docs/configuration/http_conn_man/route_config/vhost.rst
index e9a7bfacbc5a..beb3b90ea9f8 100644
--- a/docs/configuration/http_conn_man/route_config/vhost.rst
+++ b/docs/configuration/http_conn_man/route_config/vhost.rst
@@ -73,8 +73,5 @@ request_headers_to_add
       {"key": "header2", "value": "value2"}
     ]
 
-  *Note:* In the presence of duplicate header keys, headers specified at the global
-  :ref:`route_config <config_http_conn_man_route_table_add_req_headers>` level take
-  precedence over those specified at the virtual host level. Within a virtual host,
-  when there are multiple headers with same keys, only the first header is taken into
-  consideration.
+  *Note:* In the presence of duplicate header keys,
+  :ref:`precendence rules <config_http_conn_man_route_table_route_add_req_headers>` apply.
diff --git a/source/common/router/config_impl.cc b/source/common/router/config_impl.cc
index e23d6c2c8bae..f04964b0092a 100644
--- a/source/common/router/config_impl.cc
+++ b/source/common/router/config_impl.cc
@@ -161,17 +161,17 @@ bool RouteEntryImplBase::matchRoute(const Http::HeaderMap& headers, uint64_t ran
 const std::string& RouteEntryImplBase::clusterName() const { return cluster_name_; }
 
 void RouteEntryImplBase::finalizeRequestHeaders(Http::HeaderMap& headers) const {
-  // Add global headers first, followed by virtual host level headers
-  // and finally route-level headers If there are two headers with same
+  // Add route-level headers first, followed by virtual host level headers
+  // and finally connection manager level headers If there are two headers with same
   // name, we consider only the first one, and ignore the rest.
-  for (const std::pair<Http::LowerCaseString, std::string>& to_add :
-       vhost_.globalHttpConfig().requestHeadersToAdd()) {
+  for (const std::pair<Http::LowerCaseString, std::string>& to_add : requestHeadersToAdd()) {
     headers.addStatic(to_add.first, to_add.second);
   }
   for (const std::pair<Http::LowerCaseString, std::string>& to_add : vhost_.requestHeadersToAdd()) {
     headers.addStatic(to_add.first, to_add.second);
   }
-  for (const std::pair<Http::LowerCaseString, std::string>& to_add : requestHeadersToAdd()) {
+  for (const std::pair<Http::LowerCaseString, std::string>& to_add :
+       vhost_.globalHttpConfig().requestHeadersToAdd()) {
     headers.addStatic(to_add.first, to_add.second);
   }
 
@@ -564,6 +564,8 @@ VirtualHostImpl::virtualClusterFromEntries(const Http::HeaderMap& headers) const
 
 ConfigImpl::ConfigImpl(const Json::Object& config, Runtime::Loader& runtime,
                        Upstream::ClusterManager& cm, bool validate_clusters) {
+  route_matcher_.reset(new RouteMatcher(config, *this, runtime, cm, validate_clusters));
+
   if (config.hasObject("internal_only_headers")) {
     for (std::string header : config.getStringArray("internal_only_headers")) {
       internal_only_headers_.push_back(Http::LowerCaseString(header));
@@ -589,8 +591,6 @@ ConfigImpl::ConfigImpl(const Json::Object& config, Runtime::Loader& runtime,
           {Http::LowerCaseString(header->getString("key")), header->getString("value")});
     }
   }
-
-  route_matcher_.reset(new RouteMatcher(config, *this, runtime, cm, validate_clusters));
 }
 
 } // Router
diff --git a/test/common/router/config_impl_test.cc b/test/common/router/config_impl_test.cc
index a87fbb007ce5..5a8761ce3979 100644
--- a/test/common/router/config_impl_test.cc
+++ b/test/common/router/config_impl_test.cc
@@ -322,6 +322,7 @@ TEST(RouteMatcherTest, TestAddRemoveReqRespHeaders) {
       "name": "www2",
       "domains": ["lyft.com", "www.lyft.com", "w.lyft.com", "ww.lyft.com", "wwww.lyft.com"],
       "request_headers_to_add": [
+          {"key": "x-global-header1", "value": "vhost-override"},
           {"key": "x-vhost-header1", "value": "vhost1-www2"}
       ],
       "routes": [
@@ -330,6 +331,8 @@ TEST(RouteMatcherTest, TestAddRemoveReqRespHeaders) {
           "prefix_rewrite": "/api/new_endpoint",
           "cluster": "www2",
           "request_headers_to_add": [
+             {"key": "x-global-header1", "value": "route-override"},
+             {"key": "x-vhost-header1", "value": "route-override"},
              {"key": "x-route-header", "value": "route-new_endpoint"}
           ]
         },
@@ -404,8 +407,8 @@ TEST(RouteMatcherTest, TestAddRemoveReqRespHeaders) {
       Http::TestHeaderMapImpl headers = genHeaders("www.lyft.com", "/new_endpoint/foo", "GET");
       const RouteEntry* route = config.route(headers, 0)->routeEntry();
       route->finalizeRequestHeaders(headers);
-      EXPECT_EQ("global1", headers.get_("x-global-header1"));
-      EXPECT_EQ("vhost1-www2", headers.get_("x-vhost-header1"));
+      EXPECT_EQ("route-override", headers.get_("x-global-header1"));
+      EXPECT_EQ("route-override", headers.get_("x-vhost-header1"));
       EXPECT_EQ("route-new_endpoint", headers.get_("x-route-header"));
     }
 
@@ -414,7 +417,7 @@ TEST(RouteMatcherTest, TestAddRemoveReqRespHeaders) {
       Http::TestHeaderMapImpl headers = genHeaders("www.lyft.com", "/", "GET");
       const RouteEntry* route = config.route(headers, 0)->routeEntry();
       route->finalizeRequestHeaders(headers);
-      EXPECT_EQ("global1", headers.get_("x-global-header1"));
+      EXPECT_EQ("vhost-override", headers.get_("x-global-header1"));
       EXPECT_EQ("vhost1-www2", headers.get_("x-vhost-header1"));
       EXPECT_EQ("route-allpath", headers.get_("x-route-header"));
     }

From 1f3876431c7a597072b58d11874c37de6df5e706 Mon Sep 17 00:00:00 2001
From: Shriram Rajagopalan <shriram@us.ibm.com>
Date: Sun, 2 Apr 2017 22:20:50 -0400
Subject: [PATCH 11/12] addressing nits on comments

---
 source/common/router/config_impl.cc    | 6 +++---
 test/common/router/config_impl_test.cc | 3 ++-
 2 files changed, 5 insertions(+), 4 deletions(-)

diff --git a/source/common/router/config_impl.cc b/source/common/router/config_impl.cc
index f04964b0092a..1aa3780b3de9 100644
--- a/source/common/router/config_impl.cc
+++ b/source/common/router/config_impl.cc
@@ -161,9 +161,9 @@ bool RouteEntryImplBase::matchRoute(const Http::HeaderMap& headers, uint64_t ran
 const std::string& RouteEntryImplBase::clusterName() const { return cluster_name_; }
 
 void RouteEntryImplBase::finalizeRequestHeaders(Http::HeaderMap& headers) const {
-  // Add route-level headers first, followed by virtual host level headers
-  // and finally connection manager level headers If there are two headers with same
-  // name, we consider only the first one, and ignore the rest.
+  // For user-specified request headers, route-level headers of take precedence over
+  // virtual host level headers of same name. Similarly, virtual host level headers
+  // take precendence over connection manager level headers of same name.
   for (const std::pair<Http::LowerCaseString, std::string>& to_add : requestHeadersToAdd()) {
     headers.addStatic(to_add.first, to_add.second);
   }
diff --git a/test/common/router/config_impl_test.cc b/test/common/router/config_impl_test.cc
index 5a8761ce3979..38c1c4432de1 100644
--- a/test/common/router/config_impl_test.cc
+++ b/test/common/router/config_impl_test.cc
@@ -373,7 +373,8 @@ TEST(RouteMatcherTest, TestAddRemoveReqRespHeaders) {
           "prefix": "/",
           "cluster": "instant-server",
           "timeout_ms": 30000
-        }]
+        }
+      ]
     }
   ],
 

From dad30f638f329a56a4a9c801bf31e4a99bf9ea46 Mon Sep 17 00:00:00 2001
From: Shriram Rajagopalan <shriram@us.ibm.com>
Date: Mon, 3 Apr 2017 16:14:16 -0400
Subject: [PATCH 12/12] renaming and doc fixes for http req_headers_to_add

---
 .../http_conn_man/route_config/route.rst          |  9 ++++-----
 source/common/router/config_impl.cc               | 15 +++++++--------
 source/common/router/config_impl.h                |  6 +++---
 3 files changed, 14 insertions(+), 16 deletions(-)

diff --git a/docs/configuration/http_conn_man/route_config/route.rst b/docs/configuration/http_conn_man/route_config/route.rst
index 748c9ea970a0..482f3ca67770 100644
--- a/docs/configuration/http_conn_man/route_config/route.rst
+++ b/docs/configuration/http_conn_man/route_config/route.rst
@@ -357,11 +357,10 @@ specified in the following form:
     {"key": "header2", "value": "value2"}
   ]
 
-*Note:* In the presence of duplicate header keys, headers specified at the
-individual route-level take precedence over those specified at 
-:ref:`virtual host level <config_http_conn_man_route_table_vhost_add_req_headers>`.
-Similarly, headers specified at virtual host level take precedence over
-those specified at the global :ref:`route_config <config_http_conn_man_route_table_add_req_headers>` level.
+*Note:* Headers are appended to requests in the following order:
+route-level headers, :ref:`virtual host level <config_http_conn_man_route_table_vhost_add_req_headers>`
+headers and finally global :ref:`route_config <config_http_conn_man_route_table_add_req_headers>`
+level headers.
 
 .. _config_http_conn_man_route_table_opaque_config:
 
diff --git a/source/common/router/config_impl.cc b/source/common/router/config_impl.cc
index 1aa3780b3de9..d48bfc58062e 100644
--- a/source/common/router/config_impl.cc
+++ b/source/common/router/config_impl.cc
@@ -161,9 +161,8 @@ bool RouteEntryImplBase::matchRoute(const Http::HeaderMap& headers, uint64_t ran
 const std::string& RouteEntryImplBase::clusterName() const { return cluster_name_; }
 
 void RouteEntryImplBase::finalizeRequestHeaders(Http::HeaderMap& headers) const {
-  // For user-specified request headers, route-level headers of take precedence over
-  // virtual host level headers of same name. Similarly, virtual host level headers
-  // take precendence over connection manager level headers of same name.
+  // Append user-specified request headers in the following order: route-level headers,
+  // virtual host level headers and finally global connection manager level headers.
   for (const std::pair<Http::LowerCaseString, std::string>& to_add : requestHeadersToAdd()) {
     headers.addStatic(to_add.first, to_add.second);
   }
@@ -171,7 +170,7 @@ void RouteEntryImplBase::finalizeRequestHeaders(Http::HeaderMap& headers) const
     headers.addStatic(to_add.first, to_add.second);
   }
   for (const std::pair<Http::LowerCaseString, std::string>& to_add :
-       vhost_.globalHttpConfig().requestHeadersToAdd()) {
+       vhost_.globalRouteConfig().requestHeadersToAdd()) {
     headers.addStatic(to_add.first, to_add.second);
   }
 
@@ -386,10 +385,10 @@ RouteConstSharedPtr PathRouteEntryImpl::matches(const Http::HeaderMap& headers,
 }
 
 VirtualHostImpl::VirtualHostImpl(const Json::Object& virtual_host,
-                                 const ConfigImpl& global_http_config, Runtime::Loader& runtime,
+                                 const ConfigImpl& global_route_config, Runtime::Loader& runtime,
                                  Upstream::ClusterManager& cm, bool validate_clusters)
     : name_(virtual_host.getString("name")), rate_limit_policy_(virtual_host),
-      global_http_config_(global_http_config) {
+      global_route_config_(global_route_config) {
 
   virtual_host.validateSchema(Json::Schema::VIRTUAL_HOST_CONFIGURATION_SCHEMA);
 
@@ -463,14 +462,14 @@ VirtualHostImpl::VirtualClusterEntry::VirtualClusterEntry(const Json::Object& vi
   priority_ = ConfigUtility::parsePriority(virtual_cluster);
 }
 
-RouteMatcher::RouteMatcher(const Json::Object& json_config, const ConfigImpl& global_http_config,
+RouteMatcher::RouteMatcher(const Json::Object& json_config, const ConfigImpl& global_route_config,
                            Runtime::Loader& runtime, Upstream::ClusterManager& cm,
                            bool validate_clusters) {
 
   json_config.validateSchema(Json::Schema::ROUTE_CONFIGURATION_SCHEMA);
 
   for (const Json::ObjectPtr& virtual_host_config : json_config.getObjectArray("virtual_hosts")) {
-    VirtualHostSharedPtr virtual_host(new VirtualHostImpl(*virtual_host_config, global_http_config,
+    VirtualHostSharedPtr virtual_host(new VirtualHostImpl(*virtual_host_config, global_route_config,
                                                           runtime, cm, validate_clusters));
     uses_runtime_ |= virtual_host->usesRuntime();
 
diff --git a/source/common/router/config_impl.h b/source/common/router/config_impl.h
index bb6955b43bdd..3c2251e16b31 100644
--- a/source/common/router/config_impl.h
+++ b/source/common/router/config_impl.h
@@ -56,7 +56,7 @@ class ConfigImpl;
  */
 class VirtualHostImpl : public VirtualHost {
 public:
-  VirtualHostImpl(const Json::Object& virtual_host, const ConfigImpl& global_http_config,
+  VirtualHostImpl(const Json::Object& virtual_host, const ConfigImpl& global_route_config,
                   Runtime::Loader& runtime, Upstream::ClusterManager& cm, bool validate_clusters);
 
   RouteConstSharedPtr getRouteFromEntries(const Http::HeaderMap& headers,
@@ -66,7 +66,7 @@ class VirtualHostImpl : public VirtualHost {
   const std::list<std::pair<Http::LowerCaseString, std::string>>& requestHeadersToAdd() const {
     return request_headers_to_add_;
   }
-  const ConfigImpl& globalHttpConfig() const { return global_http_config_; }
+  const ConfigImpl& globalRouteConfig() const { return global_route_config_; }
 
   // Router::VirtualHost
   const std::string& name() const override { return name_; }
@@ -106,7 +106,7 @@ class VirtualHostImpl : public VirtualHost {
   std::vector<VirtualClusterEntry> virtual_clusters_;
   SslRequirements ssl_requirements_;
   const RateLimitPolicyImpl rate_limit_policy_;
-  const ConfigImpl& global_http_config_;
+  const ConfigImpl& global_route_config_;
   std::list<std::pair<Http::LowerCaseString, std::string>> request_headers_to_add_;
 };
 
