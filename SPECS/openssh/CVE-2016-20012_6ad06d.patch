From 6ad06d5c3b8e3f59e28ec31fa7c076e7f6b8b32b Mon Sep 17 00:00:00 2001
From: Manfred Kaiser <manfred.kaiser@bmlv.gv.at>
Date: Wed, 15 Sep 2021 12:17:33 +0200
Subject: [PATCH] publickey-auth: disable SSH_MSG_USERAUTH_REQUEST without
 signature

---
 auth2-pubkey.c |  3 +++
 servconf.c     | 12 +++++++++++-
 servconf.h     |  1 +
 sshconnect2.c  |  2 +-
 sshd_config    |  1 +
 sshd_config.5  |  5 +++++
 6 files changed, 22 insertions(+), 2 deletions(-)

diff --git a/auth2-pubkey.c b/auth2-pubkey.c
index 9e32259a5c..b4e28a1c8e 100644
--- a/auth2-pubkey.c
+++ b/auth2-pubkey.c
@@ -264,6 +264,9 @@ userauth_pubkey(struct ssh *ssh)
 		 * if a user is not allowed to login. is this an
 		 * issue? -markus
 		 */
+		debug_f("options.pubkey_disable_pk_check %d", options.pubkey_disable_pk_check);
+		if (options.pubkey_disable_pk_check)
+			goto done;
 		if (PRIVSEP(user_key_allowed(ssh, pw, key, 0, NULL))) {
 			if ((r = sshpkt_start(ssh, SSH2_MSG_USERAUTH_PK_OK))
 			    != 0 ||
diff --git a/servconf.c b/servconf.c
index b2fbf0b2a3..51c0a627fc 100644
--- a/servconf.c
+++ b/servconf.c
@@ -129,6 +129,7 @@ initialize_server_options(ServerOptions *options)
 	options->hostbased_accepted_algos = NULL;
 	options->hostkeyalgorithms = NULL;
 	options->pubkey_authentication = -1;
+	options->pubkey_disable_pk_check = -1;
 	options->pubkey_auth_options = -1;
 	options->pubkey_accepted_algos = NULL;
 	options->kerberos_authentication = -1;
@@ -344,6 +345,8 @@ fill_default_server_options(ServerOptions *options)
 		options->hostbased_uses_name_from_packet_only = 0;
 	if (options->pubkey_authentication == -1)
 		options->pubkey_authentication = 1;
+	if(options->pubkey_disable_pk_check == -1)
+		options->pubkey_disable_pk_check = 1;
 	if (options->pubkey_auth_options == -1)
 		options->pubkey_auth_options = 0;
 	if (options->kerberos_authentication == -1)
@@ -498,7 +501,7 @@ typedef enum {
 	sPermitUserEnvironment, sAllowTcpForwarding, sCompression,
 	sRekeyLimit, sAllowUsers, sDenyUsers, sAllowGroups, sDenyGroups,
 	sIgnoreUserKnownHosts, sCiphers, sMacs, sPidFile, sModuliFile,
-	sGatewayPorts, sPubkeyAuthentication, sPubkeyAcceptedAlgorithms,
+	sGatewayPorts, sPubkeyAuthentication, sPubkeyDisablePKCheck, sPubkeyAcceptedAlgorithms,
 	sXAuthLocation, sSubsystem, sMaxStartups, sMaxAuthTries, sMaxSessions,
 	sBanner, sUseDNS, sHostbasedAuthentication,
 	sHostbasedUsesNameFromPacketOnly, sHostbasedAcceptedAlgorithms,
@@ -562,6 +565,7 @@ static struct {
 	{ "hostkeyalgorithms", sHostKeyAlgorithms, SSHCFG_GLOBAL },
 	{ "rsaauthentication", sDeprecated, SSHCFG_ALL },
 	{ "pubkeyauthentication", sPubkeyAuthentication, SSHCFG_ALL },
+	{ "pubkeydisablepkcheck", sPubkeyDisablePKCheck, SSHCFG_ALL },
 	{ "pubkeyacceptedalgorithms", sPubkeyAcceptedAlgorithms, SSHCFG_ALL },
 	{ "pubkeyacceptedkeytypes", sPubkeyAcceptedAlgorithms, SSHCFG_ALL }, /* obsolete */
 	{ "pubkeyauthoptions", sPubkeyAuthOptions, SSHCFG_ALL },
@@ -1531,6 +1535,10 @@ process_server_config_line_depth(ServerOptions *options, char *line,
 		intptr = &options->pubkey_authentication;
 		goto parse_flag;
 
+	case sPubkeyDisablePKCheck:
+		intptr = &options->pubkey_disable_pk_check;
+		goto parse_flag;
+
 	case sPubkeyAcceptedAlgorithms:
 		charptr = &options->pubkey_accepted_algos;
 		goto parse_pubkey_algos;
@@ -2576,6 +2584,7 @@ copy_set_server_options(ServerOptions *dst, ServerOptions *src, int preauth)
 	M_CP_INTOPT(password_authentication);
 	M_CP_INTOPT(gss_authentication);
 	M_CP_INTOPT(pubkey_authentication);
+	M_CP_INTOPT(pubkey_disable_pk_check);
 	M_CP_INTOPT(pubkey_auth_options);
 	M_CP_INTOPT(kerberos_authentication);
 	M_CP_INTOPT(hostbased_authentication);
@@ -2880,6 +2889,7 @@ dump_config(ServerOptions *o)
 	dump_cfg_fmtint(sHostbasedUsesNameFromPacketOnly,
 	    o->hostbased_uses_name_from_packet_only);
 	dump_cfg_fmtint(sPubkeyAuthentication, o->pubkey_authentication);
+	dump_cfg_fmtint(sPubkeyDisablePKCheck, o->pubkey_disable_pk_check);
 #ifdef KRB5
 	dump_cfg_fmtint(sKerberosAuthentication, o->kerberos_authentication);
 	dump_cfg_fmtint(sKerberosOrLocalPasswd, o->kerberos_or_local_passwd);
diff --git a/servconf.h b/servconf.h
index dd5cbc15cd..6ef35444dd 100644
--- a/servconf.h
+++ b/servconf.h
@@ -127,6 +127,7 @@ typedef struct {
 	char   *hostkeyalgorithms;	/* SSH2 server key types */
 	char   *ca_sign_algorithms;	/* Allowed CA signature algorithms */
 	int     pubkey_authentication;	/* If true, permit ssh2 pubkey authentication. */
+	int		pubkey_disable_pk_check;	/* If true, permit ssh2 pubkey check. */
 	char   *pubkey_accepted_algos;	/* Signature algos allowed for pubkey */
 	int	pubkey_auth_options;	/* -1 or mask of PUBKEYAUTH_* flags */
 	int     kerberos_authentication;	/* If true, permit Kerberos
diff --git a/sshconnect2.c b/sshconnect2.c
index fea50fab61..eff50e3fc8 100644
--- a/sshconnect2.c
+++ b/sshconnect2.c
@@ -1849,7 +1849,7 @@ userauth_pubkey(struct ssh *ssh)
 		 * encrypted keys we cannot do this and have to load the
 		 * private key instead
 		 */
-		if (id->key != NULL) {
+		if (id->key != NULL && !options.identities_only) {
 			if (try_identity(ssh, id)) {
 				ident = format_identity(id);
 				debug("Offering public key: %s", ident);
diff --git a/sshd_config b/sshd_config
index c423eba1b2..11e2fe362f 100644
--- a/sshd_config
+++ b/sshd_config
@@ -35,6 +35,7 @@
 #MaxSessions 10
 
 #PubkeyAuthentication yes
+#PubkeyDisablePKCheck no
 
 # The default is to check both .ssh/authorized_keys and .ssh/authorized_keys2
 # but this is overridden so installations will only check .ssh/authorized_keys
diff --git a/sshd_config.5 b/sshd_config.5
index a8d0545c31..f4f486f89c 100644
--- a/sshd_config.5
+++ b/sshd_config.5
@@ -1220,6 +1220,7 @@ Available keywords are
 .Cm PermitUserRC ,
 .Cm PubkeyAcceptedAlgorithms ,
 .Cm PubkeyAuthentication ,
+.Cm PubkeyDisablePKCheck ,
 .Cm RekeyLimit ,
 .Cm RevokedKeys ,
 .Cm RDomain ,
@@ -1570,6 +1571,10 @@ options have any effect for other, non-FIDO, public key types.
 Specifies whether public key authentication is allowed.
 The default is
 .Cm yes .
+.It Cm PubkeyDisablePKCheck
+Disables publickey lookups during publickey authentication. Only recommended for high security environments.
+The default is
+.CM no .
 .It Cm RekeyLimit
 Specifies the maximum amount of data that may be transmitted before the
 session key is renegotiated, optionally followed by a maximum amount of
