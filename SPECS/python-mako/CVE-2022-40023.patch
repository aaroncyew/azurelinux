From cbd0165d1b3370aca2f19e64c872024aadd9deee Mon Sep 17 00:00:00 2001
From: Pawel Winogrodzki <pawelwi@microsoft.com>
Date: Thu, 29 Sep 2022 16:37:11 -0700
Subject: [PATCH] Fixing CVE-2022-40023.

---
 mako/lexer.py      | 13 +++++++++----
 test/test_lexer.py | 23 +++++++++++++++++------
 2 files changed, 26 insertions(+), 10 deletions(-)

diff --git a/mako/lexer.py b/mako/lexer.py
index cf4187f..90ddac5 100644
--- a/mako/lexer.py
+++ b/mako/lexer.py
@@ -271,21 +271,26 @@ class Lexer(object):
         return self.template
 
     def match_tag_start(self):
-        match = self.match(r'''
+        reg = r"""
             \<%     # opening tag
 
             ([\w\.\:]+)   # keyword
 
-            ((?:\s+\w+|\s*=\s*|".*?"|'.*?')*)  # attrname, = \
+            ((?:\s+\w+|\s*=\s*|"[^"]*?"|'[^']*?'|\s*,\s*)*)  # attrname, = \
                                                #        sign, string expression
+                                               # comma is for backwards compat
+                                               # identified in #366
 
             \s*     # more whitespace
 
             (/)?>   # closing
 
-            ''',
+        """
 
-                           re.I | re.S | re.X)
+        match = self.match(
+            reg,
+            re.I | re.S | re.X,
+        )
 
         if match:
             keyword, attr, isend = match.groups()
diff --git a/test/test_lexer.py b/test/test_lexer.py
index 06ebb05..17bd7dd 100644
--- a/test/test_lexer.py
+++ b/test/test_lexer.py
@@ -3,7 +3,8 @@ from mako import exceptions, util, compat
 from test.util import flatten_result
 from mako.template import Template
 import re
-from test import TemplateTest, eq_, assert_raises_message
+import pytest
+from test import TemplateTest, eq_, assert_raises, assert_raises_message
 
 # create fake parsetree classes which are constructed
 # exactly as the repr() of a real parsetree object.
@@ -105,6 +106,10 @@ class LexerTest(TemplateTest):
         self.assertRaises(exceptions.CompileException,
                           Lexer(template).parse)
 
+    def test_tag_many_quotes(self):
+        template = "<%0" + '"' * 3000
+        assert_raises(exceptions.SyntaxException, Lexer(template).parse)
+
     def test_unmatched_tag(self):
         template = \
             """
@@ -304,10 +309,16 @@ class LexerTest(TemplateTest):
                       , {'expr': 'foo<bar and hoho>lala and "x" + "y"'
                       }, (3, 13), []), Text('\n        ', (3, 64))]))
 
-    def test_pagetag(self):
-        template = \
-            """
-            <%page cached="True", args="a, b"/>
+    @pytest.mark.parametrize("comma,numchars", [(",", 48), ("", 47)])
+    def test_pagetag(self, comma, numchars):
+        # note that the comma here looks like:
+        # <%page cached="True", args="a, b"/>
+        # that's what this test has looked like for decades, however, the
+        # comma there is not actually the right syntax.  When issue #366
+        # was fixed, the reg was altered to accommodate for this comma to allow
+        # backwards compat
+        template = f"""
+            <%page cached="True"{comma} args="a, b"/>
 
             some template
         """
@@ -319,7 +330,7 @@ class LexerTest(TemplateTest):
 
             some template
         ''',
-                      (2, 48))]))
+                      (2, numchars))]))
 
     def test_nesting(self):
         template = \
-- 
2.34.1

