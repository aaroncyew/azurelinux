From aafe5eb65ace177f071a73f5d6c5d5275fd03dbc Mon Sep 17 00:00:00 2001
From: Pawel Winogrodzki <pawelwi@microsoft.com>
Date: Tue, 8 Mar 2022 16:27:37 -0800
Subject: [PATCH] Rust 1.59.0 fix

---
 edgelet-http-mgmt/src/error.rs                       | 2 +-
 edgelet-http/src/util/mod.rs                         | 6 +++---
 iotedge/src/check/mod.rs                             | 2 +-
 iotedge/src/config/import/mod.rs                     | 2 +-
 iotedge/src/config/import/old_config/mod.rs          | 3 ++-
 iotedge/src/config/import/old_config/provisioning.rs | 3 ++-
 6 files changed, 10 insertions(+), 8 deletions(-)

diff --git a/edgelet-http-mgmt/src/error.rs b/edgelet-http-mgmt/src/error.rs
index 71e2f54..2b8aa0d 100644
--- a/edgelet-http-mgmt/src/error.rs
+++ b/edgelet-http-mgmt/src/error.rs
@@ -125,7 +125,7 @@ impl From<Context<ErrorKind>> for Error {
 impl IntoResponse for Error {
     fn into_response(self) -> Response<Body> {
         let mut message = self.to_string();
-        for cause in Fail::iter_causes(&self) {
+        for cause in <dyn Fail>::iter_causes(&self) {
             message.push_str(&format!("\n\tcaused by: {}", cause));
         }
 
diff --git a/edgelet-http/src/util/mod.rs b/edgelet-http/src/util/mod.rs
index e8839a2..005b703 100644
--- a/edgelet-http/src/util/mod.rs
+++ b/edgelet-http/src/util/mod.rs
@@ -83,9 +83,9 @@ impl AsyncRead for StreamSelector {
     #[inline]
     fn read_buf<B: BufMut>(&mut self, buf: &mut B) -> Poll<usize, io::Error> {
         match self {
-            StreamSelector::Tcp(stream) => stream.read_buf(buf),
-            StreamSelector::Tls(stream) => stream.read_buf(buf),
-            StreamSelector::Unix(stream) => stream.read_buf(buf),
+            StreamSelector::Tcp(stream) => tokio::io::AsyncRead::read_buf(stream, buf),
+            StreamSelector::Tls(stream) => tokio::io::AsyncRead::read_buf(stream, buf),
+            StreamSelector::Unix(stream) => tokio::io::AsyncRead::read_buf(stream, buf),
         }
     }
 }
diff --git a/iotedge/src/check/mod.rs b/iotedge/src/check/mod.rs
index d6eab6a..469a3f2 100644
--- a/iotedge/src/check/mod.rs
+++ b/iotedge/src/check/mod.rs
@@ -245,7 +245,7 @@ impl Check {
             description: String,
             result: CheckResult,
             additional_info: serde_json::Value,
-        };
+        }
 
         let mut checks: BTreeMap<String, CheckOutputSerializable> = Default::default();
 
diff --git a/iotedge/src/config/import/mod.rs b/iotedge/src/config/import/mod.rs
index 265e956..0931c30 100644
--- a/iotedge/src/config/import/mod.rs
+++ b/iotedge/src/config/import/mod.rs
@@ -152,7 +152,7 @@ fn execute_inner(
         connect,
         listen,
         // Ignore the old config's `homedir` value. We want to use a fresh directory and have the right ACLs.
-        homedir: _,
+        _homedir: _,
         certificates,
         watchdog,
         moby_runtime,
diff --git a/iotedge/src/config/import/old_config/mod.rs b/iotedge/src/config/import/old_config/mod.rs
index 82fa1b9..e4b9848 100644
--- a/iotedge/src/config/import/old_config/mod.rs
+++ b/iotedge/src/config/import/old_config/mod.rs
@@ -25,7 +25,8 @@ pub(crate) struct Config {
     pub(crate) connect: Connect,
     pub(crate) listen: Listen,
 
-    pub(crate) homedir: PathBuf,
+    #[serde(rename = "homedir")]
+    pub(crate) _homedir: PathBuf,
 
     pub(crate) certificates: Option<Certificates>,
 
diff --git a/iotedge/src/config/import/old_config/provisioning.rs b/iotedge/src/config/import/old_config/provisioning.rs
index b5acd4f..a9b1272 100644
--- a/iotedge/src/config/import/old_config/provisioning.rs
+++ b/iotedge/src/config/import/old_config/provisioning.rs
@@ -269,7 +269,8 @@ pub(crate) struct X509AttestationInfo {
 #[derive(Debug, serde_derive::Deserialize)]
 #[serde(rename_all = "lowercase")]
 pub(crate) struct External {
-    endpoint: Url,
+    #[serde(rename = "endpoint")]
+    _endpoint: Url,
 }
 
 fn base64_deserialize<'de, D>(deserializer: D) -> Result<Vec<u8>, D::Error>
-- 
2.17.1

