From b101109e42800231e5357962b123c669822997e3 Mon Sep 17 00:00:00 2001
From: Jack Ren <bjrjk@qq.com>
Date: Fri, 23 Dec 2022 23:17:25 +0800
Subject: [PATCH 1/2] Solved infinite loop problem when output.length() is
 0x1_0000_0000 exactly

---
 src/mem.rs | 9 ++++++++-
 1 file changed, 8 insertions(+), 1 deletion(-)

diff --git a/src/mem.rs b/src/mem.rs
index ec5b9b9c..495386f7 100644
--- a/src/mem.rs
+++ b/src/mem.rs
@@ -227,7 +227,14 @@ impl Decompress {
         self.inner.raw.next_in = input.as_ptr() as *mut _;
         self.inner.raw.avail_in = input.len() as c_uint;
         self.inner.raw.next_out = output.as_mut_ptr() as *mut _;
-        self.inner.raw.avail_out = output.len() as c_uint;
+        self.inner.raw.avail_out = {
+            let avail_out = output.len();
+            if (avail_out > 0) && (avail_out & c_uint::MAX as usize == 0) {
+                c_uint::MAX
+            } else {
+                avail_out as c_uint
+            }
+        };
         unsafe {
             match ffi::BZ2_bzDecompress(&mut *self.inner.raw) {
                 ffi::BZ_OK => Ok(Status::Ok),

From d73a725ca18482fc71e66805a1a21b5f218ff77a Mon Sep 17 00:00:00 2001
From: Jack Ren <bjrjk@qq.com>
Date: Thu, 5 Jan 2023 08:26:32 +0800
Subject: [PATCH 2/2] Fixed incomplete and too complicated patch

---
 src/mem.rs | 15 ++++-----------
 1 file changed, 4 insertions(+), 11 deletions(-)

diff --git a/src/mem.rs b/src/mem.rs
index 495386f7..ff7d9a5a 100644
--- a/src/mem.rs
+++ b/src/mem.rs
@@ -150,9 +150,9 @@ impl Compress {
             return Ok(Status::RunOk);
         }
         self.inner.raw.next_in = input.as_ptr() as *mut _;
-        self.inner.raw.avail_in = input.len() as c_uint;
+        self.inner.raw.avail_in = input.len().min(c_uint::MAX as usize) as c_uint;
         self.inner.raw.next_out = output.as_mut_ptr() as *mut _;
-        self.inner.raw.avail_out = output.len() as c_uint;
+        self.inner.raw.avail_out = output.len().min(c_uint::MAX as usize) as c_uint;
         unsafe {
             match ffi::BZ2_bzCompress(&mut *self.inner.raw, action as c_int) {
                 ffi::BZ_RUN_OK => Ok(Status::RunOk),
@@ -225,16 +225,9 @@ impl Decompress {
     /// Decompress a block of input into a block of output.
     pub fn decompress(&mut self, input: &[u8], output: &mut [u8]) -> Result<Status, Error> {
         self.inner.raw.next_in = input.as_ptr() as *mut _;
-        self.inner.raw.avail_in = input.len() as c_uint;
+        self.inner.raw.avail_in = input.len().min(c_uint::MAX as usize) as c_uint;
         self.inner.raw.next_out = output.as_mut_ptr() as *mut _;
-        self.inner.raw.avail_out = {
-            let avail_out = output.len();
-            if (avail_out > 0) && (avail_out & c_uint::MAX as usize == 0) {
-                c_uint::MAX
-            } else {
-                avail_out as c_uint
-            }
-        };
+        self.inner.raw.avail_out = output.len().min(c_uint::MAX as usize) as c_uint;
         unsafe {
             match ffi::BZ2_bzDecompress(&mut *self.inner.raw) {
                 ffi::BZ_OK => Ok(Status::Ok),
