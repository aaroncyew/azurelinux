TOPDIR=<TOPDIR>
SPECS_DIR=$TOPDIR/SPECS
SOURCES_DIR=$TOPDIR/SOURCES
RPMS_DIR=$TOPDIR/RPMS
SRPMS_DIR=$TOPDIR/SRPMS
IS_REPO_ENABLED=false

# Create symlink from SPECS/ to SOURCES/ when rpm is called
rpm() {
    local args=("$@")
    command "$FUNCNAME" "${args[@]}"
    if [[ ${args} = *"i"* ]]; then
        for ((i = 0; i < ${#args[@]}; ++i)); do
            if [[ ${args[$i]} = *".src.rpm"* ]]; then
                local SPEC=${args[$i]}
                SPEC=${SPEC##*/}
                SPEC=${SPEC%-*}
                SPEC=${SPEC%-*}
                SPEC=${SPEC%\**}
                mkdir -p $SOURCES_DIR
                ln -sf $SPECS_DIR/$SPEC/* $SOURCES_DIR/
            fi
        done
    fi
    rm -f $SPECS_DIR/*.spec
    rm -f $SOURCES_DIR/*.spec
    rm -f $SOURCES_DIR/*.signatures.json
}

# Installs srpm, pkg dependencies and builds pkg
build_pkg() {
    local PKG=("$@")
    if [ -z "$PKG" ]; then echo "Please provide pkg name"; return; fi
    rpm -ihv /mnt/INTERMEDIATE_SRPMS/$PKG*.src.rpm
    $(install_dependencies $PKG)
#    dnf builddep -y $SPECS_DIR/$PKG/$PKG.spec
    rpmbuild -ba $SPECS_DIR/$PKG/$PKG.spec
}

# Show help on useful commands
show_help() {
    cat /mariner_docker_stuff/welcome.txt
}

# Refresh repo cache with newly built RPM
rpmbuild() {
    local args=("$@")
    command "$FUNCNAME" "${args[@]}"
    if [[ ${IS_REPO_ENABLED} = true ]] ; then
        refresh_local_repo
        tdnf makecache
    fi
}

# Refresh metadata for local RPMs' repo
refresh_local_repo() {
    echo "-------- refreshing the local repo ---------"
    pushd $RPMS_DIR
    createrepo .
}

# Satisfy dependencies from local RPMs
enable_local_repo() {
    IS_REPO_ENABLED=true
    mv /etc/yum.repos.d/local_repo.not_a_repo /etc/yum.repos.d/local_repo.repo
    pushd /repo
    createrepo .
    mkdir -p $RPMS_DIR
    pushd $RPMS_DIR
    createrepo .
    echo "-------- the local repo is enabled ---------"
    #echo "You can install the following packages from it:"
    #tdnf repoquery --repoid=local_build_repo 2>/dev/null
}

# Update dependency graph
update_specs_metadata() {
    # update specs.json
    /mariner_docker_stuff/specreader --dir=$SPECS_DIR  --srpm-dir="/mnt/INTERMEDIATE_SRPMS/" --output=/mariner_docker_stuff/specs.json --dist-tag="containerized" --rpm-dir="/mnt/RPMS/"
    # update graph.dot
    /mariner_docker_stuff/grapher --input=/mariner_docker_stuff/specs.json --output=/mariner_docker_stuff/graph.dot
}

install_dependencies_depsearch() {
    local PKG=("$@")
    if [ -z "$PKG" ]; then echo "Please provide pkg name"; return; fi
    echo "-------- installing dependencies ---------"
    dep_list=$(get_pkg_dependency $PKG)
    echo "**** DEP list is $dep_list"
    for dependency in $dep_list
    do
        tdnf install -y $dependency 2>&1
    done
}

# Get dependencies of a package
get_pkg_dependency() {
    local PKG=("$@")
    if [ -z "$PKG" ]; then echo "Please provide pkg name"; return; fi
    /mariner_docker_stuff/depsearch --input=/mariner_docker_stuff/graph.dot  --packages=$PKG --reverse
}

install_dependencies() {
    local PKG=("$@")
    if [ -z "$PKG" ]; then echo "Please provide pkg name"; return; fi
    spec_file=$SPECS_DIR/$PKG/$PKG.spec
    dep_list=$(grep "BuildRequires" $spec_file | cut -d ':' -f 2)
    for dependency in $dep_list
    do
        tdnf install -y $dependency 2>&1
    done
}
