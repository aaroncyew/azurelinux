# Copyright (c) Microsoft Corporation.
# Licensed under the MIT License.

parameters:
  - name: buildRepoRoot
    type: string
    default: "$(Build.SourcesDirectory)"

  - name: outputArtifactsFolder
    type: string
    default: "$(Build.ArtifactStagingDirectory)"

  - name: outputArtifactsLogsSubfolder
    type: string
    default: "LOGS"

  - name: outputArtifactsPackagesSubfolder
    type: string
    default: "ARTIFACTS"

  - name: selfRepoName
    type: string
    default: "CBL-Mariner"

steps:
  - template: ToolkitCheck.yml@${{ parameters.selfRepoName }}
    parameters:
      buildRepoRoot: ${{ parameters.buildRepoRoot }}

  - bash: sudo make -C "${{ parameters.buildRepoRoot }}/toolkit" "-j$(nproc)" toolchain QUICK_REBUILD=y
    displayName: "Build toolchain"

  - bash: |
      failed_rpms_log="${{ parameters.buildRepoRoot }}/build/logs/toolchain/failures.txt"

      if [[ -f "$failed_rpms_log" ]]; then
          echo "List of RPMs that failed to build:" >&2
          cat "$failed_rpms_log" >&2
      else
          echo "Build failed - no specific RPM" >&2
      fi
    condition: failed()
    displayName: "Print failed RPMs"

  - bash: |
      published_artifacts_dir="${{ parameters.outputArtifactsFolder }}/${{ parameters.outputArtifactsPackagesSubfolder }}"
      mkdir -p "$published_artifacts_dir"
      cp "${{ parameters.buildRepoRoot }}"/build/toolchain/toolchain_built_{,s}rpms_*.tar.gz "$published_artifacts_dir"
    displayName: "Copy artifacts for publishing"

  - bash: |
      published_logs_dir="${{ parameters.outputArtifactsFolder }}/${{ parameters.outputArtifactsLogsSubfolder }}"
      mkdir -p "$published_logs_dir"
      tar -C "${{ parameters.buildRepoRoot }}/build/logs/toolchain" -czf "$published_logs_dir/toolchain.logs.tar.gz" .
    condition: always()
    displayName: "Copy logs for publishing"

  - bash: |
      # Publish the list of packages that should be re-tested during full package build.
      #   This list will be the contents of 'built_specs_list.txt' in the toolchain build logs directory, but only for
      #   packages that have a '%check' section in their spec file. The assumption is that all packages will have a 
      #   '%check' section for all architectures, or none.
      built_list="${{ parameters.buildRepoRoot }}"/build/logs/toolchain/built_specs_list.txt
      specs_dir="${{ parameters.buildRepoRoot }}/SPECS/"
      if [[ -f "$built_list" ]]; then
        retest_list=()
        while read -r s; do
          if [ ! -f "${specs_dir}/${s}/${s}".spec ]; then
              echo "ERROR: '${specs_dir}/${s}/${s}.spec' does not exist"
              exit 1
          fi
          if grep -q '^%check' "${specs_dir}/${s}/${s}.spec"; then
              retest_list+=("${s}")
          fi
        done < "$built_list"
      else
        echo "No file '$built_list' found, so no packages to re-test"
      fi
      # Default will be "", which is fine.
      echo "Setting 'CalculatePackageRetestList.packageRetestList' to '${retest_list[*]}'"
      echo "##vso[task.setvariable variable=packageRetestList;isOutput=true]${retest_list[*]}"
    name: "CalculatePackageRetestList"
    displayName: "Calculating packages that should be re-tested"
