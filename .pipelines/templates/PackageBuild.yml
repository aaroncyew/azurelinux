parameters:
  - name: buildArtifactsFolder
    type: string
    default: "$(Build.ArtifactStagingDirectory)"

  - name: isCheckBuild
    type: string
    default: "n"

  - name: isDeltaBuild
    type: boolean
    default: false

  - name: inputArtifactsName
    type: string
    default: "ARTIFACTS"

  - name: repoRoot
    type: string
    default: "$(Build.SourcesDirectory)"

  - name: useCustomToolchain
    type: boolean
    default: false

steps:
  - ${{ if eq(parameters.useCustomToolchain, true) }}:
    - task: DownloadPipelineArtifact@2
      displayName: "Download toolchain"
      inputs:
        artifact: "${{ parameters.inputArtifactsName }}"
        patterns: "**/toolchain_built_rpms_all.tar.gz"
        path: "$(Build.Repository.LocalPath)/input"

    - script: |
        toolchain_archive="$(find "$(Build.Repository.LocalPath)/input" -name toolchain_built_rpms_all.tar.gz)"
        if [[ ! -f "$toolchain_archive" ]]; then
          echo "ERROR: toolchain archive not found!" >&2
          exit 1
        fi

        sudo make -C "${{ parameters.repoRoot }}/toolkit" toolchain TOOLCHAIN_ARCHIVE="$toolchain_archive"
      displayName: "Populate toolchain"

  - script: |
      sudo make -C "${{ parameters.repoRoot }}/toolkit" build-packages -j$(nproc) \
        REBUILD_TOOLS=y \
        RUN_CHECK=${{ parameters.isCheckBuild }}
    displayName: "Build packages"

  - script: |
      sudo make -C "${{ parameters.repoRoot }}/toolkit" compress-rpms
    displayName: "Compress RPMs"

  - script: |
      sudo make -C "${{ parameters.repoRoot }}/toolkit" compress-srpms
    displayName: "Compress SRPMs"

  - bash: |
      published_artifacts_dir="${{ parameters.buildArtifactsFolder }}/ARTIFACTS"
      mkdir -p "$published_artifacts_dir"
      cp "${{ parameters.coreRepoRoot }}"/out/{,s}rpms.tar.gz "$published_artifacts_dir"
    condition: succeeded()
    displayName: "Copy artifacts for publishing"

  - bash: |
      published_logs_dir="${{ parameters.buildArtifactsFolder }}/LOGS"
      mkdir -p "$published_logs_dir"
      tar -C "${{ parameters.coreRepoRoot }}/build/logs/pkggen" -czf "$published_logs_dir/pkggen.logs.tar.gz" .
    condition: always()
    displayName: "Copy logs for publishing"
