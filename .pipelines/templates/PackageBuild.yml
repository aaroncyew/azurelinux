parameters:
  - name: customToolchainArtifactDir
    type: string
    default: "ARTIFACTS"

  - name: customToolchainArtifactName
    type: string
    default: "toolchain_built_rpms_all.tar.gz"

  - name: customToolchainEnabled
    type: boolean
    default: false

  - name: isCheckBuild
    type: boolean
    default: false

  - name: isDeltaBuild
    type: boolean
    default: false

  - name: outputArtifactsFolder
    type: string
    default: "$(Build.ArtifactStagingDirectory)"

  - name: repoRoot
    type: string
    default: "$(Build.SourcesDirectory)"

steps:
  - template: ToolkitCheck.yml@self
    parameters:
      repoRoot: ${{ parameters.repoRoot }}

  - ${{ if eq(parameters.customToolchainEnabled, true) }}:
    - task: DownloadPipelineArtifact@2
      displayName: "Download toolchain"
      inputs:
        artifact: "${{ parameters.customToolchainArtifactDir }}"
        patterns: "**/${{ parameters.customToolchainArtifactName }}"
        path: "$(Build.Repository.LocalPath)/input"

    - script: |
        toolchain_archive="$(find "$(Build.Repository.LocalPath)/input" -name "${{ parameters.customToolchainArtifactName }}")"
        if [[ ! -f "$toolchain_archive" ]]; then
          echo "ERROR: toolchain archive not found!" >&2
          exit 1
        fi

        sudo make -C "${{ parameters.repoRoot }}/toolkit" toolchain TOOLCHAIN_ARCHIVE="$toolchain_archive"
      displayName: "Populate toolchain"

  - script: |
      run_check_arg="RUN_CHECK=n"
      if [[ ${{ parameters.isCheckBuild }} =~ [Tt]rue ]]; then
        run_check_arg="RUN_CHECK=y"
      fi

      sudo make -C "${{ parameters.repoRoot }}/toolkit" build-packages -j$(nproc) \
        REBUILD_TOOLS=y \
        $run_check_arg
    displayName: "Build packages"

  - script: |
      sudo make -C "${{ parameters.repoRoot }}/toolkit" compress-rpms
    displayName: "Compress RPMs"

  - script: |
      sudo make -C "${{ parameters.repoRoot }}/toolkit" compress-srpms
    displayName: "Compress SRPMs"

  - bash: |
      published_artifacts_dir="${{ parameters.outputArtifactsFolder }}/ARTIFACTS"
      mkdir -p "$published_artifacts_dir"
      cp "${{ parameters.repoRoot }}"/out/{,s}rpms.tar.gz "$published_artifacts_dir"
    condition: succeeded()
    displayName: "Copy artifacts for publishing"

  - bash: |
      published_logs_dir="${{ parameters.outputArtifactsFolder }}/LOGS"
      mkdir -p "$published_logs_dir"
      tar -C "${{ parameters.repoRoot }}/build/logs/pkggen" -czf "$published_logs_dir/pkggen.logs.tar.gz" .
    condition: always()
    displayName: "Copy logs for publishing"
