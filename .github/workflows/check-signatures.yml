# Copyright (c) Microsoft Corporation.
# Licensed under the MIT License.

name: Signature files check

on:
  push:
    branches: [main, dev, 1.0*, 2.0*, 3.0*, fasttrack/*]
  pull_request:
    branches: [main, dev, 1.0*, 2.0*, 3.0*, fasttrack/*]

jobs:
  spec-check:
    name: Signature files check
    runs-on: ubuntu-latest

    steps:
      # Checkout the branch of our repo that triggered this action
      - name: Workflow trigger checkout
        uses: actions/checkout@v4

      # For consistency, we use the same major/minor version of Python that CBL-Mariner ships
      - name: Setup Python 3.9
        uses: actions/setup-python@v4
        with:
          python-version: 3.9

      - name: Get Python dependencies
        run: python3 -m pip install -r toolkit/scripts/requirements.txt

      - name: Get base commit for PRs
        if: ${{ github.event_name == 'pull_request' }}
        run: |
          git fetch origin ${{ github.base_ref }}
          echo "base_sha=$(git rev-parse origin/${{ github.base_ref }})" >> $GITHUB_ENV
          echo "Merging ${{ github.sha }} into ${{ github.base_ref }}"

      - name: Get base commit for Pushes
        if: ${{ github.event_name == 'push' }}
        run: |
          git fetch origin ${{ github.event.before }}
          echo "base_sha=${{ github.event.before }}" >> $GITHUB_ENV
          echo "Merging ${{ github.sha }} into ${{ github.event.before }}"

      - name: Check the signatures
        run: |
          echo "Files changed: '$(git diff-tree --no-commit-id --name-only -r ${{ env.base_sha }} ${{ github.sha }})'"
          changed_folders=$(dirname $(git diff-tree --diff-filter=d --no-commit-id --name-only -r ${{ env.base_sha }} ${{ github.sha }}) | sort --unique)
          echo "Folders to validate: '${changed_folders}'"
          
          for DIR in $changed_folders
          do
            echo "check $DIR"
            for SIGNATURE_FILE in $(pwd)/$DIR/*.signatures.json
            do
              echo "check $SIGNATURE_FILE"
              if [[ -f "$SIGNATURE_FILE" ]]
              then
                echo  "$SIGNATURE_FILE exists"
                cat $SIGNATURE_FILE
                echo  "$SIGNATURE_FILE files: [$(jq -r '.Signatures | keys[]' $SIGNATURE_FILE)]"
                echo  "$SIGNATURE_FILE signatures: [$(jq -r '.Signatures[]' $SIGNATURE_FILE)]"

                keys=$(jq -r '.Signatures | keys[]' $SIGNATURE_FILE)
                for KEY in $keys
                do
                  file_to_test="$(pwd)/$DIR/$KEY"
                  echo "check $file_to_test"

                  if [[ -e $file_to_test ]]
                  then
                    echo "$file_to_test exists"

                    echo  "$KEY: expect $(jq -r ".Signatures[\"$KEY\"]" $SIGNATURE_FILE)"
                    echo  "$KEY: actual $(sha256sum $file_to_test  | awk '{print $1}')"

                    expected_signature=$(jq -r ".Signatures[\"$KEY\"]" $SIGNATURE_FILE)
                    actual_signature=$(sha256sum $file_to_test  | awk '{print $1}')
                    if [[ "$actual_signature" != "$expected_signature" ]]
                    then
                      echo "Mismatched signatures for $file_to_test: expeceted=$expected_signature actual=$actual_signature"
                      exit 1
                    fi
                  fi
                done
              fi
            done
          done

